
project_13_raster_plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003938  08003938  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003938  08003938  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003938  08003938  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  0800394c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800394c  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bd3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d95  00000000  00000000  00030c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  000329a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00033960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001da8a  00000000  00000000  00034830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b451  00000000  00000000  000522ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c58e8  00000000  00000000  0005d70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122ff3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  00123070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003910 	.word	0x08003910

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003910 	.word	0x08003910

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f001 f961 	bl	80014e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80b 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f94e 	bl	80004c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000228:	f000 f8b2 	bl	8000390 <MX_TIM2_Init>
  MX_TIM3_Init();
 800022c:	f000 f8fc 	bl	8000428 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000230:	f000 f868 	bl	8000304 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  device_init();
 8000234:	f000 fad0 	bl	80007d8 <device_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x20>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b0a4      	sub	sp, #144	; 0x90
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000244:	2238      	movs	r2, #56	; 0x38
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f003 fb59 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025e:	463b      	mov	r3, r7
 8000260:	2244      	movs	r2, #68	; 0x44
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f003 fb4b 	bl	8003900 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800026e:	f001 fe1b 	bl	8001ea8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000276:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800027a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	2303      	movs	r3, #3
 8000282:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000284:	2302      	movs	r3, #2
 8000286:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000288:	2308      	movs	r3, #8
 800028a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800028e:	2302      	movs	r3, #2
 8000290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000294:	2302      	movs	r3, #2
 8000296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 feb3 	bl	8002010 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002b0:	f000 f986 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2303      	movs	r3, #3
 80002ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002cc:	2101      	movs	r1, #1
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 f9b6 	bl	8002640 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002da:	f000 f971 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80002de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80002e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80002e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ea:	463b      	mov	r3, r7
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fb8b 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80002f8:	f000 f962 	bl	80005c0 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3790      	adds	r7, #144	; 0x90
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800030a:	4a20      	ldr	r2, [pc, #128]	; (800038c <MX_FDCAN1_Init+0x88>)
 800030c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800030e:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000322:	2200      	movs	r2, #0
 8000324:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000328:	2200      	movs	r2, #0
 800032a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800032e:	2200      	movs	r2, #0
 8000330:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000334:	2201      	movs	r2, #1
 8000336:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800033a:	2201      	movs	r2, #1
 800033c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000340:	2202      	movs	r2, #2
 8000342:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000346:	2202      	movs	r2, #2
 8000348:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800034c:	2201      	movs	r2, #1
 800034e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000352:	2201      	movs	r2, #1
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000358:	2201      	movs	r2, #1
 800035a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800035e:	2201      	movs	r2, #1
 8000360:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000364:	2200      	movs	r2, #0
 8000366:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800036a:	2200      	movs	r2, #0
 800036c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000370:	2200      	movs	r2, #0
 8000372:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000376:	f001 fa35 	bl	80017e4 <HAL_FDCAN_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000380:	f000 f91e 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	200000e8 	.word	0x200000e8
 800038c:	40006400 	.word	0x40006400

08000390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ae:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_TIM2_Init+0x94>)
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 80003b6:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_TIM2_Init+0x94>)
 80003b8:	2240      	movs	r2, #64	; 0x40
 80003ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <MX_TIM2_Init+0x94>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80003c2:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_TIM2_Init+0x94>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <MX_TIM2_Init+0x94>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_TIM2_Init+0x94>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d4:	4813      	ldr	r0, [pc, #76]	; (8000424 <MX_TIM2_Init+0x94>)
 80003d6:	f002 fd07 	bl	8002de8 <HAL_TIM_Base_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003e0:	f000 f8ee 	bl	80005c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <MX_TIM2_Init+0x94>)
 80003f2:	f002 ff69 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003fc:	f000 f8e0 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000400:	2320      	movs	r3, #32
 8000402:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4619      	mov	r1, r3
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_TIM2_Init+0x94>)
 800040e:	f003 f98b 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000418:	f000 f8d2 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	3720      	adds	r7, #32
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000168 	.word	0x20000168

08000428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000446:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <MX_TIM3_Init+0x94>)
 8000448:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <MX_TIM3_Init+0x98>)
 800044a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <MX_TIM3_Init+0x94>)
 800044e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000452:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b19      	ldr	r3, [pc, #100]	; (80004bc <MX_TIM3_Init+0x94>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <MX_TIM3_Init+0x94>)
 800045c:	220a      	movs	r2, #10
 800045e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000460:	4b16      	ldr	r3, [pc, #88]	; (80004bc <MX_TIM3_Init+0x94>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <MX_TIM3_Init+0x94>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800046c:	4813      	ldr	r0, [pc, #76]	; (80004bc <MX_TIM3_Init+0x94>)
 800046e:	f002 fcbb 	bl	8002de8 <HAL_TIM_Base_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000478:	f000 f8a2 	bl	80005c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800047c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000480:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <MX_TIM3_Init+0x94>)
 800048a:	f002 ff1d 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000494:	f000 f894 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000498:	2320      	movs	r3, #32
 800049a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4619      	mov	r1, r3
 80004a4:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_TIM3_Init+0x94>)
 80004a6:	f003 f93f 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80004b0:	f000 f886 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000030 	.word	0x20000030
 80004c0:	40000400 	.word	0x40000400

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <MX_GPIO_Init+0xf0>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a35      	ldr	r2, [pc, #212]	; (80005b4 <MX_GPIO_Init+0xf0>)
 80004e0:	f043 0320 	orr.w	r3, r3, #32
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <MX_GPIO_Init+0xf0>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0320 	and.w	r3, r3, #32
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <MX_GPIO_Init+0xf0>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a2f      	ldr	r2, [pc, #188]	; (80005b4 <MX_GPIO_Init+0xf0>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_GPIO_Init+0xf0>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_GPIO_Init+0xf0>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a29      	ldr	r2, [pc, #164]	; (80005b4 <MX_GPIO_Init+0xf0>)
 8000510:	f043 0302 	orr.w	r3, r3, #2
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_GPIO_Init+0xf0>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2138      	movs	r1, #56	; 0x38
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f001 fca5 	bl	8001e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 800052e:	2200      	movs	r2, #0
 8000530:	f240 11f9 	movw	r1, #505	; 0x1f9
 8000534:	4820      	ldr	r0, [pc, #128]	; (80005b8 <MX_GPIO_Init+0xf4>)
 8000536:	f001 fc9f 	bl	8001e78 <HAL_GPIO_WritePin>
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ON_TOMO_Pin */
  GPIO_InitStruct.Pin = ON_TOMO_Pin;
 800053a:	2302      	movs	r3, #2
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ON_TOMO_GPIO_Port, &GPIO_InitStruct);
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4619      	mov	r1, r3
 800054c:	481b      	ldr	r0, [pc, #108]	; (80005bc <MX_GPIO_Init+0xf8>)
 800054e:	f001 faf9 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONFIG_3_Pin CONFIG_2_Pin CONFIG_1_Pin BUCKY_CALL_Pin
                           GRID_BUTTON_Pin GRID_END_POINT_Pin GRID_120_DETECT_Pin GRID_180_DETECT_Pin
                           PUSHBUTTON_BUCKYBRAKE_Pin */
  GPIO_InitStruct.Pin = CONFIG_3_Pin|CONFIG_2_Pin|CONFIG_1_Pin|BUCKY_CALL_Pin
 8000552:	f248 73c7 	movw	r3, #34759	; 0x87c7
 8000556:	60fb      	str	r3, [r7, #12]
                          |GRID_BUTTON_Pin|GRID_END_POINT_Pin|GRID_120_DETECT_Pin|GRID_180_DETECT_Pin
                          |PUSHBUTTON_BUCKYBRAKE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4619      	mov	r1, r3
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f001 faeb 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRID_120_Pin GRID_180_Pin BUCKY_READY_Pin */
  GPIO_InitStruct.Pin = GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin;
 800056e:	2338      	movs	r3, #56	; 0x38
 8000570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f001 fadc 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_CENTERING_Pin BUCKY_BRAKE_Pin RESET_Pin ENABLE_Pin
                           CURRENT_WIND_Pin STEP_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 800058c:	f240 13f9 	movw	r3, #505	; 0x1f9
 8000590:	60fb      	str	r3, [r7, #12]
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	4619      	mov	r1, r3
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80005a6:	f001 facd 	bl	8001b44 <HAL_GPIO_Init>

}
 80005aa:	bf00      	nop
 80005ac:	3720      	adds	r7, #32
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48000400 	.word	0x48000400
 80005bc:	48001400 	.word	0x48001400

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x44>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6613      	str	r3, [r2, #96]	; 0x60
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x44>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_MspInit+0x44>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	6593      	str	r3, [r2, #88]	; 0x58
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_MspInit+0x44>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000606:	f001 fcf3 	bl	8001ff0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a18      	ldr	r2, [pc, #96]	; (8000698 <HAL_FDCAN_MspInit+0x80>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d129      	bne.n	800068e <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <HAL_FDCAN_MspInit+0x84>)
 800063c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <HAL_FDCAN_MspInit+0x84>)
 8000640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000644:	6593      	str	r3, [r2, #88]	; 0x58
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_FDCAN_MspInit+0x84>)
 8000648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_FDCAN_MspInit+0x84>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <HAL_FDCAN_MspInit+0x84>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_FDCAN_MspInit+0x84>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800066a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800067c:	2309      	movs	r3, #9
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f001 fa5b 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40006400 	.word	0x40006400
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b0:	d114      	bne.n	80006dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_TIM_Base_MspInit+0x78>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <HAL_TIM_Base_MspInit+0x78>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6593      	str	r3, [r2, #88]	; 0x58
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_TIM_Base_MspInit+0x78>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	201c      	movs	r0, #28
 80006d0:	f001 f853 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006d4:	201c      	movs	r0, #28
 80006d6:	f001 f86a 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006da:	e018      	b.n	800070e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_TIM_Base_MspInit+0x7c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d113      	bne.n	800070e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_TIM_Base_MspInit+0x78>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <HAL_TIM_Base_MspInit+0x78>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6593      	str	r3, [r2, #88]	; 0x58
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_TIM_Base_MspInit+0x78>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	201d      	movs	r0, #29
 8000704:	f001 f839 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000708:	201d      	movs	r0, #29
 800070a:	f001 f850 	bl	80017ae <HAL_NVIC_EnableIRQ>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	40000400 	.word	0x40000400

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000774:	f000 ff08 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <TIM2_IRQHandler+0x14>)
 8000782:	f002 fc22 	bl	8002fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  motor_timer_interrupt_handler();
 8000786:	f000 fdb7 	bl	80012f8 <motor_timer_interrupt_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000168 	.word	0x20000168

08000794 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <TIM3_IRQHandler+0x14>)
 800079a:	f002 fc16 	bl	8002fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  signals_check_timer_interrupt_handler();
 800079e:	f000 f9b1 	bl	8000b04 <signals_check_timer_interrupt_handler>
  /* USER CODE END TIM3_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000030 	.word	0x20000030

080007ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <SystemInit+0x28>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b6:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <SystemInit+0x28>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SystemInit+0x28>)
 80007c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007c6:	609a      	str	r2, [r3, #8]
#endif
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <device_init>:
/*
 * Инициализация устройства
 */

void device_init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	device_current_state = DEVICE_STARTS;										// выставляем состояние устройства: устройство стартует
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <device_init+0x34>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
	pins_init();																// инициализируем сигналы (указываем пины и порты, инициализируем единый массив сигналов)
 80007e2:	f000 f823 	bl	800082c <pins_init>
	output_signals_state_init(LOGIC_LEVEL_LOW);									// выставляем состояние выходных сигналов
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f942 	bl	8000a70 <output_signals_state_init>
	input_signals_state_update();												// считываем состояние входных сигналов
 80007ec:	f000 f90a 	bl	8000a04 <input_signals_state_update>
	device_modules_init();														// инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1, DIP-переключатели)
 80007f0:	f000 f87c 	bl	80008ec <device_modules_init>
	buttons_state_update();														// обновляем состояние аппаратных модулей
 80007f4:	f000 f98c 	bl	8000b10 <buttons_state_update>
	enable_pin_set();															// навсегда выставляем "1" на входе ШД "Enable"
 80007f8:	f000 f80c 	bl	8000814 <enable_pin_set>
	error_code = NO_ERROR;														// выставляем отсутствие ошибки
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <device_init+0x38>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
	signals_check_timer_interrupts_start();										// запускаем таймер считывания состояний сигналов
 8000802:	f000 f975 	bl	8000af0 <signals_check_timer_interrupts_start>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000090 	.word	0x20000090
 8000810:	200001c4 	.word	0x200001c4

08000814 <enable_pin_set>:

void enable_pin_set(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	if (ENABLE_PIN_LOGIC_LEVEL_INVERTED)
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_LOW);
 8000818:	2200      	movs	r2, #0
 800081a:	2120      	movs	r1, #32
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <enable_pin_set+0x14>)
 800081e:	f000 f9a5 	bl	8000b6c <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_HIGH);
	}
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	48000400 	.word	0x48000400

0800082c <pins_init>:

/*
 * Определяем входные пины, исходя из инициализации, созданной конфигуратором пинов
 */
void pins_init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <pins_init+0xa0>)
 8000832:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000836:	60da      	str	r2, [r3, #12]
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.pin_number = GRID_180_DETECT_Pin;					// пин датчика Холла (растр типа 180)
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <pins_init+0xa0>)
 800083a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083e:	821a      	strh	r2, [r3, #16]

	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <pins_init+0xa0>)
 8000842:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000846:	601a      	str	r2, [r3, #0]
	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.pin_number = GRID_120_DETECT_Pin;					// пин датчика Холла (растр типа 120)
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <pins_init+0xa0>)
 800084a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084e:	809a      	strh	r2, [r3, #4]

	grid_supply_button.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <pins_init+0xa4>)
 8000852:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000856:	601a      	str	r2, [r3, #0]
	grid_supply_button.button_signal.signal_pin.pin_number = GRID_BUTTON_Pin;							// пин кнопки подачи растра
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <pins_init+0xa4>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	809a      	strh	r2, [r3, #4]

	ON_TOMO_IN_signal.signal_pin.GPIO_port_pointer = ON_TOMO_GPIO_Port;
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <pins_init+0xa8>)
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <pins_init+0xac>)
 8000862:	601a      	str	r2, [r3, #0]
	ON_TOMO_IN_signal.signal_pin.pin_number = ON_TOMO_Pin;												// пин сигнала ON_TOMO
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <pins_init+0xa8>)
 8000866:	2202      	movs	r2, #2
 8000868:	809a      	strh	r2, [r3, #4]

	BUCKY_CALL_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <pins_init+0xb0>)
 800086c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000870:	601a      	str	r2, [r3, #0]
	BUCKY_CALL_IN_signal.signal_pin.pin_number = BUCKY_CALL_Pin;										// пин сигнала BUCKYCALL
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <pins_init+0xb0>)
 8000874:	2240      	movs	r2, #64	; 0x40
 8000876:	809a      	strh	r2, [r3, #4]

	pushbutton_buckybrake.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <pins_init+0xb4>)
 800087a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800087e:	601a      	str	r2, [r3, #0]
	pushbutton_buckybrake.button_signal.signal_pin.pin_number = PUSHBUTTON_BUCKYBRAKE_Pin;				// пин кнопки тормоза кассетоприёмника
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <pins_init+0xb4>)
 8000882:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000886:	809a      	strh	r2, [r3, #4]

	limit_switch.GRID_END_POINT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <pins_init+0xb8>)
 800088a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800088e:	601a      	str	r2, [r3, #0]
	limit_switch.GRID_END_POINT_IN_signal.signal_pin.pin_number = GRID_END_POINT_Pin;					// пин концевика
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <pins_init+0xb8>)
 8000892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000896:	809a      	strh	r2, [r3, #4]

	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <pins_init+0xbc>)
 800089a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800089e:	601a      	str	r2, [r3, #0]
	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.pin_number = CONFIG_1_Pin;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <pins_init+0xbc>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	809a      	strh	r2, [r3, #4]

	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <pins_init+0xbc>)
 80008a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ac:	60da      	str	r2, [r3, #12]
	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.pin_number = CONFIG_2_Pin;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <pins_init+0xbc>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	821a      	strh	r2, [r3, #16]

	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <pins_init+0xbc>)
 80008b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ba:	619a      	str	r2, [r3, #24]
	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.pin_number = CONFIG_3_Pin;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <pins_init+0xbc>)
 80008be:	2201      	movs	r2, #1
 80008c0:	839a      	strh	r2, [r3, #28]
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	2000014c 	.word	0x2000014c
 80008d0:	2000007c 	.word	0x2000007c
 80008d4:	200001c8 	.word	0x200001c8
 80008d8:	48001400 	.word	0x48001400
 80008dc:	20000094 	.word	0x20000094
 80008e0:	200000d4 	.word	0x200000d4
 80008e4:	200000a0 	.word	0x200000a0
 80008e8:	200000ac 	.word	0x200000ac

080008ec <device_modules_init>:

/*
 * Инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1)
 */
void device_modules_init(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
	motor.steps_distance_from_limit_switch = STEP_DISTANCE_INIT_VALUE;					// Задаём условное начальное расстояние от концевика, отличное от нуля. Чтобы мотор доехал до концевика и начал отсчёт.
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <device_modules_init+0x70>)
 80008f2:	220a      	movs	r2, #10
 80008f4:	601a      	str	r2, [r3, #0]
	motor.limit_emergency_counter = 0;													// обнуляем аварийный счётчик шагов
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <device_modules_init+0x70>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
	motor.motor_move_direction = MOVE_TO_COORD_END;										// задаём направление движения: двигаться ОТ начального положения
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <device_modules_init+0x70>)
 80008fe:	2201      	movs	r2, #1
 8000900:	721a      	strb	r2, [r3, #8]
	motor.step_pin_current_phase = STEP_LOW_PHASE;										// задаём фазу сигнала STEP
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <device_modules_init+0x70>)
 8000904:	2200      	movs	r2, #0
 8000906:	725a      	strb	r2, [r3, #9]
	motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;					// даём двигателю задание занять начальное положение
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <device_modules_init+0x70>)
 800090a:	2200      	movs	r2, #0
 800090c:	729a      	strb	r2, [r3, #10]
	motor.motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;							// выставляем флаг, что мотор находится в движении
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <device_modules_init+0x70>)
 8000910:	2200      	movs	r2, #0
 8000912:	72da      	strb	r2, [r3, #11]
	motor.exposition_movement_direction = EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION;	// задаём начальное направление циклического движения при экспозиции
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <device_modules_init+0x70>)
 8000916:	2200      	movs	r2, #0
 8000918:	731a      	strb	r2, [r3, #12]
	motor.acceleration_mode = ACCELERATION_MODE_00;										// задаём начальный режим ускорения
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <device_modules_init+0x70>)
 800091c:	2200      	movs	r2, #0
 800091e:	735a      	strb	r2, [r3, #13]
	grid_supply_button.button_released_default_signal_level = LOGIC_LEVEL_LOW;			// выставляем флаг, что при отпущенной кнопке на пине "1"
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <device_modules_init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	731a      	strb	r2, [r3, #12]
	grid_supply_button.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <device_modules_init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
	ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;											// выставляем флаг, что сигнала ON_TOMO не было
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <device_modules_init+0x78>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
	bucky_ready_delay_counter = 0;														// обнуляем счётчик шагов, после которых выставляем BUCKY_READY в "1"
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <device_modules_init+0x7c>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
	pushbutton_buckybrake.button_released_default_signal_level = LOGIC_LEVEL_LOW;		// выставляем флаг, что при отпущенной кнопке на пине "1"
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <device_modules_init+0x80>)
 800093a:	2200      	movs	r2, #0
 800093c:	731a      	strb	r2, [r3, #12]
	pushbutton_buckybrake.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <device_modules_init+0x80>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
	ticks_before_next_step_counter = 0;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <device_modules_init+0x84>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
	ticks_since_start_movement_counter = 0;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <device_modules_init+0x88>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	200001b4 	.word	0x200001b4
 8000960:	2000007c 	.word	0x2000007c
 8000964:	200000d0 	.word	0x200000d0
 8000968:	2000002c 	.word	0x2000002c
 800096c:	200000d4 	.word	0x200000d4
 8000970:	20000164 	.word	0x20000164
 8000974:	20000028 	.word	0x20000028

08000978 <check_input_signals>:

/*
 * Обновляем состояние входных сигналов и аппаратных модулей
 */
void check_input_signals(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	input_signals_state_update();					// считываем состояние входов, обновляем их состояние в объекте устройства
 800097c:	f000 f842 	bl	8000a04 <input_signals_state_update>
	buttons_state_update();							// обновляем состояние аппаратных модулей
 8000980:	f000 f8c6 	bl	8000b10 <buttons_state_update>
	dip_switch_state_update();
 8000984:	f000 f806 	bl	8000994 <dip_switch_state_update>
	device_error_check();							// проверяем текущее состояние устройства на наличие ошибок
 8000988:	f000 f966 	bl	8000c58 <device_error_check>
	read_input_signals_and_set_device_state();		// изменяем состояние устройства в зависимости от входных сигналов
 800098c:	f000 fa04 	bl	8000d98 <read_input_signals_and_set_device_state>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <dip_switch_state_update>:

void dip_switch_state_update(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <dip_switch_state_update+0x68>)
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d106      	bne.n	80009ae <dip_switch_state_update+0x1a>
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <dip_switch_state_update+0x68>)
 80009a2:	7d1b      	ldrb	r3, [r3, #20]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d102      	bne.n	80009ae <dip_switch_state_update+0x1a>
	{
		motor.acceleration_mode = ACCELERATION_MODE_00;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <dip_switch_state_update+0x6c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	735a      	strb	r2, [r3, #13]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <dip_switch_state_update+0x68>)
 80009b0:	7a1b      	ldrb	r3, [r3, #8]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d106      	bne.n	80009c4 <dip_switch_state_update+0x30>
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <dip_switch_state_update+0x68>)
 80009b8:	7d1b      	ldrb	r3, [r3, #20]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d102      	bne.n	80009c4 <dip_switch_state_update+0x30>
	{
		motor.acceleration_mode = ACCELERATION_MODE_01;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <dip_switch_state_update+0x6c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	735a      	strb	r2, [r3, #13]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <dip_switch_state_update+0x68>)
 80009c6:	7a1b      	ldrb	r3, [r3, #8]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d106      	bne.n	80009da <dip_switch_state_update+0x46>
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <dip_switch_state_update+0x68>)
 80009ce:	7d1b      	ldrb	r3, [r3, #20]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d102      	bne.n	80009da <dip_switch_state_update+0x46>
	{
		motor.acceleration_mode = ACCELERATION_MODE_10;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <dip_switch_state_update+0x6c>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	735a      	strb	r2, [r3, #13]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <dip_switch_state_update+0x68>)
 80009dc:	7a1b      	ldrb	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d106      	bne.n	80009f0 <dip_switch_state_update+0x5c>
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <dip_switch_state_update+0x68>)
 80009e4:	7d1b      	ldrb	r3, [r3, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d102      	bne.n	80009f0 <dip_switch_state_update+0x5c>
	{
		motor.acceleration_mode = ACCELERATION_MODE_11;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <dip_switch_state_update+0x6c>)
 80009ec:	2203      	movs	r2, #3
 80009ee:	735a      	strb	r2, [r3, #13]
	}
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200000ac 	.word	0x200000ac
 8000a00:	200001b4 	.word	0x200001b4

08000a04 <input_signals_state_update>:
/*
 * Опрашиваем состояние входных сигналов
 */

void input_signals_state_update(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	check_input_signal_state(&grid_sensor.GRID_180_DETECT_IN_signal);
 8000a08:	480f      	ldr	r0, [pc, #60]	; (8000a48 <input_signals_state_update+0x44>)
 8000a0a:	f000 f88f 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&grid_sensor.GRID_120_DETECT_IN_signal);
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <input_signals_state_update+0x48>)
 8000a10:	f000 f88c 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&grid_supply_button.button_signal);
 8000a14:	480e      	ldr	r0, [pc, #56]	; (8000a50 <input_signals_state_update+0x4c>)
 8000a16:	f000 f889 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&ON_TOMO_IN_signal);
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <input_signals_state_update+0x50>)
 8000a1c:	f000 f886 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&BUCKY_CALL_IN_signal);
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <input_signals_state_update+0x54>)
 8000a22:	f000 f883 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&pushbutton_buckybrake.button_signal);
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <input_signals_state_update+0x58>)
 8000a28:	f000 f880 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&limit_switch.GRID_END_POINT_IN_signal);
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <input_signals_state_update+0x5c>)
 8000a2e:	f000 f87d 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_1_IN_signal);
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <input_signals_state_update+0x60>)
 8000a34:	f000 f87a 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_2_IN_signal);
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <input_signals_state_update+0x64>)
 8000a3a:	f000 f877 	bl	8000b2c <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_3_IN_signal);
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <input_signals_state_update+0x68>)
 8000a40:	f000 f874 	bl	8000b2c <check_input_signal_state>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000158 	.word	0x20000158
 8000a4c:	2000014c 	.word	0x2000014c
 8000a50:	2000007c 	.word	0x2000007c
 8000a54:	200001c8 	.word	0x200001c8
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	200000d4 	.word	0x200000d4
 8000a60:	200000a0 	.word	0x200000a0
 8000a64:	200000ac 	.word	0x200000ac
 8000a68:	200000b8 	.word	0x200000b8
 8000a6c:	200000c4 	.word	0x200000c4

08000a70 <output_signals_state_init>:
/*
 * Выставляем одно состояние на всех выходных пинах
 */

void output_signals_state_init(SignalLogicLevel_EnumTypeDef signal_level_to_set)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, signal_level_to_set);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2120      	movs	r1, #32
 8000a80:	481a      	ldr	r0, [pc, #104]	; (8000aec <output_signals_state_init+0x7c>)
 8000a82:	f000 f873 	bl	8000b6c <set_output_signal_state>
	set_output_signal_state(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, signal_level_to_set);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <output_signals_state_init+0x7c>)
 8000a8e:	f000 f86d 	bl	8000b6c <set_output_signal_state>
	set_output_signal_state(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, signal_level_to_set);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	461a      	mov	r2, r3
 8000a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <output_signals_state_init+0x7c>)
 8000a9c:	f000 f866 	bl	8000b6c <set_output_signal_state>
	set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, signal_level_to_set);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <output_signals_state_init+0x7c>)
 8000aa8:	f000 f860 	bl	8000b6c <set_output_signal_state>
	set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, signal_level_to_set);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <output_signals_state_init+0x7c>)
 8000ab4:	f000 f85a 	bl	8000b6c <set_output_signal_state>
	set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, signal_level_to_set);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	461a      	mov	r2, r3
 8000abc:	2120      	movs	r1, #32
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f000 f853 	bl	8000b6c <set_output_signal_state>
	set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, signal_level_to_set);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	2108      	movs	r1, #8
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f000 f84c 	bl	8000b6c <set_output_signal_state>
	set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, signal_level_to_set);
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2110      	movs	r1, #16
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f000 f845 	bl	8000b6c <set_output_signal_state>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	48000400 	.word	0x48000400

08000af0 <signals_check_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым будем опрашивать состояние входных сигналов
 */
void signals_check_timer_interrupts_start(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(SIGNALS_CHECK_TIMER_POINTER);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <signals_check_timer_interrupts_start+0x10>)
 8000af6:	f002 f9cf 	bl	8002e98 <HAL_TIM_Base_Start_IT>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000030 	.word	0x20000030

08000b04 <signals_check_timer_interrupt_handler>:

/*
 * ОБработчик прерываний таймера, отвечающего за опрос входных сигналов
 */
void signals_check_timer_interrupt_handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	check_input_signals();
 8000b08:	f7ff ff36 	bl	8000978 <check_input_signals>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <buttons_state_update>:

/*
 * Обновляем состояние кнопок
 */
void buttons_state_update(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	check_button_state(&grid_supply_button);
 8000b14:	4803      	ldr	r0, [pc, #12]	; (8000b24 <buttons_state_update+0x14>)
 8000b16:	f000 f845 	bl	8000ba4 <check_button_state>
	check_button_state(&pushbutton_buckybrake);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <buttons_state_update+0x18>)
 8000b1c:	f000 f842 	bl	8000ba4 <check_button_state>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000007c 	.word	0x2000007c
 8000b28:	200000d4 	.word	0x200000d4

08000b2c <check_input_signal_state>:

/*
 * Считывание и запись состояния входного пина
 */
void check_input_signal_state(InSignalAttributes_TypeDef* signal_to_check)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	GPIO_PinState current_logic_state = HAL_GPIO_ReadPin(signal_to_check->signal_pin.GPIO_port_pointer, signal_to_check->signal_pin.pin_number);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	889b      	ldrh	r3, [r3, #4]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4610      	mov	r0, r2
 8000b40:	f001 f982 	bl	8001e48 <HAL_GPIO_ReadPin>
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]

	switch (current_logic_state)
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <check_input_signal_state+0x30>
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d000      	beq.n	8000b54 <check_input_signal_state+0x28>
	{
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
		break;
	}
	}
}
 8000b52:	e007      	b.n	8000b64 <check_input_signal_state+0x38>
		signal_to_check->signal_logic_level = LOGIC_LEVEL_HIGH;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2201      	movs	r2, #1
 8000b58:	721a      	strb	r2, [r3, #8]
		break;
 8000b5a:	e003      	b.n	8000b64 <check_input_signal_state+0x38>
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	721a      	strb	r2, [r3, #8]
		break;
 8000b62:	bf00      	nop
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <set_output_signal_state>:

/*
 * Выставляем логическое состояние на выходном пине
 */
void set_output_signal_state(GPIO_TypeDef* GPIO_port_pointer, uint16_t pin_number, SignalLogicLevel_EnumTypeDef requied_logic_level)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	707b      	strb	r3, [r7, #1]
	if (requied_logic_level == LOGIC_LEVEL_LOW)
 8000b7c:	787b      	ldrb	r3, [r7, #1]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d106      	bne.n	8000b90 <set_output_signal_state+0x24>
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_RESET);
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f001 f975 	bl	8001e78 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
	}
}
 8000b8e:	e005      	b.n	8000b9c <set_output_signal_state+0x30>
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f001 f96e 	bl	8001e78 <HAL_GPIO_WritePin>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <check_button_state>:

/*
 * Проверяем состояние кнопки
 */
void check_button_state(ButtonAttributes_TypeDef* button_to_check)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if (button_to_check->button_released_default_signal_level == LOGIC_LEVEL_LOW)						// если при отпущенной кнопке логическое состояние пина "0"
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7b1b      	ldrb	r3, [r3, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d125      	bne.n	8000c00 <check_button_state+0x5c>
	{
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7a1b      	ldrb	r3, [r3, #8]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d11a      	bne.n	8000bf2 <check_button_state+0x4e>
		{
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7b5b      	ldrb	r3, [r3, #13]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d006      	beq.n	8000bd2 <check_button_state+0x2e>
			{
				if (button_to_check->button_pressing_duration_counter >= BUTTON_BOUNCE_FILTER_COUNTS)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d902      	bls.n	8000bd2 <check_button_state+0x2e>
				{
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	735a      	strb	r2, [r3, #13]
				}
			}
			if (button_to_check->button_pressing_duration_counter >= BUTTON_LONG_PRESS_COUNTS)			// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	2b31      	cmp	r3, #49	; 0x31
 8000bd8:	d905      	bls.n	8000be6 <check_button_state+0x42>
			{
				button_to_check->button_pressing_duration_counter = BUTTON_LONG_PRESS_COUNTS;			// удерживаем счётчик от дальнейшего увеличения
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2232      	movs	r2, #50	; 0x32
 8000bde:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2202      	movs	r2, #2
 8000be4:	735a      	strb	r2, [r3, #13]
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
		}
	}
}
 8000bf0:	e02b      	b.n	8000c4a <check_button_state+0xa6>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	735a      	strb	r2, [r3, #13]
}
 8000bfe:	e024      	b.n	8000c4a <check_button_state+0xa6>
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7a1b      	ldrb	r3, [r3, #8]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d106      	bne.n	8000c16 <check_button_state+0x72>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	735a      	strb	r2, [r3, #13]
}
 8000c14:	e019      	b.n	8000c4a <check_button_state+0xa6>
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7b5b      	ldrb	r3, [r3, #13]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d006      	beq.n	8000c2c <check_button_state+0x88>
				if (button_to_check->button_pressing_duration_counter >= BUTTON_BOUNCE_FILTER_COUNTS)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d902      	bls.n	8000c2c <check_button_state+0x88>
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	735a      	strb	r2, [r3, #13]
			if (button_to_check->button_pressing_duration_counter >= BUTTON_LONG_PRESS_COUNTS)			// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b31      	cmp	r3, #49	; 0x31
 8000c32:	d905      	bls.n	8000c40 <check_button_state+0x9c>
				button_to_check->button_pressing_duration_counter = BUTTON_LONG_PRESS_COUNTS;			// удерживаем счётчик от дальнейшего увеличения
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2232      	movs	r2, #50	; 0x32
 8000c38:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	735a      	strb	r2, [r3, #13]
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	611a      	str	r2, [r3, #16]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <device_error_check>:
/*
 * Проверка текущего состояния устройства на наличие ошибок
 */

void device_error_check(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	/*
	 * если определён тип растра 120 и 180 одновременно
	 */
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <device_error_check+0x4c>)
 8000c5e:	7a1b      	ldrb	r3, [r3, #8]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d109      	bne.n	8000c78 <device_error_check+0x20>
		(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <device_error_check+0x4c>)
 8000c66:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d105      	bne.n	8000c78 <device_error_check+0x20>
	{
		error_code = GRID_TYPE_ERROR;									// выставляем флаг ошибки типа растра
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <device_error_check+0x50>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_STANDBY;							// переключаем устройство в режим ожидания
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <device_error_check+0x54>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
	}
	if (motor.limit_emergency_counter >= EMERGENCY_STEPS_TO_LIMIT)		// если прошагали критическое количество шагов в сторону концевика
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <device_error_check+0x58>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c80:	4293      	cmp	r3, r2
 8000c82:	dd09      	ble.n	8000c98 <device_error_check+0x40>
	{
		motor.limit_emergency_counter = EMERGENCY_STEPS_TO_LIMIT;		// удерживаем аварийный счётчик шагов от дальнейшего увеличения
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <device_error_check+0x58>)
 8000c86:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c8a:	605a      	str	r2, [r3, #4]
		error_code = LIMIT_SWITCH_ERROR;								// выставляем ошибку концевика (решаем, что концевик неисправен)
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <device_error_check+0x50>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_ERROR;							// переключаем устройство в состояние ошибки
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <device_error_check+0x54>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	701a      	strb	r2, [r3, #0]
	}
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	2000014c 	.word	0x2000014c
 8000ca8:	200001c4 	.word	0x200001c4
 8000cac:	20000090 	.word	0x20000090
 8000cb0:	200001b4 	.word	0x200001b4

08000cb4 <device_error_handler>:

/*
 * Обработчик ошибок
 */
void device_error_handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	switch (error_code)					// если код ошибки
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <device_error_handler+0xc4>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d858      	bhi.n	8000d72 <device_error_handler+0xbe>
 8000cc0:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <device_error_handler+0x14>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000cdd 	.word	0x08000cdd
 8000ccc:	08000ce5 	.word	0x08000ce5
 8000cd0:	08000d65 	.word	0x08000d65
 8000cd4:	08000d2d 	.word	0x08000d2d
 8000cd8:	08000d45 	.word	0x08000d45
	{
	case NO_ERROR:						// если нет ошибки
	{
		device_current_state = DEVICE_STANDBY;	// возвращаемся в состояние ожидания
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <device_error_handler+0xc8>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
		break;
 8000ce2:	e046      	b.n	8000d72 <device_error_handler+0xbe>
	}
	case GRID_TYPE_ERROR:				// если ошибка типа растра
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_120_OUT_PIN
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f7ff ff3e 	bl	8000b6c <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_180_OUT_PIN
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f7ff ff38 	bl	8000b6c <set_output_signal_state>

		/*
		 * если отсутствует растр типа 120 и типа 180
		 */
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <device_error_handler+0xcc>)
 8000cfe:	7a1b      	ldrb	r3, [r3, #8]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d131      	bne.n	8000d68 <device_error_handler+0xb4>
				(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <device_error_handler+0xcc>)
 8000d06:	7d1b      	ldrb	r3, [r3, #20]
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d12d      	bne.n	8000d68 <device_error_handler+0xb4>
		{
			set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_120_OUT_PIN
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2108      	movs	r1, #8
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f7ff ff2a 	bl	8000b6c <set_output_signal_state>
			set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_180_OUT_PIN
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f7ff ff24 	bl	8000b6c <set_output_signal_state>
			error_code = NO_ERROR;																	// выставляем флаг отсутствия ошибки
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <device_error_handler+0xc4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d2a:	e01d      	b.n	8000d68 <device_error_handler+0xb4>
	case STANDBY_MOVEMENT_ERROR:		// если ошибка движения в режиме ожидания
	{
		/*
		 * если была нажата какая-либо кнопка, выходим из состояния ошибки
		 */
		if ((grid_supply_button.button_current_state == BUTTON_SHORT_PRESS) || \
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <device_error_handler+0xd0>)
 8000d2e:	7b5b      	ldrb	r3, [r3, #13]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d003      	beq.n	8000d3c <device_error_handler+0x88>
				(pushbutton_buckybrake.button_current_state == BUTTON_SHORT_PRESS))
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <device_error_handler+0xd4>)
 8000d36:	7b5b      	ldrb	r3, [r3, #13]
		if ((grid_supply_button.button_current_state == BUTTON_SHORT_PRESS) || \
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d117      	bne.n	8000d6c <device_error_handler+0xb8>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <device_error_handler+0xc4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d42:	e013      	b.n	8000d6c <device_error_handler+0xb8>
	case ON_TOMO_BUCKY_CALL_ERROR:		// если ошибка сигнала ON_TOMO
	{
		/*
		 * если сигнал ON_TOMO в "0", и сигнал BUCKY_CALL в "0", и мотор завершил движение
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <device_error_handler+0xd8>)
 8000d46:	7a1b      	ldrb	r3, [r3, #8]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d111      	bne.n	8000d70 <device_error_handler+0xbc>
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <device_error_handler+0xdc>)
 8000d4e:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10d      	bne.n	8000d70 <device_error_handler+0xbc>
			(motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED))
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <device_error_handler+0xe0>)
 8000d56:	7adb      	ldrb	r3, [r3, #11]
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d109      	bne.n	8000d70 <device_error_handler+0xbc>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <device_error_handler+0xc4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d62:	e005      	b.n	8000d70 <device_error_handler+0xbc>
		break;							// остаёмся в этом состоянии до перезагрузки
 8000d64:	bf00      	nop
 8000d66:	e004      	b.n	8000d72 <device_error_handler+0xbe>
		break;
 8000d68:	bf00      	nop
 8000d6a:	e002      	b.n	8000d72 <device_error_handler+0xbe>
		break;
 8000d6c:	bf00      	nop
 8000d6e:	e000      	b.n	8000d72 <device_error_handler+0xbe>
		break;
 8000d70:	bf00      	nop
	}
	}
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200001c4 	.word	0x200001c4
 8000d7c:	20000090 	.word	0x20000090
 8000d80:	2000014c 	.word	0x2000014c
 8000d84:	2000007c 	.word	0x2000007c
 8000d88:	200000d4 	.word	0x200000d4
 8000d8c:	200001c8 	.word	0x200001c8
 8000d90:	20000094 	.word	0x20000094
 8000d94:	200001b4 	.word	0x200001b4

08000d98 <read_input_signals_and_set_device_state>:

/*
 * Изменяем состояние устройства в зависимости от входных сигналов
 */
void read_input_signals_and_set_device_state(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	switch (device_current_state)													// если состояние устройства
 8000d9c:	4b9f      	ldr	r3, [pc, #636]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b07      	cmp	r3, #7
 8000da2:	f200 8139 	bhi.w	8001018 <read_input_signals_and_set_device_state+0x280>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <read_input_signals_and_set_device_state+0x14>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dcd 	.word	0x08000dcd
 8000db0:	08000deb 	.word	0x08000deb
 8000db4:	08000f4b 	.word	0x08000f4b
 8000db8:	08000f27 	.word	0x08000f27
 8000dbc:	08000fe3 	.word	0x08000fe3
 8000dc0:	08000ff3 	.word	0x08000ff3
 8000dc4:	08000fd3 	.word	0x08000fd3
 8000dc8:	08000ddf 	.word	0x08000ddf
	{
	case DEVICE_STARTS:																// если устройство стартует
	{
		device_current_state = DEVICE_RETURN_TO_INITIAL_STATE;						// выставляем состояние устройства: возврат в начальное положение
 8000dcc:	4b93      	ldr	r3, [pc, #588]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000dce:	2206      	movs	r2, #6
 8000dd0:	701a      	strb	r2, [r3, #0]
		motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// назначение движения: возврат в начальное положение
 8000dd2:	4b93      	ldr	r3, [pc, #588]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	729a      	strb	r2, [r3, #10]
		motor_movement_start();
 8000dd8:	f000 f946 	bl	8001068 <motor_movement_start>
		break;
 8000ddc:	e11c      	b.n	8001018 <read_input_signals_and_set_device_state+0x280>
	}
	case DEVICE_ERROR:																// если возникла ошибка
	{
		motor.motor_movement_purpose = MOTOR_PURPOSE_INSTANT_STOP;					// останавливаем мотор
 8000dde:	4b90      	ldr	r3, [pc, #576]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000de0:	2205      	movs	r2, #5
 8000de2:	729a      	strb	r2, [r3, #10]
		device_error_handler();														// вызываем обработчик ошибок
 8000de4:	f7ff ff66 	bl	8000cb4 <device_error_handler>
		break;
 8000de8:	e116      	b.n	8001018 <read_input_signals_and_set_device_state+0x280>
	case DEVICE_STANDBY:															// если устройство в режиме ожидания
	{
		/*
		 * если сигнал ON_TOMO не активен и сигнал ON_TOMO был активен ранее
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000dea:	4b8e      	ldr	r3, [pc, #568]	; (8001024 <read_input_signals_and_set_device_state+0x28c>)
 8000dec:	7a1b      	ldrb	r3, [r3, #8]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d107      	bne.n	8000e02 <read_input_signals_and_set_device_state+0x6a>
			(ON_TOMO_IN_flag != ON_TOMO_WAS_NOT_ENABLED))
 8000df2:	4b8d      	ldr	r3, [pc, #564]	; (8001028 <read_input_signals_and_set_device_state+0x290>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <read_input_signals_and_set_device_state+0x6a>
		{
			ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;								// выставляем флаг: сигнал ON_TOMO не был активен
 8000dfa:	4b8b      	ldr	r3, [pc, #556]	; (8001028 <read_input_signals_and_set_device_state+0x290>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e090      	b.n	8000f24 <read_input_signals_and_set_device_state+0x18c>
		}
		/*
		 * иначе если кнопка подачи растра нажата долго и наличие/отсутствие растра определено
		 */
		else if (grid_supply_button.button_current_state == BUTTON_LONG_PRESS)
 8000e02:	4b8a      	ldr	r3, [pc, #552]	; (800102c <read_input_signals_and_set_device_state+0x294>)
 8000e04:	7b5b      	ldrb	r3, [r3, #13]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d124      	bne.n	8000e54 <read_input_signals_and_set_device_state+0xbc>
		{
			device_current_state = DEVICE_GRID_SUPPLY;								// выставляем состояние устройства: подача растра
 8000e0a:	4b84      	ldr	r3, [pc, #528]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	701a      	strb	r2, [r3, #0]

			/*
			 * если растр был извлечён и кнопка подачи растра нажата долго
			 */
			if (motor.steps_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEPS)
 8000e10:	4b83      	ldr	r3, [pc, #524]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e18:	db04      	blt.n	8000e24 <read_input_signals_and_set_device_state+0x8c>
			{
				motor.motor_movement_purpose = MOTOR_PURPOSE_GRID_INSERTION;						// назначение движения: вставить растр
 8000e1a:	4b81      	ldr	r3, [pc, #516]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	729a      	strb	r2, [r3, #10]
				motor_movement_start();																// начинаем движение
 8000e20:	f000 f922 	bl	8001068 <motor_movement_start>
			}
			/*
			 * если растр был вставлен и кнопка подачи растра нажата долго
			 */
			if (motor.steps_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEPS)
 8000e24:	4b7e      	ldr	r3, [pc, #504]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e2c:	f280 80e9 	bge.w	8001002 <read_input_signals_and_set_device_state+0x26a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8000e30:	2200      	movs	r2, #0
 8000e32:	2108      	movs	r1, #8
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f7ff fe98 	bl	8000b6c <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2110      	movs	r1, #16
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f7ff fe92 	bl	8000b6c <set_output_signal_state>
				motor.motor_movement_purpose = MOTOR_PURPOSE_GRID_EXTRACTION;						// назначение движения: извлечь растр
 8000e48:	4b75      	ldr	r3, [pc, #468]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	729a      	strb	r2, [r3, #10]
				motor_movement_start();																// начинаем движение
 8000e4e:	f000 f90b 	bl	8001068 <motor_movement_start>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника

			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
		}
		break;
 8000e52:	e0d6      	b.n	8001002 <read_input_signals_and_set_device_state+0x26a>
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e54:	4b76      	ldr	r3, [pc, #472]	; (8001030 <read_input_signals_and_set_device_state+0x298>)
 8000e56:	7a1b      	ldrb	r3, [r3, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d115      	bne.n	8000e88 <read_input_signals_and_set_device_state+0xf0>
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000e5c:	4b71      	ldr	r3, [pc, #452]	; (8001024 <read_input_signals_and_set_device_state+0x28c>)
 8000e5e:	7a1b      	ldrb	r3, [r3, #8]
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d111      	bne.n	8000e88 <read_input_signals_and_set_device_state+0xf0>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED) && \
 8000e64:	4b70      	ldr	r3, [pc, #448]	; (8001028 <read_input_signals_and_set_device_state+0x290>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10d      	bne.n	8000e88 <read_input_signals_and_set_device_state+0xf0>
				(motor.steps_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEPS))
 8000e6c:	4b6c      	ldr	r3, [pc, #432]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED) && \
 8000e70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e74:	da08      	bge.n	8000e88 <read_input_signals_and_set_device_state+0xf0>
			device_current_state = DEVICE_SCANING_TOMO_OFF;											// выставляем состояние устройства: экспозиция без ON_TOMO
 8000e76:	4b69      	ldr	r3, [pc, #420]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_OFF;						// назначение движения: экспозиция без ON_TOMO
 8000e7c:	4b68      	ldr	r3, [pc, #416]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000e7e:	2203      	movs	r2, #3
 8000e80:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 8000e82:	f000 f8f1 	bl	8001068 <motor_movement_start>
 8000e86:	e04d      	b.n	8000f24 <read_input_signals_and_set_device_state+0x18c>
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e88:	4b66      	ldr	r3, [pc, #408]	; (8001024 <read_input_signals_and_set_device_state+0x28c>)
 8000e8a:	7a1b      	ldrb	r3, [r3, #8]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d107      	bne.n	8000ea0 <read_input_signals_and_set_device_state+0x108>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED))
 8000e90:	4b65      	ldr	r3, [pc, #404]	; (8001028 <read_input_signals_and_set_device_state+0x290>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <read_input_signals_and_set_device_state+0x108>
			ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED;													// выставляем флаг: сигнал ON_TOMO активен
 8000e98:	4b63      	ldr	r3, [pc, #396]	; (8001028 <read_input_signals_and_set_device_state+0x290>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e041      	b.n	8000f24 <read_input_signals_and_set_device_state+0x18c>
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000ea0:	4b60      	ldr	r3, [pc, #384]	; (8001024 <read_input_signals_and_set_device_state+0x28c>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d115      	bne.n	8000ed4 <read_input_signals_and_set_device_state+0x13c>
				(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000ea8:	4b61      	ldr	r3, [pc, #388]	; (8001030 <read_input_signals_and_set_device_state+0x298>)
 8000eaa:	7a1b      	ldrb	r3, [r3, #8]
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d111      	bne.n	8000ed4 <read_input_signals_and_set_device_state+0x13c>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8000eb0:	4b5d      	ldr	r3, [pc, #372]	; (8001028 <read_input_signals_and_set_device_state+0x290>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
				(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d10d      	bne.n	8000ed4 <read_input_signals_and_set_device_state+0x13c>
				(motor.steps_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEPS))
 8000eb8:	4b59      	ldr	r3, [pc, #356]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000eba:	681b      	ldr	r3, [r3, #0]
				(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8000ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ec0:	da08      	bge.n	8000ed4 <read_input_signals_and_set_device_state+0x13c>
			device_current_state = DEVICE_SCANING_TOMO_ON;											// выставляем состояние устройства: экспозиция с ON_TOMO
 8000ec2:	4b56      	ldr	r3, [pc, #344]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_ON;						// назначние движения: экспозиция с ON_TOMO
 8000ec8:	4b55      	ldr	r3, [pc, #340]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 8000ece:	f000 f8cb 	bl	8001068 <motor_movement_start>
 8000ed2:	e027      	b.n	8000f24 <read_input_signals_and_set_device_state+0x18c>
		else if ((!(limit_switch_return_state())) && \
 8000ed4:	f000 fac0 	bl	8001458 <limit_switch_return_state>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f083 0301 	eor.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00d      	beq.n	8000f00 <read_input_signals_and_set_device_state+0x168>
				(!(motor.steps_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEPS)))
 8000ee4:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
		else if ((!(limit_switch_return_state())) && \
 8000ee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eec:	da08      	bge.n	8000f00 <read_input_signals_and_set_device_state+0x168>
			device_current_state = DEVICE_RETURN_TO_INITIAL_STATE;									// выставляем состояние устройства: возврат в начальное положение
 8000eee:	4b4b      	ldr	r3, [pc, #300]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000ef0:	2206      	movs	r2, #6
 8000ef2:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;						// назначение движения: возврат в начальное положение
 8000ef4:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 8000efa:	f000 f8b5 	bl	8001068 <motor_movement_start>
 8000efe:	e011      	b.n	8000f24 <read_input_signals_and_set_device_state+0x18c>
		else if (pushbutton_buckybrake.button_current_state == BUTTON_SHORT_PRESS)
 8000f00:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <read_input_signals_and_set_device_state+0x29c>)
 8000f02:	7b5b      	ldrb	r3, [r3, #13]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d17c      	bne.n	8001002 <read_input_signals_and_set_device_state+0x26a>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника
 8000f08:	4b44      	ldr	r3, [pc, #272]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	701a      	strb	r2, [r3, #0]
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2101      	movs	r1, #1
 8000f12:	4849      	ldr	r0, [pc, #292]	; (8001038 <read_input_signals_and_set_device_state+0x2a0>)
 8000f14:	f7ff fe2a 	bl	8000b6c <set_output_signal_state>
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	4846      	ldr	r0, [pc, #280]	; (8001038 <read_input_signals_and_set_device_state+0x2a0>)
 8000f1e:	f7ff fe25 	bl	8000b6c <set_output_signal_state>
		break;
 8000f22:	e06e      	b.n	8001002 <read_input_signals_and_set_device_state+0x26a>
 8000f24:	e06d      	b.n	8001002 <read_input_signals_and_set_device_state+0x26a>
	case DEVICE_BUCKYBRAKE:																			// если устройство в состоянии "отпустить тормоз кассетоприёмника"
	{
		/*
		 *	если кнопка тормоза кассетоприёмника отпущена
		 */
		if (pushbutton_buckybrake.button_current_state == BUTTON_RELEASED)
 8000f26:	4b43      	ldr	r3, [pc, #268]	; (8001034 <read_input_signals_and_set_device_state+0x29c>)
 8000f28:	7b5b      	ldrb	r3, [r3, #13]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d16b      	bne.n	8001006 <read_input_signals_and_set_device_state+0x26e>
		{
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_LOW);	// выставляем в "0" выходной сигнал LASER_CENTERING
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2101      	movs	r1, #1
 8000f32:	4841      	ldr	r0, [pc, #260]	; (8001038 <read_input_signals_and_set_device_state+0x2a0>)
 8000f34:	f7ff fe1a 	bl	8000b6c <set_output_signal_state>
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал BUCKYBRAKE
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	483e      	ldr	r0, [pc, #248]	; (8001038 <read_input_signals_and_set_device_state+0x2a0>)
 8000f3e:	f7ff fe15 	bl	8000b6c <set_output_signal_state>

			device_current_state = DEVICE_STANDBY;													// выставляем состояние устройства: режим ожидания
 8000f42:	4b36      	ldr	r3, [pc, #216]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f48:	e05d      	b.n	8001006 <read_input_signals_and_set_device_state+0x26e>
	case DEVICE_GRID_SUPPLY:																		// если устройство в состоянии "подача растра"
	{
		/*
		 * если назначение движения "вставить растр" и статус движения "движение завершено"
		 */
		if ((motor.motor_movement_purpose == MOTOR_PURPOSE_GRID_INSERTION) && \
 8000f4a:	4b35      	ldr	r3, [pc, #212]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000f4c:	7a9b      	ldrb	r3, [r3, #10]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d137      	bne.n	8000fc2 <read_input_signals_and_set_device_state+0x22a>
			(motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED))
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000f54:	7adb      	ldrb	r3, [r3, #11]
		if ((motor.motor_movement_purpose == MOTOR_PURPOSE_GRID_INSERTION) && \
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d133      	bne.n	8000fc2 <read_input_signals_and_set_device_state+0x22a>
		{
			/*
			 * если растр не представлен
			 */
			if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)&& \
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <read_input_signals_and_set_device_state+0x2a4>)
 8000f5c:	7a1b      	ldrb	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10f      	bne.n	8000f82 <read_input_signals_and_set_device_state+0x1ea>
					(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <read_input_signals_and_set_device_state+0x2a4>)
 8000f64:	7d1b      	ldrb	r3, [r3, #20]
			if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)&& \
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10b      	bne.n	8000f82 <read_input_signals_and_set_device_state+0x1ea>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f7ff fdfb 	bl	8000b6c <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8000f76:	2200      	movs	r2, #0
 8000f78:	2110      	movs	r1, #16
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f7ff fdf5 	bl	8000b6c <set_output_signal_state>
			}
			/*
			* если тип растра 120
			*/
			if (grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <read_input_signals_and_set_device_state+0x2a4>)
 8000f84:	7a1b      	ldrb	r3, [r3, #8]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10b      	bne.n	8000fa2 <read_input_signals_and_set_device_state+0x20a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_120
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f7ff fdeb 	bl	8000b6c <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8000f96:	2200      	movs	r2, #0
 8000f98:	2110      	movs	r1, #16
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f7ff fde5 	bl	8000b6c <set_output_signal_state>
			}
			/*
			* если тип растра 180
			*/
			if (grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <read_input_signals_and_set_device_state+0x2a4>)
 8000fa4:	7d1b      	ldrb	r3, [r3, #20]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10b      	bne.n	8000fc2 <read_input_signals_and_set_device_state+0x22a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8000faa:	2200      	movs	r2, #0
 8000fac:	2108      	movs	r1, #8
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f7ff fddb 	bl	8000b6c <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_180
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2110      	movs	r1, #16
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f7ff fdd5 	bl	8000b6c <set_output_signal_state>
			}
		}

		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000fc4:	7adb      	ldrb	r3, [r3, #11]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d11f      	bne.n	800100a <read_input_signals_and_set_device_state+0x272>
		{

			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fd0:	e01b      	b.n	800100a <read_input_signals_and_set_device_state+0x272>
	}
	case DEVICE_RETURN_TO_INITIAL_STATE:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000fd4:	7adb      	ldrb	r3, [r3, #11]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d119      	bne.n	800100e <read_input_signals_and_set_device_state+0x276>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fe0:	e015      	b.n	800100e <read_input_signals_and_set_device_state+0x276>
	}
	case DEVICE_SCANING_TOMO_OFF:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000fe4:	7adb      	ldrb	r3, [r3, #11]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d113      	bne.n	8001012 <read_input_signals_and_set_device_state+0x27a>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ff0:	e00f      	b.n	8001012 <read_input_signals_and_set_device_state+0x27a>
	}
	case DEVICE_SCANING_TOMO_ON:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED)	// если статус мотора "движение завершено"
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <read_input_signals_and_set_device_state+0x288>)
 8000ff4:	7adb      	ldrb	r3, [r3, #11]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10d      	bne.n	8001016 <read_input_signals_and_set_device_state+0x27e>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <read_input_signals_and_set_device_state+0x284>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001000:	e009      	b.n	8001016 <read_input_signals_and_set_device_state+0x27e>
		break;
 8001002:	bf00      	nop
 8001004:	e008      	b.n	8001018 <read_input_signals_and_set_device_state+0x280>
		break;
 8001006:	bf00      	nop
 8001008:	e006      	b.n	8001018 <read_input_signals_and_set_device_state+0x280>
		break;
 800100a:	bf00      	nop
 800100c:	e004      	b.n	8001018 <read_input_signals_and_set_device_state+0x280>
		break;
 800100e:	bf00      	nop
 8001010:	e002      	b.n	8001018 <read_input_signals_and_set_device_state+0x280>
		break;
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <read_input_signals_and_set_device_state+0x280>
		break;
 8001016:	bf00      	nop
	}
	}
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000090 	.word	0x20000090
 8001020:	200001b4 	.word	0x200001b4
 8001024:	200001c8 	.word	0x200001c8
 8001028:	200000d0 	.word	0x200000d0
 800102c:	2000007c 	.word	0x2000007c
 8001030:	20000094 	.word	0x20000094
 8001034:	200000d4 	.word	0x200000d4
 8001038:	48000400 	.word	0x48000400
 800103c:	2000014c 	.word	0x2000014c

08001040 <motor_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_start(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(MOTOR_TIMER_POINTER);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <motor_timer_interrupts_start+0x10>)
 8001046:	f001 ff27 	bl	8002e98 <HAL_TIM_Base_Start_IT>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000168 	.word	0x20000168

08001054 <motor_timer_interrupts_stop>:

/*
 * Останавливаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_stop(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(MOTOR_TIMER_POINTER);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <motor_timer_interrupts_stop+0x10>)
 800105a:	f001 ff87 	bl	8002f6c <HAL_TIM_Base_Stop_IT>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000168 	.word	0x20000168

08001068 <motor_movement_start>:

/*
 * Начинаем движение мотора
 */
void motor_movement_start(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	if (device_current_state == DEVICE_STANDBY)							// если устройство в режиме ожидания
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <motor_movement_start+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d102      	bne.n	800107a <motor_movement_start+0x12>
	{
		error_code = STANDBY_MOVEMENT_ERROR;							// выставляем ошибку (нельзя двигаться в режиме ожидания)
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <motor_movement_start+0x24>)
 8001076:	2203      	movs	r2, #3
 8001078:	701a      	strb	r2, [r3, #0]
	}
	motor.motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;			// выставляем флаг, что мотор находится в движении
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <motor_movement_start+0x28>)
 800107c:	2200      	movs	r2, #0
 800107e:	72da      	strb	r2, [r3, #11]
	motor_timer_interrupts_start();										// запускаем прерывания, по которым мотор будет шагать
 8001080:	f7ff ffde 	bl	8001040 <motor_timer_interrupts_start>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000090 	.word	0x20000090
 800108c:	200001c4 	.word	0x200001c4
 8001090:	200001b4 	.word	0x200001b4

08001094 <motor_movement_complete>:

/*
 * Прекращаем движение мотора
 */
void motor_movement_complete(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	motor_timer_interrupts_stop();										// останавливаем прерывания, по которым шагает мотор
 8001098:	f7ff ffdc 	bl	8001054 <motor_timer_interrupts_stop>
	motor.motor_movement_status = MOTOR_MOVEMENT_COMPLETED;				// выставляем флаг, что движение завершено
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <motor_movement_complete+0x20>)
 800109e:	2201      	movs	r2, #1
 80010a0:	72da      	strb	r2, [r3, #11]
	ticks_before_next_step_counter = 0;
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <motor_movement_complete+0x24>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
	ticks_since_start_movement_counter = 0;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <motor_movement_complete+0x28>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001b4 	.word	0x200001b4
 80010b8:	20000164 	.word	0x20000164
 80010bc:	20000028 	.word	0x20000028

080010c0 <motor_make_step_to_direction>:

/*
 * Делаем шаг в заданном направлении
 */
void motor_make_step_to_direction(MotorMoveDirection_EnumTypeDef move_direction)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	motor.motor_move_direction = move_direction;						// выставляем направление шага
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <motor_make_step_to_direction+0x20>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	7213      	strb	r3, [r2, #8]
	motor_direction_pin_set();											// выставляем нужное состояние на пине направления
 80010d0:	f000 f950 	bl	8001374 <motor_direction_pin_set>
	check_limit_switch_and_make_step();									// проверяем состояние концевика и совершаем шаг
 80010d4:	f000 f96c 	bl	80013b0 <check_limit_switch_and_make_step>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200001b4 	.word	0x200001b4

080010e4 <bucky_ready_response_set>:

/*
 * Начинаем отсчёт шагов до выставления сигнала BUCKY_READY
 */
void bucky_ready_response_set(SignalLogicLevel_EnumTypeDef logic_level_to_set)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	switch (logic_level_to_set)											// если требуемый логический уровень сигнала BUCKY_READY
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d010      	beq.n	8001116 <bucky_ready_response_set+0x32>
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d000      	beq.n	80010fa <bucky_ready_response_set+0x16>
	{
		bucky_ready_delay_counter = 0;									// обнуляем счётчик шагов
		break;
	}
	}
}
 80010f8:	e012      	b.n	8001120 <bucky_ready_response_set+0x3c>
		bucky_ready_delay_counter++;									// инкрементируем счётчик шагов
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <bucky_ready_response_set+0x48>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <bucky_ready_response_set+0x48>)
 8001104:	701a      	strb	r2, [r3, #0]
		if (bucky_ready_delay_counter >= BUCKY_READY_DELAY_STEPS)		// если досчитали до нужного количества шагов
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <bucky_ready_response_set+0x48>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d907      	bls.n	800111e <bucky_ready_response_set+0x3a>
			bucky_ready_delay_counter = BUCKY_READY_DELAY_STEPS;		// удерживаем счётчик от дальнейшего увеличения
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <bucky_ready_response_set+0x48>)
 8001110:	2203      	movs	r2, #3
 8001112:	701a      	strb	r2, [r3, #0]
		break;
 8001114:	e003      	b.n	800111e <bucky_ready_response_set+0x3a>
		bucky_ready_delay_counter = 0;									// обнуляем счётчик шагов
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <bucky_ready_response_set+0x48>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
		break;
 800111c:	e000      	b.n	8001120 <bucky_ready_response_set+0x3c>
		break;
 800111e:	bf00      	nop
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	2000002c 	.word	0x2000002c

08001130 <bucky_ready_response_check>:

/*
 * Проверяем счётчик шагов до выставления сигнала BUCKY_READY (по таймеру)
 */
void bucky_ready_response_check(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	if (bucky_ready_delay_counter == BUCKY_READY_DELAY_STEPS)									// если прошли достаточное количество шагов
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <bucky_ready_response_check+0x2c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d106      	bne.n	800114a <bucky_ready_response_check+0x1a>
	{
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем сигнал BUCKY_READY в "1"
 800113c:	2201      	movs	r2, #1
 800113e:	2120      	movs	r1, #32
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f7ff fd12 	bl	8000b6c <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);	// иначе выставляем сигнал BUCKY_READY в "0"
	}
}
 8001148:	e005      	b.n	8001156 <bucky_ready_response_check+0x26>
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);	// иначе выставляем сигнал BUCKY_READY в "0"
 800114a:	2200      	movs	r2, #0
 800114c:	2120      	movs	r1, #32
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f7ff fd0b 	bl	8000b6c <set_output_signal_state>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000002c 	.word	0x2000002c

08001160 <calculate_ticks_per_step>:

void calculate_ticks_per_step(void)
{
 8001160:	b490      	push	{r4, r7}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint64_t steps_per_sec = ticks_since_start_movement_counter*ticks_since_start_movement_counter + MIN_STEPS_PER_SEC_ALL_MODES;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <calculate_ticks_per_step+0x30>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <calculate_ticks_per_step+0x30>)
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	fb02 f303 	mul.w	r3, r2, r3
 8001172:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001176:	f04f 0400 	mov.w	r4, #0
 800117a:	e9c7 3400 	strd	r3, r4, [r7]
	ticks_before_next_step_counter = 0;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <calculate_ticks_per_step+0x34>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bc90      	pop	{r4, r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000028 	.word	0x20000028
 8001194:	20000164 	.word	0x20000164

08001198 <motor_make_one_step>:

void motor_make_one_step(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	bucky_ready_response_check();														// проверяем, надо ли выставить сигнал BUCKY_READY в "1"
 800119c:	f7ff ffc8 	bl	8001130 <bucky_ready_response_check>
	switch (motor.motor_movement_purpose)												// если назначение движения мотора
 80011a0:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <motor_make_one_step+0x144>)
 80011a2:	7a9b      	ldrb	r3, [r3, #10]
 80011a4:	2b05      	cmp	r3, #5
 80011a6:	f200 8095 	bhi.w	80012d4 <motor_make_one_step+0x13c>
 80011aa:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <motor_make_one_step+0x18>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	080012ad 	.word	0x080012ad
 80011b4:	080011cf 	.word	0x080011cf
 80011b8:	080011f5 	.word	0x080011f5
 80011bc:	08001215 	.word	0x08001215
 80011c0:	08001237 	.word	0x08001237
 80011c4:	080011c9 	.word	0x080011c9
	{
	case MOTOR_PURPOSE_INSTANT_STOP:													// если назначение движения мотора - мгновенная остановка
	{
		motor_movement_complete();														// завершаем движение
 80011c8:	f7ff ff64 	bl	8001094 <motor_movement_complete>
		break;
 80011cc:	e082      	b.n	80012d4 <motor_make_one_step+0x13c>
	}
	case MOTOR_PURPOSE_GRID_INSERTION:													// если назначение движения мотора - вставить растр
	{
		if (!(limit_switch_return_state()))												// если концевик не активен
 80011ce:	f000 f943 	bl	8001458 <limit_switch_return_state>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f083 0301 	eor.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <motor_make_one_step+0x4e>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);							// двигаемся к начальной точке
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ff6e 	bl	80010c0 <motor_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 80011e4:	e071      	b.n	80012ca <motor_make_one_step+0x132>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 80011e6:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <motor_make_one_step+0x148>)
 80011e8:	7b5b      	ldrb	r3, [r3, #13]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d16d      	bne.n	80012ca <motor_make_one_step+0x132>
				motor_movement_complete();												// завершаем движение
 80011ee:	f7ff ff51 	bl	8001094 <motor_movement_complete>
		break;
 80011f2:	e06a      	b.n	80012ca <motor_make_one_step+0x132>
	}
	case MOTOR_PURPOSE_GRID_EXTRACTION:													// если назначение движения мотора - извлечь растр
	{
		if (motor.steps_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEPS)		// если мы не дошли до крайнего положения
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <motor_make_one_step+0x144>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011fc:	da03      	bge.n	8001206 <motor_make_one_step+0x6e>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_END);							// движемся от начальной точки (наружу)
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff ff5e 	bl	80010c0 <motor_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 8001204:	e063      	b.n	80012ce <motor_make_one_step+0x136>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <motor_make_one_step+0x148>)
 8001208:	7b5b      	ldrb	r3, [r3, #13]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d15f      	bne.n	80012ce <motor_make_one_step+0x136>
				motor_movement_complete();												// завершаем движение
 800120e:	f7ff ff41 	bl	8001094 <motor_movement_complete>
		break;
 8001212:	e05c      	b.n	80012ce <motor_make_one_step+0x136>
	}
	case MOTOR_PURPOSE_EXPOSITION_TOMO_OFF:												// если назначение движения - экспозиция без сигнала ON_TOMO
	{
		if (BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)				// если сигнал BUCKY_CALL в "1"
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <motor_make_one_step+0x14c>)
 8001216:	7a1b      	ldrb	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <motor_make_one_step+0x90>
		{
			cyclic_movement_step();														// делаем шаг
 800121c:	f000 f87a 	bl	8001314 <cyclic_movement_step>
			bucky_ready_response_set(LOGIC_LEVEL_HIGH);									// запускаем счётчик шагов до выставления сигнала BUCKY_READY
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff ff5f 	bl	80010e4 <bucky_ready_response_set>
		else
		{
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// иначе выключаем сигнал BUCKY_READY
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
		}
		break;
 8001226:	e055      	b.n	80012d4 <motor_make_one_step+0x13c>
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// иначе выключаем сигнал BUCKY_READY
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff ff5b 	bl	80010e4 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <motor_make_one_step+0x144>)
 8001230:	2200      	movs	r2, #0
 8001232:	729a      	strb	r2, [r3, #10]
		break;
 8001234:	e04e      	b.n	80012d4 <motor_make_one_step+0x13c>
	case MOTOR_PURPOSE_EXPOSITION_TOMO_ON:												// если назначение движения - экспозиция с сигналом ON_TOMO
	{
		/*
		 * если сигнал ON_OMO был включён, и сигнал BUCKY_CALL включён
		 */
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <motor_make_one_step+0x150>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10f      	bne.n	800125e <motor_make_one_step+0xc6>
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <motor_make_one_step+0x14c>)
 8001240:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10b      	bne.n	800125e <motor_make_one_step+0xc6>
		{
			if (ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)				// если сигнал ON_TOMO в "0"
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <motor_make_one_step+0x154>)
 8001248:	7a1b      	ldrb	r3, [r3, #8]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <motor_make_one_step+0xc2>
			{
				ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED_AND_DISABLED;						// выставляем флаг, что ON_TOMO был в "1", а затем в "0"
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <motor_make_one_step+0x150>)
 8001250:	2202      	movs	r2, #2
 8001252:	701a      	strb	r2, [r3, #0]
				bucky_ready_response_set(LOGIC_LEVEL_HIGH);								// запускаем счётчик шагов до выставления сигнала BUCKY_READY
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff ff45 	bl	80010e4 <bucky_ready_response_set>
			}
			cyclic_movement_step();														// делаем шаг
 800125a:	f000 f85b 	bl	8001314 <cyclic_movement_step>
		}
		/*
		 * если сигнал ON_TOMO был включён и выключен, и сигнал ON_TOMO включён
		 */
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <motor_make_one_step+0x150>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d109      	bne.n	800127a <motor_make_one_step+0xe2>
			(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <motor_make_one_step+0x154>)
 8001268:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 800126a:	2b00      	cmp	r3, #0
 800126c:	d105      	bne.n	800127a <motor_make_one_step+0xe2>
		{
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// выключаем сигнал BUCKY_READY
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff ff38 	bl	80010e4 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <motor_make_one_step+0x144>)
 8001276:	2200      	movs	r2, #0
 8001278:	729a      	strb	r2, [r3, #10]
		}
		/*
		 * если сигнал BUCKY_CALL выключен, и сигнал ON_TOMO был включён и выключен, и сигнал ON_TOMO сейчас выключен
		 */
		if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <motor_make_one_step+0x14c>)
 800127c:	7a1b      	ldrb	r3, [r3, #8]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d127      	bne.n	80012d2 <motor_make_one_step+0x13a>
			(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <motor_make_one_step+0x150>)
 8001284:	781b      	ldrb	r3, [r3, #0]
		if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001286:	2b02      	cmp	r3, #2
 8001288:	d123      	bne.n	80012d2 <motor_make_one_step+0x13a>
			(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <motor_make_one_step+0x154>)
 800128c:	7a1b      	ldrb	r3, [r3, #8]
			(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 800128e:	2b01      	cmp	r3, #1
 8001290:	d11f      	bne.n	80012d2 <motor_make_one_step+0x13a>
		{
			device_current_state = DEVICE_ERROR;										// переключаем устройство в состояние ошибки
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <motor_make_one_step+0x158>)
 8001294:	2207      	movs	r2, #7
 8001296:	701a      	strb	r2, [r3, #0]
			error_code = ON_TOMO_BUCKY_CALL_ERROR;										// выставляем ошибку (BUCKY_CALL выключился прежде, чем ON_TOMO включился повторно)
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <motor_make_one_step+0x15c>)
 800129a:	2204      	movs	r2, #4
 800129c:	701a      	strb	r2, [r3, #0]
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// выключаем сигнал BUCKY_READY
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff20 	bl	80010e4 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <motor_make_one_step+0x144>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	729a      	strb	r2, [r3, #10]
		}
		break;
 80012aa:	e012      	b.n	80012d2 <motor_make_one_step+0x13a>
	}
	case MOTOR_PURPOSE_TAKE_INITIAL_POSITION:											// если назначение движения - вернуться в начальную позицию
	{
		if(!(limit_switch_return_state()))												// если концевик не активен
 80012ac:	f000 f8d4 	bl	8001458 <limit_switch_return_state>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <motor_make_one_step+0x12c>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);							// делаем шаг в направлении начального положения
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff feff 	bl	80010c0 <motor_make_step_to_direction>
		}
		else
		{
			motor_movement_complete();													// иначе завершаем движение
		}
		break;
 80012c2:	e007      	b.n	80012d4 <motor_make_one_step+0x13c>
			motor_movement_complete();													// иначе завершаем движение
 80012c4:	f7ff fee6 	bl	8001094 <motor_movement_complete>
		break;
 80012c8:	e004      	b.n	80012d4 <motor_make_one_step+0x13c>
		break;
 80012ca:	bf00      	nop
 80012cc:	e002      	b.n	80012d4 <motor_make_one_step+0x13c>
		break;
 80012ce:	bf00      	nop
 80012d0:	e000      	b.n	80012d4 <motor_make_one_step+0x13c>
		break;
 80012d2:	bf00      	nop
	}
	}
	calculate_ticks_per_step();
 80012d4:	f7ff ff44 	bl	8001160 <calculate_ticks_per_step>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200001b4 	.word	0x200001b4
 80012e0:	2000007c 	.word	0x2000007c
 80012e4:	20000094 	.word	0x20000094
 80012e8:	200000d0 	.word	0x200000d0
 80012ec:	200001c8 	.word	0x200001c8
 80012f0:	20000090 	.word	0x20000090
 80012f4:	200001c4 	.word	0x200001c4

080012f8 <motor_timer_interrupt_handler>:

/*
 * Обработчик прерываний таймера, отвечающего за шаги мотора
 */
void motor_timer_interrupt_handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	ticks_since_start_movement_counter++;
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <motor_timer_interrupt_handler+0x18>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a03      	ldr	r2, [pc, #12]	; (8001310 <motor_timer_interrupt_handler+0x18>)
 8001304:	6013      	str	r3, [r2, #0]
	motor_make_one_step();
 8001306:	f7ff ff47 	bl	8001198 <motor_make_one_step>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000028 	.word	0x20000028

08001314 <cyclic_movement_step>:

/*
 * Циклическое движение мотора в режиме экспозиции
 */
void cyclic_movement_step(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	if (motor.steps_distance_from_limit_switch <= ON_TOMO_START_POSITITON_STEPS)					// если мы в крайней точке точке, ближайшей к начальному положению
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <cyclic_movement_step+0x5c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2bc8      	cmp	r3, #200	; 0xc8
 800131e:	dc05      	bgt.n	800132c <cyclic_movement_step+0x18>
	{
		motor.exposition_movement_direction = EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION;			// выставляем флаг движения от начального положения
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <cyclic_movement_step+0x5c>)
 8001322:	2200      	movs	r2, #0
 8001324:	731a      	strb	r2, [r3, #12]
		motor_make_step_to_direction(MOVE_TO_COORD_END);											// делаем шаг в сторону от начального положения
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff feca 	bl	80010c0 <motor_make_step_to_direction>
	}
	/*
	 * если мы находимся в промежутке между крайними положениями растра (ближнее и дальнее)
	 */
	if ((motor.steps_distance_from_limit_switch > ON_TOMO_START_POSITITON_STEPS) && \
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <cyclic_movement_step+0x5c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2bc8      	cmp	r3, #200	; 0xc8
 8001332:	dd0f      	ble.n	8001354 <cyclic_movement_step+0x40>
			(motor.steps_distance_from_limit_switch < ON_TOMO_END_POSITITON_STEPS))
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <cyclic_movement_step+0x5c>)
 8001336:	681b      	ldr	r3, [r3, #0]
	if ((motor.steps_distance_from_limit_switch > ON_TOMO_START_POSITITON_STEPS) && \
 8001338:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800133c:	da0a      	bge.n	8001354 <cyclic_movement_step+0x40>
	{
		if (motor.exposition_movement_direction == EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION)		// если выставлен флаг движения от начального положения
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <cyclic_movement_step+0x5c>)
 8001340:	7b1b      	ldrb	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d103      	bne.n	800134e <cyclic_movement_step+0x3a>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_END);										// делаем шаг от начального положения
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff feba 	bl	80010c0 <motor_make_step_to_direction>
 800134c:	e002      	b.n	8001354 <cyclic_movement_step+0x40>
		}
		else
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);										// иначе делаем шаг в сторону начального положения
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff feb6 	bl	80010c0 <motor_make_step_to_direction>
		}
	}
	if (motor.steps_distance_from_limit_switch >= ON_TOMO_END_POSITITON_STEPS)						// если мы в крайней точке, дальней от начального положения
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <cyclic_movement_step+0x5c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800135c:	db05      	blt.n	800136a <cyclic_movement_step+0x56>
	{
		motor.exposition_movement_direction = ON_TOMO_MOVEMENT_TO_INITIAL_POSITION;					// выставляем флаг движения к начальному положению
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <cyclic_movement_step+0x5c>)
 8001360:	2201      	movs	r2, #1
 8001362:	731a      	strb	r2, [r3, #12]
		motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);											// делаем шаг в сторону начального положения
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff feab 	bl	80010c0 <motor_make_step_to_direction>
	}
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200001b4 	.word	0x200001b4

08001374 <motor_direction_pin_set>:

/*
 * выставляем пин направления мотора
 */
void motor_direction_pin_set()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	switch (motor.motor_move_direction)																// если направление движения
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <motor_direction_pin_set+0x34>)
 800137a:	7a1b      	ldrb	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <motor_direction_pin_set+0x12>
 8001380:	2b01      	cmp	r3, #1
 8001382:	d007      	beq.n	8001394 <motor_direction_pin_set+0x20>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_RESET);				// иначе выставляем "0" на пине направления
		}
		break;
	}
	}
}
 8001384:	e00d      	b.n	80013a2 <motor_direction_pin_set+0x2e>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_RESET);				// выставляем "0" на пине направления
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <motor_direction_pin_set+0x38>)
 800138e:	f000 fd73 	bl	8001e78 <HAL_GPIO_WritePin>
		break;
 8001392:	e006      	b.n	80013a2 <motor_direction_pin_set+0x2e>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_SET);					// выставляем "1" на пине направления
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <motor_direction_pin_set+0x38>)
 800139c:	f000 fd6c 	bl	8001e78 <HAL_GPIO_WritePin>
		break;
 80013a0:	bf00      	nop
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001b4 	.word	0x200001b4
 80013ac:	48000400 	.word	0x48000400

080013b0 <check_limit_switch_and_make_step>:

/*
 * проверяем состояние концевика и совершаем шаг
 */
void check_limit_switch_and_make_step()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	/*
	 * если направление движения к начальному положению, и концевик не активен, и не пройдено аварийное количество шагов к начальному положению
	 */
	if ((motor.motor_move_direction == MOVE_TO_COORD_ORIGIN) && \
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 80013b6:	7a1b      	ldrb	r3, [r3, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d119      	bne.n	80013f0 <check_limit_switch_and_make_step+0x40>
		(!(limit_switch_return_state())) && \
 80013bc:	f000 f84c 	bl	8001458 <limit_switch_return_state>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f083 0301 	eor.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
	if ((motor.motor_move_direction == MOVE_TO_COORD_ORIGIN) && \
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d011      	beq.n	80013f0 <check_limit_switch_and_make_step+0x40>
		(motor.limit_emergency_counter < EMERGENCY_STEPS_TO_LIMIT))
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 80013ce:	685b      	ldr	r3, [r3, #4]
		(!(limit_switch_return_state())) && \
 80013d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80013d4:	4293      	cmp	r3, r2
 80013d6:	dc0b      	bgt.n	80013f0 <check_limit_switch_and_make_step+0x40>
	{
		step_toggle();																				// совершаем шаг
 80013d8:	f000 f81c 	bl	8001414 <step_toggle>
		motor.steps_distance_from_limit_switch = motor.steps_distance_from_limit_switch - 1;		// декрементируем счётчик расстояния от начального положения
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 80013e4:	6013      	str	r3, [r2, #0]
		motor.limit_emergency_counter = motor.limit_emergency_counter + 1;							// инкрементируем аварийный счётчик шагов
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 80013ee:	6053      	str	r3, [r2, #4]
	}
	if (motor.motor_move_direction == MOVE_TO_COORD_END)											// если направлениение движения от начального положения
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 80013f2:	7a1b      	ldrb	r3, [r3, #8]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d109      	bne.n	800140c <check_limit_switch_and_make_step+0x5c>
	{
		step_toggle();																				// совершаем шаг
 80013f8:	f000 f80c 	bl	8001414 <step_toggle>
		motor.steps_distance_from_limit_switch = motor.steps_distance_from_limit_switch + 1;		// инкрементируем счётчик расстояния от начального положения
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a03      	ldr	r2, [pc, #12]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 8001404:	6013      	str	r3, [r2, #0]
		motor.limit_emergency_counter = 0;															// обнуляем аварийный счётчик шагов
 8001406:	4b02      	ldr	r3, [pc, #8]	; (8001410 <check_limit_switch_and_make_step+0x60>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
	}
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200001b4 	.word	0x200001b4

08001414 <step_toggle>:

/*
 * совершаем шаг
 */
void step_toggle()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	switch (motor.step_pin_current_phase)															// если текущее логическое состояние на пине шага
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <step_toggle+0x3c>)
 800141a:	7a5b      	ldrb	r3, [r3, #9]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <step_toggle+0x12>
 8001420:	2b01      	cmp	r3, #1
 8001422:	d009      	beq.n	8001438 <step_toggle+0x24>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_RESET);					// выставляем "0" на пине шага
		motor.step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
		break;
	}
	}
}
 8001424:	e011      	b.n	800144a <step_toggle+0x36>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_SET);					// выставляем "1" на пине шага
 8001426:	2201      	movs	r2, #1
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <step_toggle+0x40>)
 800142c:	f000 fd24 	bl	8001e78 <HAL_GPIO_WritePin>
		motor.step_pin_current_phase = STEP_HIGH_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "1"
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <step_toggle+0x3c>)
 8001432:	2201      	movs	r2, #1
 8001434:	725a      	strb	r2, [r3, #9]
		break;
 8001436:	e008      	b.n	800144a <step_toggle+0x36>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_RESET);					// выставляем "0" на пине шага
 8001438:	2200      	movs	r2, #0
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <step_toggle+0x40>)
 800143e:	f000 fd1b 	bl	8001e78 <HAL_GPIO_WritePin>
		motor.step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <step_toggle+0x3c>)
 8001444:	2200      	movs	r2, #0
 8001446:	725a      	strb	r2, [r3, #9]
		break;
 8001448:	bf00      	nop
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001b4 	.word	0x200001b4
 8001454:	48000400 	.word	0x48000400

08001458 <limit_switch_return_state>:

/*
 * опрашиваем и возрващаем состояние концевика
 */
_Bool limit_switch_return_state()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	_Bool current_state;																			// флаг состояния концевика
	check_input_signal_state(&limit_switch.GRID_END_POINT_IN_signal);								// опрашиваем состояние пина концевика
 800145e:	480a      	ldr	r0, [pc, #40]	; (8001488 <limit_switch_return_state+0x30>)
 8001460:	f7ff fb64 	bl	8000b2c <check_input_signal_state>
	if (LIMIT_SWITCH_LOGIC_LEVEL_INVERTED)															// если логический уровень концевика инвертирован аппаратно
	{
		if (limit_switch.GRID_END_POINT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)			// если на пине концевика "0"
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <limit_switch_return_state+0x30>)
 8001466:	7a1b      	ldrb	r3, [r3, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <limit_switch_return_state+0x20>
		{
			current_state = 1;																		// выставляем флаг концевика в "1"
 800146c:	2301      	movs	r3, #1
 800146e:	71fb      	strb	r3, [r7, #7]
			motor.steps_distance_from_limit_switch = 0;												// обнуляем счётчик расстояния до концевика
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <limit_switch_return_state+0x34>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e001      	b.n	800147c <limit_switch_return_state+0x24>
		}
		else
		{
			current_state = 0;																		// иначе выставляем флаг концевика в "0"
 8001478:	2300      	movs	r3, #0
 800147a:	71fb      	strb	r3, [r7, #7]
		{
			current_state = 1;																		// иначе выставляем флаг концевика в "1"
			motor.steps_distance_from_limit_switch = 0;												// обнуляем счётчик расстояния до концевика
		}
	}
	return current_state;																			// возвращаем флаг состояния концевика
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000a0 	.word	0x200000a0
 800148c:	200001b4 	.word	0x200001b4

08001490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001492:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001496:	490e      	ldr	r1, [pc, #56]	; (80014d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <LoopForever+0xe>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ac:	4c0b      	ldr	r4, [pc, #44]	; (80014dc <LoopForever+0x16>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ba:	f7ff f977 	bl	80007ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f002 f9fb 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c2:	f7fe fea9 	bl	8000218 <main>

080014c6 <LoopForever>:

LoopForever:
    b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
  ldr   r0, =_estack
 80014c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d4:	08003940 	.word	0x08003940
  ldr r2, =_sbss
 80014d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014dc:	200001d8 	.word	0x200001d8

080014e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>

080014e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 f939 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f80e 	bl	8001514 <HAL_InitTick>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	e001      	b.n	8001508 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001504:	f7ff f864 	bl	80005d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001508:	79fb      	ldrb	r3, [r7, #7]

}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_InitTick+0x68>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d022      	beq.n	800156e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_InitTick+0x6c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_InitTick+0x68>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001534:	fbb1 f3f3 	udiv	r3, r1, r3
 8001538:	fbb2 f3f3 	udiv	r3, r2, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f944 	bl	80017ca <HAL_SYSTICK_Config>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10f      	bne.n	8001568 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	d809      	bhi.n	8001562 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154e:	2200      	movs	r2, #0
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	f04f 30ff 	mov.w	r0, #4294967295
 8001556:	f000 f910 	bl	800177a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_InitTick+0x70>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e007      	b.n	8001572 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e004      	b.n	8001572 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e001      	b.n	8001572 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000008 	.word	0x20000008
 8001580:	20000000 	.word	0x20000000
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x1c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x20>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4413      	add	r3, r2
 8001596:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <HAL_IncTick+0x1c>)
 8001598:	6013      	str	r3, [r2, #0]
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	200001d4 	.word	0x200001d4
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200001d4 	.word	0x200001d4

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <__NVIC_EnableIRQ+0x38>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff8e 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff29 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff40 	bl	800160c <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff90 	bl	80016b8 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5f 	bl	8001664 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff33 	bl	8001628 <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa4 	bl	8001720 <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e147      	b.n	8001a86 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe ff04 	bl	8000618 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0210 	bic.w	r2, r2, #16
 800181e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001820:	f7ff fec4 	bl	80015ac <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001826:	e012      	b.n	800184e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001828:	f7ff fec0 	bl	80015ac <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b0a      	cmp	r3, #10
 8001834:	d90b      	bls.n	800184e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e11b      	b.n	8001a86 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b08      	cmp	r3, #8
 800185a:	d0e5      	beq.n	8001828 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800186c:	f7ff fe9e 	bl	80015ac <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001872:	e012      	b.n	800189a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001874:	f7ff fe9a 	bl	80015ac <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b0a      	cmp	r3, #10
 8001880:	d90b      	bls.n	800189a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001886:	f043 0201 	orr.w	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2203      	movs	r2, #3
 8001892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0f5      	b.n	8001a86 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0e5      	beq.n	8001874 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0202 	orr.w	r2, r2, #2
 80018b6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a74      	ldr	r2, [pc, #464]	; (8001a90 <HAL_FDCAN_Init+0x2ac>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d103      	bne.n	80018ca <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80018c2:	4a74      	ldr	r2, [pc, #464]	; (8001a94 <HAL_FDCAN_Init+0x2b0>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7c1b      	ldrb	r3, [r3, #16]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d108      	bne.n	80018e4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e0:	619a      	str	r2, [r3, #24]
 80018e2:	e007      	b.n	80018f4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7c5b      	ldrb	r3, [r3, #17]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	e007      	b.n	800191e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800191c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7c9b      	ldrb	r3, [r3, #18]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	e007      	b.n	8001948 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001946:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699a      	ldr	r2, [r3, #24]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800196c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0210 	bic.w	r2, r2, #16
 800197c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0204 	orr.w	r2, r2, #4
 8001994:	619a      	str	r2, [r3, #24]
 8001996:	e02c      	b.n	80019f2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d028      	beq.n	80019f2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d01c      	beq.n	80019e2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0210 	orr.w	r2, r2, #16
 80019c6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d110      	bne.n	80019f2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	e007      	b.n	80019f2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a02:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a0a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a1a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a1c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a26:	d115      	bne.n	8001a54 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	3b01      	subs	r3, #1
 8001a34:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a36:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a40:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a50:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a52:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f814 	bl	8001a98 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40006400 	.word	0x40006400
 8001a94:	40006500 	.word	0x40006500

08001a98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001aa2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ab2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aba:	041a      	lsls	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	061a      	lsls	r2, r3, #24
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e005      	b.n	8001b26 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3304      	adds	r3, #4
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3f3      	bcc.n	8001b1a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	4000a400 	.word	0x4000a400

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b52:	e15a      	b.n	8001e0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 814c 	beq.w	8001e04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d00b      	beq.n	8001b8c <HAL_GPIO_Init+0x48>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b80:	2b11      	cmp	r3, #17
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d130      	bne.n	8001bee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 0201 	and.w	r2, r3, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0xea>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	6939      	ldr	r1, [r7, #16]
 8001c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80a6 	beq.w	8001e04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb8:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <HAL_GPIO_Init+0x2e4>)
 8001cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbc:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <HAL_GPIO_Init+0x2e4>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc4:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <HAL_GPIO_Init+0x2e4>)
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd0:	4a56      	ldr	r2, [pc, #344]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cfa:	d01f      	beq.n	8001d3c <HAL_GPIO_Init+0x1f8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x2ec>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d019      	beq.n	8001d38 <HAL_GPIO_Init+0x1f4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <HAL_GPIO_Init+0x2f0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d013      	beq.n	8001d34 <HAL_GPIO_Init+0x1f0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a4a      	ldr	r2, [pc, #296]	; (8001e38 <HAL_GPIO_Init+0x2f4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00d      	beq.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a49      	ldr	r2, [pc, #292]	; (8001e3c <HAL_GPIO_Init+0x2f8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d007      	beq.n	8001d2c <HAL_GPIO_Init+0x1e8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a48      	ldr	r2, [pc, #288]	; (8001e40 <HAL_GPIO_Init+0x2fc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_GPIO_Init+0x1e4>
 8001d24:	2305      	movs	r3, #5
 8001d26:	e00a      	b.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d28:	2306      	movs	r3, #6
 8001d2a:	e008      	b.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	e006      	b.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d30:	2303      	movs	r3, #3
 8001d32:	e004      	b.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	f002 0203 	and.w	r2, r2, #3
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	4093      	lsls	r3, r2
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d4e:	4937      	ldr	r1, [pc, #220]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d80:	4a30      	ldr	r2, [pc, #192]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001daa:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dd4:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f47f ae9d 	bne.w	8001b54 <HAL_GPIO_Init+0x10>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	48000400 	.word	0x48000400
 8001e34:	48000800 	.word	0x48000800
 8001e38:	48000c00 	.word	0x48000c00
 8001e3c:	48001000 	.word	0x48001000
 8001e40:	48001400 	.word	0x48001400
 8001e44:	40010400 	.word	0x40010400

08001e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e001      	b.n	8001e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
 8001e84:	4613      	mov	r3, r2
 8001e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d141      	bne.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d131      	bne.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec4:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eca:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001edc:	4a41      	ldr	r2, [pc, #260]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ee4:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2232      	movs	r2, #50	; 0x32
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	4a3f      	ldr	r2, [pc, #252]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001efa:	e002      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d102      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f2      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f16:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d158      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e057      	b.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f2e:	4a2d      	ldr	r2, [pc, #180]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f38:	e04d      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f40:	d141      	bne.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d131      	bne.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f50:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2232      	movs	r2, #50	; 0x32
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f86:	e002      	b.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9a:	d102      	bne.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f2      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d112      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e011      	b.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fc4:	e007      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	431bde83 	.word	0x431bde83

08001ff0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffe:	6093      	str	r3, [r2, #8]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40007000 	.word	0x40007000

08002010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e308      	b.n	8002634 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d075      	beq.n	800211a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202e:	4ba3      	ldr	r3, [pc, #652]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002038:	4ba0      	ldr	r3, [pc, #640]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	d102      	bne.n	800204e <HAL_RCC_OscConfig+0x3e>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d002      	beq.n	8002054 <HAL_RCC_OscConfig+0x44>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b99      	ldr	r3, [pc, #612]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d05b      	beq.n	8002118 <HAL_RCC_OscConfig+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d157      	bne.n	8002118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e2e3      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x74>
 8002076:	4b91      	ldr	r3, [pc, #580]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a90      	ldr	r2, [pc, #576]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x98>
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8a      	ldr	r2, [pc, #552]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a87      	ldr	r2, [pc, #540]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 80020a8:	4b84      	ldr	r3, [pc, #528]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a83      	ldr	r2, [pc, #524]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a80      	ldr	r2, [pc, #512]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff fa70 	bl	80015ac <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff fa6c 	bl	80015ac <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e2a8      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0xc0>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff fa5c 	bl	80015ac <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff fa58 	bl	80015ac <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e294      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210a:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0xe8>
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d075      	beq.n	8002212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002130:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b0c      	cmp	r3, #12
 800213e:	d102      	bne.n	8002146 <HAL_RCC_OscConfig+0x136>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d002      	beq.n	800214c <HAL_RCC_OscConfig+0x13c>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11f      	bne.n	800218c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214c:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_OscConfig+0x154>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e267      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	4952      	ldr	r1, [pc, #328]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002178:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCC_OscConfig+0x2b0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f9c9 	bl	8001514 <HAL_InitTick>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d043      	beq.n	8002210 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e253      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d023      	beq.n	80021dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002194:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a48      	ldr	r2, [pc, #288]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7ff fa04 	bl	80015ac <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a8:	f7ff fa00 	bl	80015ac <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e23c      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ba:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	061b      	lsls	r3, r3, #24
 80021d4:	4939      	ldr	r1, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
 80021da:	e01a      	b.n	8002212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021dc:	4b37      	ldr	r3, [pc, #220]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a36      	ldr	r2, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff f9e0 	bl	80015ac <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f0:	f7ff f9dc 	bl	80015ac <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e218      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1e0>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d03c      	beq.n	8002298 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01c      	beq.n	8002260 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7ff f9b9 	bl	80015ac <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223e:	f7ff f9b5 	bl	80015ac <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e1f1      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0ef      	beq.n	800223e <HAL_RCC_OscConfig+0x22e>
 800225e:	e01b      	b.n	8002298 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002266:	4a15      	ldr	r2, [pc, #84]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7ff f99c 	bl	80015ac <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff f998 	bl	80015ac <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1d4      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 800228c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1ef      	bne.n	8002278 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80ab 	beq.w	80023fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2b4>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e005      	b.n	80022c6 <HAL_RCC_OscConfig+0x2b6>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	20000004 	.word	0x20000004
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4baf      	ldr	r3, [pc, #700]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	4aae      	ldr	r2, [pc, #696]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6593      	str	r3, [r2, #88]	; 0x58
 80022d6:	4bac      	ldr	r3, [pc, #688]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	4ba9      	ldr	r3, [pc, #676]	; (800258c <HAL_RCC_OscConfig+0x57c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f2:	4ba6      	ldr	r3, [pc, #664]	; (800258c <HAL_RCC_OscConfig+0x57c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4aa5      	ldr	r2, [pc, #660]	; (800258c <HAL_RCC_OscConfig+0x57c>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff f955 	bl	80015ac <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff f951 	bl	80015ac <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e18d      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002318:	4b9c      	ldr	r3, [pc, #624]	; (800258c <HAL_RCC_OscConfig+0x57c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d108      	bne.n	800233e <HAL_RCC_OscConfig+0x32e>
 800232c:	4b96      	ldr	r3, [pc, #600]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	4a95      	ldr	r2, [pc, #596]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800233c:	e024      	b.n	8002388 <HAL_RCC_OscConfig+0x378>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d110      	bne.n	8002368 <HAL_RCC_OscConfig+0x358>
 8002346:	4b90      	ldr	r3, [pc, #576]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	4a8e      	ldr	r2, [pc, #568]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002356:	4b8c      	ldr	r3, [pc, #560]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	4a8a      	ldr	r2, [pc, #552]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002366:	e00f      	b.n	8002388 <HAL_RCC_OscConfig+0x378>
 8002368:	4b87      	ldr	r3, [pc, #540]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a86      	ldr	r2, [pc, #536]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002378:	4b83      	ldr	r3, [pc, #524]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a82      	ldr	r2, [pc, #520]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d016      	beq.n	80023be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7ff f90c 	bl	80015ac <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7ff f908 	bl	80015ac <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e142      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ed      	beq.n	8002398 <HAL_RCC_OscConfig+0x388>
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023be:	f7ff f8f5 	bl	80015ac <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7ff f8f1 	bl	80015ac <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e12b      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1ed      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	4a64      	ldr	r2, [pc, #400]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d03c      	beq.n	8002482 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01c      	beq.n	800244a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002410:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002416:	4a5c      	ldr	r2, [pc, #368]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7ff f8c4 	bl	80015ac <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002428:	f7ff f8c0 	bl	80015ac <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0fc      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800243a:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800243c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ef      	beq.n	8002428 <HAL_RCC_OscConfig+0x418>
 8002448:	e01b      	b.n	8002482 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800244a:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800244c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002450:	4a4d      	ldr	r2, [pc, #308]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7ff f8a7 	bl	80015ac <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002462:	f7ff f8a3 	bl	80015ac <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0df      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ef      	bne.n	8002462 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80d3 	beq.w	8002632 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800248c:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b0c      	cmp	r3, #12
 8002496:	f000 808d 	beq.w	80025b4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d15a      	bne.n	8002558 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a38      	ldr	r2, [pc, #224]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80024a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7ff f87d 	bl	80015ac <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7ff f879 	bl	80015ac <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0b5      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_RCC_OscConfig+0x580>)
 80024da:	4013      	ands	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6a11      	ldr	r1, [r2, #32]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e4:	3a01      	subs	r2, #1
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	4311      	orrs	r1, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024ee:	0212      	lsls	r2, r2, #8
 80024f0:	4311      	orrs	r1, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024f6:	0852      	lsrs	r2, r2, #1
 80024f8:	3a01      	subs	r2, #1
 80024fa:	0552      	lsls	r2, r2, #21
 80024fc:	4311      	orrs	r1, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002502:	0852      	lsrs	r2, r2, #1
 8002504:	3a01      	subs	r2, #1
 8002506:	0652      	lsls	r2, r2, #25
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800250e:	06d2      	lsls	r2, r2, #27
 8002510:	430a      	orrs	r2, r1
 8002512:	491d      	ldr	r1, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002514:	4313      	orrs	r3, r2
 8002516:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800251e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff f83c 	bl	80015ac <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7ff f838 	bl	80015ac <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e074      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x528>
 8002556:	e06c      	b.n	8002632 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002576:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7ff f814 	bl	80015ac <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002586:	e00e      	b.n	80025a6 <HAL_RCC_OscConfig+0x596>
 8002588:	40021000 	.word	0x40021000
 800258c:	40007000 	.word	0x40007000
 8002590:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff f80a 	bl	80015ac <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e046      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a6:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_OscConfig+0x62c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x584>
 80025b2:	e03e      	b.n	8002632 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e039      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_OscConfig+0x62c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d12c      	bne.n	800262e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	3b01      	subs	r3, #1
 80025e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d123      	bne.n	800262e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d11b      	bne.n	800262e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d113      	bne.n	800262e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d109      	bne.n	800262e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e11e      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b91      	ldr	r3, [pc, #580]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b8e      	ldr	r3, [pc, #568]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	498c      	ldr	r1, [pc, #560]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b8a      	ldr	r3, [pc, #552]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e106      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d073      	beq.n	800277c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d129      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269c:	4b81      	ldr	r3, [pc, #516]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0f4      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026ac:	f000 f966 	bl	800297c <RCC_GetSysClockFreqFromPLLSource>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4a7c      	ldr	r2, [pc, #496]	; (80028a8 <HAL_RCC_ClockConfig+0x268>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d93f      	bls.n	800273a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ba:	4b7a      	ldr	r3, [pc, #488]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d033      	beq.n	800273a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d12f      	bne.n	800273a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026da:	4b72      	ldr	r3, [pc, #456]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e2:	4a70      	ldr	r2, [pc, #448]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e024      	b.n	800273a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f8:	4b6a      	ldr	r3, [pc, #424]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0c6      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002708:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0be      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002718:	f000 f8ce 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800271c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <HAL_RCC_ClockConfig+0x268>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d909      	bls.n	800273a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002726:	4b5f      	ldr	r3, [pc, #380]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272e:	4a5d      	ldr	r2, [pc, #372]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4957      	ldr	r1, [pc, #348]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7fe ff2e 	bl	80015ac <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe ff2a 	bl	80015ac <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e095      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b4e      	ldr	r3, [pc, #312]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d023      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a42      	ldr	r2, [pc, #264]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800279a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800279e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027ac:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027b4:	4a3b      	ldr	r2, [pc, #236]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4936      	ldr	r1, [pc, #216]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b80      	cmp	r3, #128	; 0x80
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4a32      	ldr	r2, [pc, #200]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e2:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d21d      	bcs.n	800282c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 020f 	bic.w	r2, r3, #15
 80027f8:	4929      	ldr	r1, [pc, #164]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002800:	f7fe fed4 	bl	80015ac <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fed0 	bl	80015ac <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e03b      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d1ed      	bne.n	8002808 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4917      	ldr	r1, [pc, #92]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490f      	ldr	r1, [pc, #60]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286a:	f000 f825 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_RCC_ClockConfig+0x26c>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	fa21 f303 	lsr.w	r3, r1, r3
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x270>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_RCC_ClockConfig+0x274>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fe40 	bl	8001514 <HAL_InitTick>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	04c4b400 	.word	0x04c4b400
 80028ac:	08003928 	.word	0x08003928
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e047      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e03e      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d136      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3301      	adds	r3, #1
 8002904:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290c:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <HAL_RCC_GetSysClockFreq+0xc0>)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	4a16      	ldr	r2, [pc, #88]	; (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002916:	68d2      	ldr	r2, [r2, #12]
 8002918:	0a12      	lsrs	r2, r2, #8
 800291a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
      break;
 8002924:	e00c      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002926:	4a13      	ldr	r2, [pc, #76]	; (8002974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	0a12      	lsrs	r2, r2, #8
 8002934:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
      break;
 800293e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0e5b      	lsrs	r3, r3, #25
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	e001      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002960:	693b      	ldr	r3, [r7, #16]
}
 8002962:	4618      	mov	r0, r3
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	00f42400 	.word	0x00f42400
 8002978:	01e84800 	.word	0x01e84800

0800297c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d10c      	bne.n	80029ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a0:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029aa:	68d2      	ldr	r2, [r2, #12]
 80029ac:	0a12      	lsrs	r2, r2, #8
 80029ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
    break;
 80029b8:	e00c      	b.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	0a12      	lsrs	r2, r2, #8
 80029c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
    break;
 80029d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0e5b      	lsrs	r3, r3, #25
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40021000 	.word	0x40021000
 8002a00:	01e84800 	.word	0x01e84800
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8098 	beq.w	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	4a3f      	ldr	r2, [pc, #252]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6593      	str	r3, [r2, #88]	; 0x58
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a39      	ldr	r2, [pc, #228]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fda5 	bl	80015ac <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a64:	e009      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7fe fda1 	bl	80015ac <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d902      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	74fb      	strb	r3, [r7, #19]
        break;
 8002a78:	e005      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ef      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d159      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01e      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d019      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab4:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fd61 	bl	80015ac <HAL_GetTick>
 8002aea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aec:	e00b      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fe fd5d 	bl	80015ac <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d902      	bls.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	74fb      	strb	r3, [r7, #19]
            break;
 8002b04:	e006      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ec      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10b      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	4903      	ldr	r1, [pc, #12]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b30:	e008      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	74bb      	strb	r3, [r7, #18]
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b44:	7c7b      	ldrb	r3, [r7, #17]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4a:	4ba6      	ldr	r3, [pc, #664]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	4aa5      	ldr	r2, [pc, #660]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b62:	4ba0      	ldr	r3, [pc, #640]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f023 0203 	bic.w	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	499c      	ldr	r1, [pc, #624]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b84:	4b97      	ldr	r3, [pc, #604]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 020c 	bic.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	4994      	ldr	r1, [pc, #592]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba6:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	498b      	ldr	r1, [pc, #556]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc8:	4b86      	ldr	r3, [pc, #536]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4983      	ldr	r1, [pc, #524]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bea:	4b7e      	ldr	r3, [pc, #504]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	497a      	ldr	r1, [pc, #488]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0c:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	4972      	ldr	r1, [pc, #456]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	4969      	ldr	r1, [pc, #420]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c50:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4961      	ldr	r1, [pc, #388]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	4958      	ldr	r1, [pc, #352]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d015      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c94:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	4950      	ldr	r1, [pc, #320]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb4:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ccc:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	4942      	ldr	r1, [pc, #264]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cec:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a3c      	ldr	r2, [pc, #240]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d04:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4934      	ldr	r1, [pc, #208]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	4926      	ldr	r1, [pc, #152]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d015      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	4918      	ldr	r1, [pc, #96]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e049      	b.n	8002e8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fc46 	bl	80006a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f000 fb52 	bl	80034d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d001      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e04a      	b.n	8002f46 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x6c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eda:	d013      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x6c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x6c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <HAL_TIM_Base_Start_IT+0xc4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x6c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x6c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d115      	bne.n	8002f30 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d015      	beq.n	8002f42 <HAL_TIM_Base_Start_IT+0xaa>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d011      	beq.n	8002f42 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2e:	e008      	b.n	8002f42 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	e000      	b.n	8002f44 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40013400 	.word	0x40013400
 8002f64:	40014000 	.word	0x40014000
 8002f68:	00010007 	.word	0x00010007

08002f6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10f      	bne.n	8002fb4 <HAL_TIM_Base_Stop_IT+0x48>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	f244 4344 	movw	r3, #17476	; 0x4444
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_TIM_Base_Stop_IT+0x48>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d122      	bne.n	8003026 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d11b      	bne.n	8003026 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f06f 0202 	mvn.w	r2, #2
 8002ff6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fa41 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 8003012:	e005      	b.n	8003020 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa33 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa44 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d122      	bne.n	800307a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d11b      	bne.n	800307a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f06f 0204 	mvn.w	r2, #4
 800304a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fa17 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 8003066:	e005      	b.n	8003074 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fa09 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa1a 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b08      	cmp	r3, #8
 8003086:	d122      	bne.n	80030ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b08      	cmp	r3, #8
 8003094:	d11b      	bne.n	80030ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 0208 	mvn.w	r2, #8
 800309e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2204      	movs	r2, #4
 80030a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f9ed 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 80030ba:	e005      	b.n	80030c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f9df 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f9f0 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d122      	bne.n	8003122 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d11b      	bne.n	8003122 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f06f 0210 	mvn.w	r2, #16
 80030f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2208      	movs	r2, #8
 80030f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f9c3 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 800310e:	e005      	b.n	800311c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f9b5 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f9c6 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10e      	bne.n	800314e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0201 	mvn.w	r2, #1
 8003146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f98f 	bl	800346c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d10e      	bne.n	800317a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d107      	bne.n	800317a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fb63 	bl	8003840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fb56 	bl	8003854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f974 	bl	80034bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0220 	mvn.w	r2, #32
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fb16 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320e:	d10f      	bne.n	8003230 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321e:	d107      	bne.n	8003230 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fb1c 	bl	8003868 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323e:	d10f      	bne.n	8003260 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fb0e 	bl	800387c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326e:	d10f      	bne.n	8003290 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327e:	d107      	bne.n	8003290 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fb00 	bl	8003890 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800329a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800329e:	d10f      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 faf2 	bl	80038a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIM_ConfigClockSource+0x18>
 80032dc:	2302      	movs	r3, #2
 80032de:	e0b9      	b.n	8003454 <HAL_TIM_ConfigClockSource+0x18c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80032fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800330a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b70      	cmp	r3, #112	; 0x70
 800331a:	d02e      	beq.n	800337a <HAL_TIM_ConfigClockSource+0xb2>
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d812      	bhi.n	8003346 <HAL_TIM_ConfigClockSource+0x7e>
 8003320:	2b30      	cmp	r3, #48	; 0x30
 8003322:	f000 8084 	beq.w	800342e <HAL_TIM_ConfigClockSource+0x166>
 8003326:	2b30      	cmp	r3, #48	; 0x30
 8003328:	d806      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x70>
 800332a:	2b10      	cmp	r3, #16
 800332c:	d07f      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x166>
 800332e:	2b20      	cmp	r3, #32
 8003330:	d07d      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x166>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d07b      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003336:	e084      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8003338:	2b50      	cmp	r3, #80	; 0x50
 800333a:	d048      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x106>
 800333c:	2b60      	cmp	r3, #96	; 0x60
 800333e:	d056      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x126>
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d064      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x146>
      break;
 8003344:	e07d      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8003346:	4a45      	ldr	r2, [pc, #276]	; (800345c <HAL_TIM_ConfigClockSource+0x194>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d070      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x166>
 800334c:	4a43      	ldr	r2, [pc, #268]	; (800345c <HAL_TIM_ConfigClockSource+0x194>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d809      	bhi.n	8003366 <HAL_TIM_ConfigClockSource+0x9e>
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	d027      	beq.n	80033a8 <HAL_TIM_ConfigClockSource+0xe0>
 8003358:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800335c:	d067      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x166>
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d06d      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003364:	e06d      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8003366:	4a3e      	ldr	r2, [pc, #248]	; (8003460 <HAL_TIM_ConfigClockSource+0x198>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d060      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x166>
 800336c:	4a3d      	ldr	r2, [pc, #244]	; (8003464 <HAL_TIM_ConfigClockSource+0x19c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d05d      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x166>
 8003372:	4a3d      	ldr	r2, [pc, #244]	; (8003468 <HAL_TIM_ConfigClockSource+0x1a0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d05a      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x166>
      break;
 8003378:	e063      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f000 f9ad 	bl	80036e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800339c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	609a      	str	r2, [r3, #8]
      break;
 80033a6:	e04c      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f000 f996 	bl	80036e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ca:	609a      	str	r2, [r3, #8]
      break;
 80033cc:	e039      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 f908 	bl	80035f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2150      	movs	r1, #80	; 0x50
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f961 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 80033ec:	e029      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 f927 	bl	800364e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2160      	movs	r1, #96	; 0x60
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f951 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 800340c:	e019      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	f000 f8e8 	bl	80035f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f941 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 800342c:	e009      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f000 f938 	bl	80036ae <TIM_ITRx_SetConfig>
        break;
 800343e:	e000      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003440:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	00100020 	.word	0x00100020
 8003460:	00100040 	.word	0x00100040
 8003464:	00100070 	.word	0x00100070
 8003468:	00100030 	.word	0x00100030

0800346c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3c      	ldr	r2, [pc, #240]	; (80035d4 <TIM_Base_SetConfig+0x104>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00f      	beq.n	8003508 <TIM_Base_SetConfig+0x38>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x38>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <TIM_Base_SetConfig+0x108>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x38>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a38      	ldr	r2, [pc, #224]	; (80035dc <TIM_Base_SetConfig+0x10c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x38>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <TIM_Base_SetConfig+0x110>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <TIM_Base_SetConfig+0x104>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01b      	beq.n	800355a <TIM_Base_SetConfig+0x8a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d017      	beq.n	800355a <TIM_Base_SetConfig+0x8a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <TIM_Base_SetConfig+0x108>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <TIM_Base_SetConfig+0x8a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a29      	ldr	r2, [pc, #164]	; (80035dc <TIM_Base_SetConfig+0x10c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00f      	beq.n	800355a <TIM_Base_SetConfig+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <TIM_Base_SetConfig+0x110>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00b      	beq.n	800355a <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <TIM_Base_SetConfig+0x114>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <TIM_Base_SetConfig+0x118>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x8a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <TIM_Base_SetConfig+0x11c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a10      	ldr	r2, [pc, #64]	; (80035d4 <TIM_Base_SetConfig+0x104>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00f      	beq.n	80035b8 <TIM_Base_SetConfig+0xe8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <TIM_Base_SetConfig+0x110>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00b      	beq.n	80035b8 <TIM_Base_SetConfig+0xe8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a10      	ldr	r2, [pc, #64]	; (80035e4 <TIM_Base_SetConfig+0x114>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d007      	beq.n	80035b8 <TIM_Base_SetConfig+0xe8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <TIM_Base_SetConfig+0x118>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_Base_SetConfig+0xe8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <TIM_Base_SetConfig+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	615a      	str	r2, [r3, #20]
}
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40013400 	.word	0x40013400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800

080035f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f023 0201 	bic.w	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 030a 	bic.w	r3, r3, #10
 800362c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364e:	b480      	push	{r7}
 8003650:	b087      	sub	sp, #28
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0210 	bic.w	r2, r3, #16
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	031b      	lsls	r3, r3, #12
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e065      	b.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2b      	ldr	r2, [pc, #172]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800377a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800378c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003790:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d018      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d013      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00e      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d009      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a12      	ldr	r2, [pc, #72]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d10c      	bne.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40014000 	.word	0x40014000

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4e0d      	ldr	r6, [pc, #52]	; (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038be:	1ba4      	subs	r4, r4, r6
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2500      	movs	r5, #0
 80038c4:	42a5      	cmp	r5, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4e0b      	ldr	r6, [pc, #44]	; (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	; (80038fc <__libc_init_array+0x44>)
 80038cc:	f000 f820 	bl	8003910 <_init>
 80038d0:	1ba4      	subs	r4, r4, r6
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2500      	movs	r5, #0
 80038d6:	42a5      	cmp	r5, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038e0:	4798      	blx	r3
 80038e2:	3501      	adds	r5, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ea:	4798      	blx	r3
 80038ec:	3501      	adds	r5, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	08003938 	.word	0x08003938
 80038f4:	08003938 	.word	0x08003938
 80038f8:	08003938 	.word	0x08003938
 80038fc:	0800393c 	.word	0x0800393c

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <_init>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr

0800391c <_fini>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	bf00      	nop
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr
