
project_13_raster_plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005734  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005910  08005910  00015910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005968  08005968  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005968  08005968  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005968  08005968  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000078  080059e4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080059e4  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fe6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002278  00000000  00000000  0003408a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00036308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e010  00000000  00000000  00038250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe97  00000000  00000000  00056260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6ba9  00000000  00000000  000660f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012cca0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  0012ccf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080058f4 	.word	0x080058f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	080058f4 	.word	0x080058f4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f001 fc97 	bl	8002506 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f80b 	bl	8000bf2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 f950 	bl	8000e80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000be0:	f000 f8b2 	bl	8000d48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000be4:	f000 f8fe 	bl	8000de4 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000be8:	f000 f868 	bl	8000cbc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  device_init();
 8000bec:	f000 fe86 	bl	80018fc <device_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <main+0x20>

08000bf2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b0a4      	sub	sp, #144	; 0x90
 8000bf6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bfc:	2238      	movs	r2, #56	; 0x38
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 feb9 	bl	8004978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2244      	movs	r2, #68	; 0x44
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 feab 	bl	8004978 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f002 f952 	bl	8002ecc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c32:	2302      	movs	r3, #2
 8000c34:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c36:	2303      	movs	r3, #3
 8000c38:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c3e:	2314      	movs	r3, #20
 8000c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 f9ea 	bl	8003034 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c66:	f000 f989 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c82:	2104      	movs	r1, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fced 	bl	8003664 <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c90:	f000 f974 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fec2 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cae:	f000 f965 	bl	8000f7c <Error_Handler>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3790      	adds	r7, #144	; 0x90
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cc2:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <MX_FDCAN1_Init+0x88>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d2e:	f001 fd6b 	bl	8002808 <HAL_FDCAN_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000d38:	f000 f920 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000204 	.word	0x20000204
 8000d44:	40006400 	.word	0x40006400

08000d48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d70:	229f      	movs	r2, #159	; 0x9f
 8000d72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d8e:	f003 f83d 	bl	8003e0c <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d98:	f000 f8f0 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000daa:	f003 fa9f 	bl	80042ec <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000db4:	f000 f8e2 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000db8:	2320      	movs	r3, #32
 8000dba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000dc6:	f003 fce5 	bl	8004794 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 f8d4 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000284 	.word	0x20000284
 8000de0:	0001869f 	.word	0x0001869f

08000de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e04:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <MX_TIM3_Init+0x98>)
 8000e06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e10:	2210      	movs	r2, #16
 8000e12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e16:	2263      	movs	r2, #99	; 0x63
 8000e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e28:	f002 fff0 	bl	8003e0c <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 f8a3 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e44:	f003 fa52 	bl	80042ec <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f895 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e52:	2320      	movs	r3, #32
 8000e54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e60:	f003 fc98 	bl	8004794 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e6a:	f000 f887 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000011c 	.word	0x2000011c
 8000e7c:	40000400 	.word	0x40000400

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a35      	ldr	r2, [pc, #212]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000e9c:	f043 0320 	orr.w	r3, r3, #32
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2138      	movs	r1, #56	; 0x38
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f001 ffd9 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 8000eea:	2200      	movs	r2, #0
 8000eec:	f240 11f9 	movw	r1, #505	; 0x1f9
 8000ef0:	4820      	ldr	r0, [pc, #128]	; (8000f74 <MX_GPIO_Init+0xf4>)
 8000ef2:	f001 ffd3 	bl	8002e9c <HAL_GPIO_WritePin>
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ON_TOMO_Pin */
  GPIO_InitStruct.Pin = ON_TOMO_Pin;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ON_TOMO_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4619      	mov	r1, r3
 8000f08:	481b      	ldr	r0, [pc, #108]	; (8000f78 <MX_GPIO_Init+0xf8>)
 8000f0a:	f001 fe2d 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONFIG_3_Pin CONFIG_2_Pin CONFIG_1_Pin BUCKY_CALL_Pin
                           GRID_BUTTON_Pin GRID_END_POINT_Pin GRID_120_DETECT_Pin GRID_180_DETECT_Pin
                           PUSHBUTTON_BUCKYBRAKE_Pin */
  GPIO_InitStruct.Pin = CONFIG_3_Pin|CONFIG_2_Pin|CONFIG_1_Pin|BUCKY_CALL_Pin
 8000f0e:	f248 73c7 	movw	r3, #34759	; 0x87c7
 8000f12:	60fb      	str	r3, [r7, #12]
                          |GRID_BUTTON_Pin|GRID_END_POINT_Pin|GRID_120_DETECT_Pin|GRID_180_DETECT_Pin
                          |PUSHBUTTON_BUCKYBRAKE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f001 fe1f 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRID_120_Pin GRID_180_Pin BUCKY_READY_Pin */
  GPIO_InitStruct.Pin = GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin;
 8000f2a:	2338      	movs	r3, #56	; 0x38
 8000f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f001 fe10 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_CENTERING_Pin BUCKY_BRAKE_Pin RESET_Pin ENABLE_Pin
                           CURRENT_WIND_Pin STEP_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 8000f48:	f240 13f9 	movw	r3, #505	; 0x1f9
 8000f4c:	60fb      	str	r3, [r7, #12]
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_GPIO_Init+0xf4>)
 8000f62:	f001 fe01 	bl	8002b68 <HAL_GPIO_Init>

}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400
 8000f78:	48001400 	.word	0x48001400

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fc2:	f002 f827 	bl	8003014 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a18      	ldr	r2, [pc, #96]	; (8001054 <HAL_FDCAN_MspInit+0x80>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d129      	bne.n	800104a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8000ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001026:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001038:	2309      	movs	r3, #9
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f001 fd8f 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40006400 	.word	0x40006400
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d114      	bne.n	8001098 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	201c      	movs	r0, #28
 800108c:	f001 fb87 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001090:	201c      	movs	r0, #28
 8001092:	f001 fb9e 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001096:	e018      	b.n	80010ca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_TIM_Base_MspInit+0x7c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d113      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2102      	movs	r1, #2
 80010be:	201d      	movs	r0, #29
 80010c0:	f001 fb6d 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010c4:	201d      	movs	r0, #29
 80010c6:	f001 fb84 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40000400 	.word	0x40000400

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f001 fa3c 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <TIM2_IRQHandler+0x14>)
 800113e:	f002 ff56 	bl	8003fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  signals_check_timer_interrupt_handler();
 8001142:	f000 fe53 	bl	8001dec <signals_check_timer_interrupt_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000284 	.word	0x20000284

08001150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <TIM3_IRQHandler+0x14>)
 8001156:	f002 ff4a 	bl	8003fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  motor_timer_interrupt_handler();
 800115a:	f001 f99f 	bl	800249c <motor_timer_interrupt_handler>
  /* USER CODE END TIM3_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000011c 	.word	0x2000011c

08001168 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <SystemInit+0x28>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <SystemInit+0x28>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x28>)
 800117e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001182:	609a      	str	r2, [r3, #8]
#endif
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <set_output_signal_state>:

/*
 * Выставляем логическое состояние на выходном пине
 */
void set_output_signal_state(GPIO_TypeDef* GPIO_port_pointer, uint16_t pin_number, SignalLogicLevel_EnumTypeDef requied_logic_level)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
	if (requied_logic_level == LOGIC_LEVEL_LOW)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <set_output_signal_state+0x24>
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_RESET);
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 fe73 	bl	8002e9c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
	}
}
 80011b6:	e005      	b.n	80011c4 <set_output_signal_state+0x30>
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 fe6c 	bl	8002e9c <HAL_GPIO_WritePin>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <check_input_signal_state>:

/*
 * Считывание и запись состояния входного пина
 */
void check_input_signal_state(InSignalAttributes_StructTypeDef* signal_to_check)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	GPIO_PinState current_logic_state = HAL_GPIO_ReadPin(signal_to_check->signal_pin.GPIO_port_pointer, signal_to_check->signal_pin.pin_number);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	889b      	ldrh	r3, [r3, #4]
 80011dc:	4619      	mov	r1, r3
 80011de:	4610      	mov	r0, r2
 80011e0:	f001 fe44 	bl	8002e6c <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]

	switch (current_logic_state)
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <check_input_signal_state+0x2e>
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <check_input_signal_state+0x36>
	{
	case GPIO_PIN_SET:
	{
		signal_to_check->signal_logic_level = LOGIC_LEVEL_HIGH;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	721a      	strb	r2, [r3, #8]
		break;
 80011f8:	e003      	b.n	8001202 <check_input_signal_state+0x36>
	}
	case GPIO_PIN_RESET:
	{
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	721a      	strb	r2, [r3, #8]
		break;
 8001200:	bf00      	nop
	}
	}
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <check_and_update_button_state>:

/*
 * Проверяем состояние кнопки
 */
void check_and_update_button_state(ButtonAttributes_StructTypeDef* button_to_check, uint32_t ticks_per_sec)
{
 800120a:	b590      	push	{r4, r7, lr}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
	if (button_to_check->button_released_default_signal_level == LOGIC_LEVEL_LOW)						// если при отпущенной кнопке логическое состояние пина "0"
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7b1b      	ldrb	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d12f      	bne.n	800127c <check_and_update_button_state+0x72>
	{
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7a1b      	ldrb	r3, [r3, #8]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d124      	bne.n	800126e <check_and_update_button_state+0x64>
		{
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7e1b      	ldrb	r3, [r3, #24]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d008      	beq.n	800123e <check_and_update_button_state+0x34>
			{
				if (button_to_check->button_pressing_duration_counter >= button_to_check->button_bounce_filter_counts)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69da      	ldr	r2, [r3, #28]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d302      	bcc.n	800123e <check_and_update_button_state+0x34>
				{
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	761a      	strb	r2, [r3, #24]
				}
			}
			if (button_to_check->button_pressing_duration_counter >= convert_ms_to_ticks(button_to_check->button_long_press_ms, ticks_per_sec))			// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69dc      	ldr	r4, [r3, #28]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fb45 	bl	80018d8 <convert_ms_to_ticks>
 800124e:	4603      	mov	r3, r0
 8001250:	429c      	cmp	r4, r3
 8001252:	d306      	bcc.n	8001262 <check_and_update_button_state+0x58>
			{
				button_to_check->button_pressing_duration_counter = button_to_check->button_long_press_ms;			// удерживаем счётчик от дальнейшего увеличения
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695a      	ldr	r2, [r3, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	61da      	str	r2, [r3, #28]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2202      	movs	r2, #2
 8001260:	761a      	strb	r2, [r3, #24]
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	61da      	str	r2, [r3, #28]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
		}
	}
}
 800126c:	e035      	b.n	80012da <check_and_update_button_state+0xd0>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	761a      	strb	r2, [r3, #24]
}
 800127a:	e02e      	b.n	80012da <check_and_update_button_state+0xd0>
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7a1b      	ldrb	r3, [r3, #8]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d106      	bne.n	8001292 <check_and_update_button_state+0x88>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	e023      	b.n	80012da <check_and_update_button_state+0xd0>
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7e1b      	ldrb	r3, [r3, #24]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d008      	beq.n	80012ac <check_and_update_button_state+0xa2>
				if (button_to_check->button_pressing_duration_counter >= button_to_check->button_bounce_filter_counts)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69da      	ldr	r2, [r3, #28]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d302      	bcc.n	80012ac <check_and_update_button_state+0xa2>
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	761a      	strb	r2, [r3, #24]
			if (button_to_check->button_pressing_duration_counter >= convert_ms_to_ticks(button_to_check->button_long_press_ms, ticks_per_sec))		// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69dc      	ldr	r4, [r3, #28]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fb0e 	bl	80018d8 <convert_ms_to_ticks>
 80012bc:	4603      	mov	r3, r0
 80012be:	429c      	cmp	r4, r3
 80012c0:	d306      	bcc.n	80012d0 <check_and_update_button_state+0xc6>
				button_to_check->button_pressing_duration_counter = button_to_check->button_long_press_ms;			// удерживаем счётчик от дальнейшего увеличения
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	61da      	str	r2, [r3, #28]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2202      	movs	r2, #2
 80012ce:	761a      	strb	r2, [r3, #24]
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	61da      	str	r2, [r3, #28]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}

080012e2 <motor_movement_init>:

/*
 * Вызываем эту функцию тогда же, когда запускаем прерывания для движения
 */
void motor_movement_init(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
	calculate_acceleration_coefficient(movement_profile);
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f000 f807 	bl	8001300 <calculate_acceleration_coefficient>
	reset_movement_counters(motor_object);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f8bc 	bl	8001470 <reset_movement_counters>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <calculate_acceleration_coefficient>:

/*
 * Рассчитываем коэффициент ускорения
 */
void calculate_acceleration_coefficient(MotorMovementProfile_StructTypeDef* movement_profile)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	movement_profile->linear_acceleration_coefficient = (movement_profile->max_speed_step_per_ms -  movement_profile->min_speed_step_per_ms)/movement_profile->acceleration_duration_ms;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	ed93 7a04 	vldr	s14, [r3, #16]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edd3 7a03 	vldr	s15, [r3, #12]
 8001314:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edc3 7a05 	vstr	s15, [r3, #20]
	movement_profile->quadratic_acceleration_coefficient = (movement_profile->max_speed_step_per_ms -  movement_profile->min_speed_step_per_ms)/pow(movement_profile->acceleration_duration_ms, 2);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	ed93 7a04 	vldr	s14, [r3, #16]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	edd3 7a03 	vldr	s15, [r3, #12]
 800133a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133e:	ee17 0a90 	vmov	r0, s15
 8001342:	f7ff f8cd 	bl	80004e0 <__aeabi_f2d>
 8001346:	4604      	mov	r4, r0
 8001348:	460d      	mov	r5, r1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8a4 	bl	800049c <__aeabi_ui2d>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001390 <calculate_acceleration_coefficient+0x90>
 800135c:	ec43 2b10 	vmov	d0, r2, r3
 8001360:	f003 fb12 	bl	8004988 <pow>
 8001364:	ec53 2b10 	vmov	r2, r3, d0
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7ff fa3a 	bl	80007e4 <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fbba 	bl	8000af0 <__aeabi_d2uiz>
 800137c:	4602      	mov	r2, r0
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bdb0      	pop	{r4, r5, r7, pc}
 800138a:	bf00      	nop
 800138c:	f3af 8000 	nop.w
 8001390:	00000000 	.word	0x00000000
 8001394:	40000000 	.word	0x40000000

08001398 <cyclic_movement_step>:

/*
 * Циклическое движение мотора в режиме экспозиции
 */
void cyclic_movement_step(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	if (motor_object->step_impulses_distance_from_limit_switch <= 0)// если мы в крайней точке, ближайшей к начальному положению
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dc2e      	bgt.n	8001408 <cyclic_movement_step+0x70>
	{
		limit_switch_active(motor_object);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fa40 	bl	8001830 <limit_switch_active>
		if (!limit_switch_active(motor_object))
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fa3d 	bl	8001830 <limit_switch_active>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f083 0301 	eor.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <cyclic_movement_step+0x58>
		{
			motor_object->cyclic_movement_direction = MOVE_TO_COORD_ORIGIN;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
			motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_ORIGIN);
 80013ca:	2200      	movs	r2, #0
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f86f 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
			if (motor_object->step_impulses_distance_from_limit_switch < (0 - (motor_object->step_impulses_acceptable_error)))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013dc:	425b      	negs	r3, r3
 80013de:	429a      	cmp	r2, r3
 80013e0:	da12      	bge.n	8001408 <cyclic_movement_step+0x70>
			{
				error_code = LIMIT_SWITCH_ERROR;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <cyclic_movement_step+0xd0>)
 80013e4:	2202      	movs	r2, #2
 80013e6:	701a      	strb	r2, [r3, #0]
				device_current_state = DEVICE_ERROR;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <cyclic_movement_step+0xd4>)
 80013ea:	2208      	movs	r2, #8
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e00b      	b.n	8001408 <cyclic_movement_step+0x70>
			}
		}
		else
		{
			motor_object->cyclic_movement_direction = MOVE_TO_COORD_END;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
			motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_END);
 80013f8:	2201      	movs	r2, #1
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f858 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
			reset_movement_counters(motor_object);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f834 	bl	8001470 <reset_movement_counters>
		}
	}
	/*
	 * если мы находимся в промежутке между крайними положениями растра (ближнее и дальнее)
	 */
	if ((motor_object->step_impulses_distance_from_limit_switch > 0) && \
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	2b00      	cmp	r3, #0
 800140e:	dd15      	ble.n	800143c <cyclic_movement_step+0xa4>
		(motor_object->step_impulses_distance_from_limit_switch < movement_profile->far_distance_step_impulses))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
	if ((motor_object->step_impulses_distance_from_limit_switch > 0) && \
 8001418:	429a      	cmp	r2, r3
 800141a:	da0f      	bge.n	800143c <cyclic_movement_step+0xa4>
	{
		if (motor_object->cyclic_movement_direction == MOVE_TO_COORD_END)		// если выставлен флаг движения от начального положения
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001422:	2b01      	cmp	r3, #1
 8001424:	d105      	bne.n	8001432 <cyclic_movement_step+0x9a>
		{
			motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_END);										// делаем шаг от начального положения
 8001426:	2201      	movs	r2, #1
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f841 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
 8001430:	e004      	b.n	800143c <cyclic_movement_step+0xa4>
		}
		else
		{
			motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_ORIGIN);										// иначе делаем шаг в сторону начального положения
 8001432:	2200      	movs	r2, #0
 8001434:	6839      	ldr	r1, [r7, #0]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f83b 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
		}
	}
	if (motor_object->step_impulses_distance_from_limit_switch >= movement_profile->far_distance_step_impulses)						// если мы в крайней точке, дальней от начального положения
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	429a      	cmp	r2, r3
 8001446:	db0b      	blt.n	8001460 <cyclic_movement_step+0xc8>
	{
		motor_object->cyclic_movement_direction = MOVE_TO_COORD_ORIGIN;					// выставляем флаг движения к начальному положению
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_ORIGIN);											// делаем шаг в сторону начального положения
 8001450:	2200      	movs	r2, #0
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f82c 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
		reset_movement_counters(motor_object);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f808 	bl	8001470 <reset_movement_counters>
	}
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000310 	.word	0x20000310
 800146c:	20000188 	.word	0x20000188

08001470 <reset_movement_counters>:

/*
 * Сбрасываем счётчики движения
 */
void reset_movement_counters(MotorObject_StructTypeDef* motor_object)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	motor_object->ticks_before_next_step_counter = 0;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	651a      	str	r2, [r3, #80]	; 0x50
	motor_object->ticks_since_start_movement_counter = 0;
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	motor_object->step_impulses_for_acceleration_counter = 0;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	66da      	str	r2, [r3, #108]	; 0x6c
	motor_object->step_impulses_since_start_movement_counter = 0;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	661a      	str	r2, [r3, #96]	; 0x60
	motor_object->ticks_for_acceleration_counter = 0;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	669a      	str	r2, [r3, #104]	; 0x68
	motor_object->current_speed_step_per_ms = 0;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <motor_check_counter_and_make_step_to_direction>:

/*
 * Делаем шаг в заданном направлении
 */
void motor_check_counter_and_make_step_to_direction(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile, MotorMoveDirection_EnumTypeDef movement_direction)
{
 80014b2:	b5b0      	push	{r4, r5, r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	4613      	mov	r3, r2
 80014be:	71fb      	strb	r3, [r7, #7]
	motor_object->ticks_since_start_movement_counter = motor_object->ticks_since_start_movement_counter + 1;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80014c6:	1c54      	adds	r4, r2, #1
 80014c8:	f143 0500 	adc.w	r5, r3, #0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
	motor_object->ticks_before_next_step_counter = motor_object->ticks_before_next_step_counter - 1;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	651a      	str	r2, [r3, #80]	; 0x50
	if (movement_profile->acceleration_type != NO_ACCELERATION)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01f      	beq.n	8001524 <motor_check_counter_and_make_step_to_direction+0x72>
	{
		if ((movement_profile->far_distance_step_impulses - motor_object->step_impulses_since_start_movement_counter) >= motor_object->step_impulses_for_acceleration_counter)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	1ad2      	subs	r2, r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d310      	bcc.n	800151a <motor_check_counter_and_make_step_to_direction+0x68>
		{
			if (motor_object->current_speed_step_per_ms < movement_profile->max_speed_step_per_ms)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	edd3 7a04 	vldr	s15, [r3, #16]
 8001504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d50a      	bpl.n	8001524 <motor_check_counter_and_make_step_to_direction+0x72>
			{
				motor_object->ticks_for_acceleration_counter = motor_object->ticks_for_acceleration_counter + 1;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	669a      	str	r2, [r3, #104]	; 0x68
 8001518:	e004      	b.n	8001524 <motor_check_counter_and_make_step_to_direction+0x72>
			}
		}
		else
		{
			motor_object->ticks_for_acceleration_counter = motor_object->ticks_for_acceleration_counter - 1;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}

	if (motor_object->ticks_before_next_step_counter <= 0)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001528:	2b00      	cmp	r3, #0
 800152a:	dc12      	bgt.n	8001552 <motor_check_counter_and_make_step_to_direction+0xa0>
	{
		motor_object->motor_movement_direction = movement_direction;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		motor_direction_pin_set(motor_object);
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 f810 	bl	800155a <motor_direction_pin_set>
		check_limit_switch_and_make_step(motor_object);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 f84c 	bl	80015d8 <check_limit_switch_and_make_step>
		motor_object->step_impulses_since_start_movement_counter = motor_object->step_impulses_since_start_movement_counter + 1;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	661a      	str	r2, [r3, #96]	; 0x60
		calculate_ticks_per_next_step(motor_object, movement_profile);
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f87f 	bl	8001650 <calculate_ticks_per_next_step>
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bdb0      	pop	{r4, r5, r7, pc}

0800155a <motor_direction_pin_set>:

/*
 * выставляем пин направления мотора
 */
void motor_direction_pin_set(MotorObject_StructTypeDef* motor_object)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	switch (motor_object->motor_movement_direction)																// если направление движения
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <motor_direction_pin_set+0x18>
 800156c:	2b01      	cmp	r3, #1
 800156e:	d017      	beq.n	80015a0 <motor_direction_pin_set+0x46>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
		}
		break;
	}
	}
}
 8001570:	e02d      	b.n	80015ce <motor_direction_pin_set+0x74>
		if (motor_object->DIR_pin_logic_level_inverted)		// !! ifdef											// если логический уровень направления инвертирован аппаратно
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <motor_direction_pin_set+0x34>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69d8      	ldr	r0, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	8c1b      	ldrh	r3, [r3, #32]
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	f001 fc88 	bl	8002e9c <HAL_GPIO_WritePin>
		break;
 800158c:	e01f      	b.n	80015ce <motor_direction_pin_set+0x74>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_SET);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69d8      	ldr	r0, [r3, #28]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8c1b      	ldrh	r3, [r3, #32]
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	f001 fc7f 	bl	8002e9c <HAL_GPIO_WritePin>
		break;
 800159e:	e016      	b.n	80015ce <motor_direction_pin_set+0x74>
		if (motor_object->DIR_pin_logic_level_inverted)															// если логический уровень направления инвертирован аппаратно
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <motor_direction_pin_set+0x62>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_SET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69d8      	ldr	r0, [r3, #28]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	8c1b      	ldrh	r3, [r3, #32]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4619      	mov	r1, r3
 80015b6:	f001 fc71 	bl	8002e9c <HAL_GPIO_WritePin>
		break;
 80015ba:	e007      	b.n	80015cc <motor_direction_pin_set+0x72>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69d8      	ldr	r0, [r3, #28]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	8c1b      	ldrh	r3, [r3, #32]
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	f001 fc68 	bl	8002e9c <HAL_GPIO_WritePin>
		break;
 80015cc:	bf00      	nop
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <check_limit_switch_and_make_step>:

/*
 * проверяем состояние концевика и совершаем шаг
 */
void check_limit_switch_and_make_step(MotorObject_StructTypeDef* motor_object)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	if (motor_object->motor_movement_direction == MOVE_TO_COORD_ORIGIN)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d119      	bne.n	800161e <check_limit_switch_and_make_step+0x46>
	{
		if ((motor_object->limit_emergency_counter > motor_object->emergency_step_impulses_to_limit))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dd06      	ble.n	8001604 <check_limit_switch_and_make_step+0x2c>
		{
			error_code = LIMIT_SWITCH_ERROR;								// выставляем ошибку концевика (решаем, что концевик неисправен)
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <check_limit_switch_and_make_step+0x70>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	701a      	strb	r2, [r3, #0]
			device_current_state = DEVICE_ERROR;							// переключаем устройство в состояние ошибки
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <check_limit_switch_and_make_step+0x74>)
 80015fe:	2208      	movs	r2, #8
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	e00c      	b.n	800161e <check_limit_switch_and_make_step+0x46>
		}
		else
		{
			step_toggle(motor_object);																				// совершаем шаг
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f93d 	bl	8001884 <step_toggle>
			motor_object->step_impulses_distance_from_limit_switch = motor_object->step_impulses_distance_from_limit_switch - 1;		// декрементируем счётчик расстояния от начального положения
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
			motor_object->limit_emergency_counter = motor_object->limit_emergency_counter + 1;						// инкрементируем аварийный счётчик шагов
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
	if (motor_object->motor_movement_direction == MOVE_TO_COORD_END)											// если направлениение движения от начального положения
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10a      	bne.n	800163e <check_limit_switch_and_make_step+0x66>
	{
		step_toggle(motor_object);																				// совершаем шаг
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f92b 	bl	8001884 <step_toggle>
		motor_object->step_impulses_distance_from_limit_switch = motor_object->step_impulses_distance_from_limit_switch + 1;		// инкрементируем счётчик расстояния от начального положения
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
		motor_object->limit_emergency_counter = 0;																// обнуляем аварийный счётчик шагов
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	649a      	str	r2, [r3, #72]	; 0x48
	}
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000310 	.word	0x20000310
 800164c:	20000188 	.word	0x20000188

08001650 <calculate_ticks_per_next_step>:

/*
 * Вычислить количество тиков до следующего шага
 */
void calculate_ticks_per_next_step(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	switch (movement_profile->acceleration_type)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10e      	bne.n	8001680 <calculate_ticks_per_next_step+0x30>
	{
	case (NO_ACCELERATION):
	{
		motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/movement_profile->max_speed_step_per_ms;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	ed93 7a04 	vldr	s14, [r3, #16]
 800166e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001676:	ee17 2a90 	vmov	r2, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	651a      	str	r2, [r3, #80]	; 0x50
		break;
 800167e:	e060      	b.n	8001742 <calculate_ticks_per_next_step+0xf2>
	}
	default:
	{
		// если оставшееся количество шагов больше количества шагов для ускорения/замедления, мы либо ускоряемся, либо движемся с макс. скоростью
		if ((movement_profile->far_distance_step_impulses - motor_object->step_impulses_since_start_movement_counter) > motor_object->step_impulses_for_acceleration_counter)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	461a      	mov	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168a:	1ad2      	subs	r2, r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001690:	429a      	cmp	r2, r3
 8001692:	d93b      	bls.n	800170c <calculate_ticks_per_next_step+0xbc>
		{
			// если мы не достигли максимальной скорости, ускоряемся
			if (motor_object->current_speed_step_per_ms < movement_profile->max_speed_step_per_ms)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	edd3 7a04 	vldr	s15, [r3, #16]
 80016a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d521      	bpl.n	80016ee <calculate_ticks_per_next_step+0x9e>
			{
				motor_object->current_speed_step_per_ms = movement_time_function(motor_object->ticks_since_start_movement_counter, motor_object, movement_profile);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80016b0:	4613      	mov	r3, r2
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f84a 	bl	8001750 <movement_time_function>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/motor_object->current_speed_step_per_ms;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80016d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016da:	ee17 2a90 	vmov	r2, s15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	651a      	str	r2, [r3, #80]	; 0x50
				motor_object->step_impulses_for_acceleration_counter = motor_object->step_impulses_for_acceleration_counter + 1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	66da      	str	r2, [r3, #108]	; 0x6c
		else
		{
			motor_object->current_speed_step_per_ms = movement_time_function(motor_object->ticks_for_acceleration_counter, motor_object, movement_profile);
			motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/motor_object->current_speed_step_per_ms;
		}
		break;
 80016ec:	e028      	b.n	8001740 <calculate_ticks_per_next_step+0xf0>
				motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/movement_profile->max_speed_step_per_ms;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80016fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001702:	ee17 2a90 	vmov	r2, s15
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	651a      	str	r2, [r3, #80]	; 0x50
		break;
 800170a:	e019      	b.n	8001740 <calculate_ticks_per_next_step+0xf0>
			motor_object->current_speed_step_per_ms = movement_time_function(motor_object->ticks_for_acceleration_counter, motor_object, movement_profile);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f81b 	bl	8001750 <movement_time_function>
 800171a:	eef0 7a40 	vmov.f32	s15, s0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/motor_object->current_speed_step_per_ms;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001738:	ee17 2a90 	vmov	r2, s15
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	651a      	str	r2, [r3, #80]	; 0x50
		break;
 8001740:	bf00      	nop
	}
	}
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	0000      	movs	r0, r0
 800174c:	0000      	movs	r0, r0
	...

08001750 <movement_time_function>:

/*
 * Функция текущей скорости от времени, прошедшего с начала движения
 */
float movement_time_function(uint32_t ticks_value, MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	float calculated_speed_step_per_ms = 0;
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
	switch (movement_profile->acceleration_type)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d002      	beq.n	8001770 <movement_time_function+0x20>
 800176a:	2b02      	cmp	r3, #2
 800176c:	d017      	beq.n	800179e <movement_time_function+0x4e>
		break;
	}
	default:
	{

		break;
 800176e:	e051      	b.n	8001814 <movement_time_function+0xc4>
		calculated_speed_step_per_ms = ((ticks_value/motor_object->motor_timer_ticks_per_ms) * movement_profile->linear_acceleration_coefficient) + (movement_profile->min_speed_step_per_ms);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edd3 7a05 	vldr	s15, [r3, #20]
 800178a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edd3 7a03 	vldr	s15, [r3, #12]
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 800179c:	e03a      	b.n	8001814 <movement_time_function+0xc4>
		calculated_speed_step_per_ms = (pow((ticks_value/motor_object->motor_timer_ticks_per_ms), 2) * movement_profile->linear_acceleration_coefficient) + (movement_profile->min_speed_step_per_ms);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80017ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017b2:	ee16 0a90 	vmov	r0, s13
 80017b6:	f7fe fe93 	bl	80004e0 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001828 <movement_time_function+0xd8>
 80017c2:	ec43 2b10 	vmov	d0, r2, r3
 80017c6:	f003 f8df 	bl	8004988 <pow>
 80017ca:	ec55 4b10 	vmov	r4, r5, d0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe84 	bl	80004e0 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4620      	mov	r0, r4
 80017de:	4629      	mov	r1, r5
 80017e0:	f7fe fed6 	bl	8000590 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe75 	bl	80004e0 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe fd11 	bl	8000224 <__adddf3>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f991 	bl	8000b30 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	617b      	str	r3, [r7, #20]
		break;
 8001812:	bf00      	nop
	}
	}
	return calculated_speed_step_per_ms;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	ee07 3a90 	vmov	s15, r3
}
 800181a:	eeb0 0a67 	vmov.f32	s0, s15
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bdb0      	pop	{r4, r5, r7, pc}
 8001824:	f3af 8000 	nop.w
 8001828:	00000000 	.word	0x00000000
 800182c:	40000000 	.word	0x40000000

08001830 <limit_switch_active>:

/*
 * Опрашиваем и возрващаем состояние концевика
 */
_Bool limit_switch_active(MotorObject_StructTypeDef* motor_object)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	_Bool current_state;																				// флаг состояния концевика
	check_input_signal_state(&motor_object->limit_switch.limit_switch_IN_signal);						// опрашиваем состояние пина концевика
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fcc6 	bl	80011cc <check_input_signal_state>
	if (motor_object->limit_switch.limit_switch_logic_inverted)											// если логический уровень концевика инвертирован аппаратно
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7b1b      	ldrb	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00c      	beq.n	8001862 <limit_switch_active+0x32>
	{
		if (motor_object->limit_switch.limit_switch_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)	// если на пине концевика "0"
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7a1b      	ldrb	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <limit_switch_active+0x2c>
		{
			current_state = 1;																			// выставляем флаг концевика в "1"
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
			motor_object->step_impulses_distance_from_limit_switch = 0;									// обнуляем счётчик расстояния до концевика
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
 800185a:	e00e      	b.n	800187a <limit_switch_active+0x4a>
		}
		else
		{
			current_state = 0;																			// иначе выставляем флаг концевика в "0"
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e00b      	b.n	800187a <limit_switch_active+0x4a>
		}
	}
	else
	{
		if (motor_object->limit_switch.limit_switch_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)	// иначе если на пине концевика "0"
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7a1b      	ldrb	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <limit_switch_active+0x40>
		{
			current_state = 0;																			// выставляем флаг концевика в "0"
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e004      	b.n	800187a <limit_switch_active+0x4a>
		}
		else
		{
			current_state = 1;																			// иначе выставляем флаг концевика в "1"
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
			motor_object->step_impulses_distance_from_limit_switch = 0;									// обнуляем счётчик расстояния до концевика
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
	return current_state;																				// возвращаем флаг состояния концевика
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <step_toggle>:

/*
 * Совершаем шаг
 */
void step_toggle(MotorObject_StructTypeDef* motor_object)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	switch (motor_object->step_pin_current_phase)															// если текущее логическое состояние на пине шага
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <step_toggle+0x18>
 8001896:	2b01      	cmp	r3, #1
 8001898:	d00d      	beq.n	80018b6 <step_toggle+0x32>
		HAL_GPIO_WritePin(motor_object->motor_signals.STEP_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.STEP_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
		motor_object->step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
		break;
	}
	}
}
 800189a:	e019      	b.n	80018d0 <step_toggle+0x4c>
		HAL_GPIO_WritePin(motor_object->motor_signals.STEP_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.STEP_OUT_signal.signal_pin.pin_number, GPIO_PIN_SET);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6918      	ldr	r0, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	8a9b      	ldrh	r3, [r3, #20]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	f001 faf8 	bl	8002e9c <HAL_GPIO_WritePin>
		motor_object->step_pin_current_phase = STEP_HIGH_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "1"
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		break;
 80018b4:	e00c      	b.n	80018d0 <step_toggle+0x4c>
		HAL_GPIO_WritePin(motor_object->motor_signals.STEP_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.STEP_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6918      	ldr	r0, [r3, #16]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	8a9b      	ldrh	r3, [r3, #20]
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	f001 faeb 	bl	8002e9c <HAL_GPIO_WritePin>
		motor_object->step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		break;
 80018ce:	bf00      	nop
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <convert_ms_to_ticks>:

/*
 * Конвертируем миллисекунды в количество тиков
 */
uint32_t convert_ms_to_ticks(uint32_t seconds, uint32_t ticks_per_sec)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	uint32_t ticks_per_time;
	ticks_per_time = seconds*ticks_per_sec;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	60fb      	str	r3, [r7, #12]
	return ticks_per_time;
 80018ec:	68fb      	ldr	r3, [r7, #12]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <device_init>:
/*
 * Инициализация устройства
 */

void device_init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	device_current_state = DEVICE_STARTS;						// выставляем состояние устройства: устройство стартует
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <device_init+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
	input_pins_init();											// инициализируем сигналы (указываем пины и порты, инициализируем единый массив сигналов)
 8001906:	f000 f835 	bl	8001974 <input_pins_init>
	output_signals_state_init(LOGIC_LEVEL_HIGH);				// выставляем состояние выходных сигналов
 800190a:	2001      	movs	r0, #1
 800190c:	f000 fa24 	bl	8001d58 <output_signals_state_init>
	input_signals_state_update();								// считываем состояние входных сигналов
 8001910:	f000 f9ec 	bl	8001cec <input_signals_state_update>
	device_modules_init();										// инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1, DIP-переключатели)
 8001914:	f000 f8a4 	bl	8001a60 <device_modules_init>
	buttons_state_update();										// обновляем состояние кнопок
 8001918:	f000 fa6e 	bl	8001df8 <buttons_state_update>
	set_grid_out_signal();										// выставляем светодиоды датчика типа растра
 800191c:	f000 fbd4 	bl	80020c8 <set_grid_out_signal>
	buckybreak_laser_disable();									// выключаем сигнал buckybreak и лазер
 8001920:	f000 fc32 	bl	8002188 <buckybreak_laser_disable>
	dip_switch_state_update();									// проверка направления и скорости движения
 8001924:	f000 f982 	bl	8001c2c <dip_switch_state_update>
	bucky_ready_dsable();
 8001928:	f000 fcac 	bl	8002284 <bucky_ready_dsable>
	error_code = NO_ERROR;										// выставляем отсутствие ошибки
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <device_init+0x44>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
	signals_check_timer_interrupts_start();						// запускаем таймер считывания состояний сигналов
 8001932:	f000 fa51 	bl	8001dd8 <signals_check_timer_interrupts_start>
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000188 	.word	0x20000188
 8001940:	20000310 	.word	0x20000310

08001944 <enable_pin_set>:

void enable_pin_set(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	if (ENABLE_PIN_LOGIC_LEVEL_INVERTED)
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_LOW);
 8001948:	2200      	movs	r2, #0
 800194a:	2120      	movs	r1, #32
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <enable_pin_set+0x14>)
 800194e:	f7ff fc21 	bl	8001194 <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_HIGH);
	}
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	48000400 	.word	0x48000400

0800195c <enable_pin_clear>:

void enable_pin_clear(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	if (ENABLE_PIN_LOGIC_LEVEL_INVERTED)
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_HIGH);
 8001960:	2201      	movs	r2, #1
 8001962:	2120      	movs	r1, #32
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <enable_pin_clear+0x14>)
 8001966:	f7ff fc15 	bl	8001194 <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_LOW);
	}
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	48000400 	.word	0x48000400

08001974 <input_pins_init>:

/*
 * Определяем входные пины, исходя из инициализации, созданной конфигуратором пинов
 */
void input_pins_init(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <input_pins_init+0xc8>)
 800197a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800197e:	60da      	str	r2, [r3, #12]
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.pin_number = GRID_180_DETECT_Pin;					// пин датчика Холла (растр типа 180)
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <input_pins_init+0xc8>)
 8001982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001986:	821a      	strh	r2, [r3, #16]

	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <input_pins_init+0xc8>)
 800198a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800198e:	601a      	str	r2, [r3, #0]
	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.pin_number = GRID_120_DETECT_Pin;					// пин датчика Холла (растр типа 120)
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <input_pins_init+0xc8>)
 8001992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001996:	809a      	strh	r2, [r3, #4]

	grid_supply_button.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <input_pins_init+0xcc>)
 800199a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800199e:	601a      	str	r2, [r3, #0]
	grid_supply_button.button_signal.signal_pin.pin_number = GRID_BUTTON_Pin;							// пин кнопки подачи растра
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <input_pins_init+0xcc>)
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	809a      	strh	r2, [r3, #4]

	ON_TOMO_IN_signal.signal_pin.GPIO_port_pointer = ON_TOMO_GPIO_Port;
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <input_pins_init+0xd0>)
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <input_pins_init+0xd4>)
 80019aa:	601a      	str	r2, [r3, #0]
	ON_TOMO_IN_signal.signal_pin.pin_number = ON_TOMO_Pin;												// пин сигнала ON_TOMO
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <input_pins_init+0xd0>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	809a      	strh	r2, [r3, #4]

	BUCKY_CALL_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <input_pins_init+0xd8>)
 80019b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019b8:	601a      	str	r2, [r3, #0]
	BUCKY_CALL_IN_signal.signal_pin.pin_number = BUCKY_CALL_Pin;										// пин сигнала BUCKYCALL
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <input_pins_init+0xd8>)
 80019bc:	2240      	movs	r2, #64	; 0x40
 80019be:	809a      	strh	r2, [r3, #4]

	pushbutton_buckybrake.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <input_pins_init+0xdc>)
 80019c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019c6:	601a      	str	r2, [r3, #0]
	pushbutton_buckybrake.button_signal.signal_pin.pin_number = PUSHBUTTON_BUCKYBRAKE_Pin;				// пин кнопки тормоза кассетоприёмника
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <input_pins_init+0xdc>)
 80019ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019ce:	809a      	strh	r2, [r3, #4]

	motor_instance_1.limit_switch.limit_switch_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <input_pins_init+0xe0>)
 80019d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019d6:	601a      	str	r2, [r3, #0]
	motor_instance_1.limit_switch.limit_switch_IN_signal.signal_pin.pin_number = GRID_END_POINT_Pin;	// пин концевика
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <input_pins_init+0xe0>)
 80019da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019de:	809a      	strh	r2, [r3, #4]
	motor_instance_1.motor_signals.STEP_OUT_signal.signal_pin.GPIO_port_pointer = GPIOB;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <input_pins_init+0xe0>)
 80019e2:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <input_pins_init+0xe4>)
 80019e4:	611a      	str	r2, [r3, #16]
	motor_instance_1.motor_signals.STEP_OUT_signal.signal_pin.pin_number = STEP_Pin;
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <input_pins_init+0xe0>)
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	829a      	strh	r2, [r3, #20]
	motor_instance_1.motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer = GPIOB;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <input_pins_init+0xe0>)
 80019ee:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <input_pins_init+0xe4>)
 80019f0:	61da      	str	r2, [r3, #28]
	motor_instance_1.motor_signals.DIR_OUT_signal.signal_pin.pin_number = DIR_Pin;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <input_pins_init+0xe0>)
 80019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f8:	841a      	strh	r2, [r3, #32]
	motor_instance_1.motor_signals.ENABLE_OUT_signal.signal_pin.GPIO_port_pointer = GPIOB;
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <input_pins_init+0xe0>)
 80019fc:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <input_pins_init+0xe4>)
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
	motor_instance_1.motor_signals.ENABLE_OUT_signal.signal_pin.pin_number = ENABLE_Pin;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <input_pins_init+0xe0>)
 8001a02:	2220      	movs	r2, #32
 8001a04:	859a      	strh	r2, [r3, #44]	; 0x2c

	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <input_pins_init+0xe8>)
 8001a08:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a0c:	601a      	str	r2, [r3, #0]
	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.pin_number = CONFIG_1_Pin;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <input_pins_init+0xe8>)
 8001a10:	2204      	movs	r2, #4
 8001a12:	809a      	strh	r2, [r3, #4]

	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <input_pins_init+0xe8>)
 8001a16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a1a:	60da      	str	r2, [r3, #12]
	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.pin_number = CONFIG_2_Pin;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <input_pins_init+0xe8>)
 8001a1e:	2202      	movs	r2, #2
 8001a20:	821a      	strh	r2, [r3, #16]

	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <input_pins_init+0xe8>)
 8001a24:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a28:	619a      	str	r2, [r3, #24]
	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.pin_number = CONFIG_3_Pin;
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <input_pins_init+0xe8>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	839a      	strh	r2, [r3, #28]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000268 	.word	0x20000268
 8001a40:	20000168 	.word	0x20000168
 8001a44:	20000314 	.word	0x20000314
 8001a48:	48001400 	.word	0x48001400
 8001a4c:	2000018c 	.word	0x2000018c
 8001a50:	200001e4 	.word	0x200001e4
 8001a54:	200000a0 	.word	0x200000a0
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	200001bc 	.word	0x200001bc

08001a60 <device_modules_init>:

/*
 * Инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1)
 */
void device_modules_init(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	limit_switch_enabled_once = 0;
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <device_modules_init+0x174>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
	motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;					// даём двигателю задание занять начальное положение
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	; (8001bd8 <device_modules_init+0x178>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
	motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;							// выставляем флаг, что мотор находится в движении
 8001a70:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <device_modules_init+0x17c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
	exposition_movement_direction = EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION;	// задаём начальное направление циклического движения при экспозиции
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <device_modules_init+0x180>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
	grid_supply_button.button_released_default_signal_level = LOGIC_LEVEL_LOW;			// выставляем флаг, что при отпущенной кнопке на пине "1"
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <device_modules_init+0x184>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	731a      	strb	r2, [r3, #12]
	grid_supply_button.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 8001a82:	4b58      	ldr	r3, [pc, #352]	; (8001be4 <device_modules_init+0x184>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	61da      	str	r2, [r3, #28]
	grid_supply_button.button_bounce_filter_counts = BUTTON_BOUNCE_FILTER_COUNTS;
 8001a88:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <device_modules_init+0x184>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
	grid_supply_button.button_long_press_ms = BUTTON_LONG_PRESS_DURATION_SEC;
 8001a8e:	4b55      	ldr	r3, [pc, #340]	; (8001be4 <device_modules_init+0x184>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	615a      	str	r2, [r3, #20]
	ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;											// выставляем флаг, что сигнала ON_TOMO не было
 8001a94:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <device_modules_init+0x188>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
	bucky_ready_delay_counter = 0;														// обнуляем счётчик шагов, после которых выставляем BUCKY_READY в "1"
 8001a9a:	4b54      	ldr	r3, [pc, #336]	; (8001bec <device_modules_init+0x18c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
	pushbutton_buckybrake.button_released_default_signal_level = LOGIC_LEVEL_LOW;		// выставляем флаг, что при отпущенной кнопке на пине "1"
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <device_modules_init+0x190>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	731a      	strb	r2, [r3, #12]
	pushbutton_buckybrake.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 8001aa6:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <device_modules_init+0x190>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]
	pushbutton_buckybrake.button_bounce_filter_counts = BUTTON_BOUNCE_FILTER_COUNTS;
 8001aac:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <device_modules_init+0x190>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
	pushbutton_buckybrake.button_long_press_ms = BUTTON_LONG_PRESS_DURATION_SEC;
 8001ab2:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <device_modules_init+0x190>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	615a      	str	r2, [r3, #20]

	motor_instance_1.limit_switch.limit_switch_logic_inverted = LIMIT_SWITCH_LOGIC_LEVEL_INVERTED;
 8001ab8:	4b4e      	ldr	r3, [pc, #312]	; (8001bf4 <device_modules_init+0x194>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	731a      	strb	r2, [r3, #12]
	motor_instance_1.emergency_step_impulses_to_limit = EMERGENCY_STEP_IMPULSES_TO_LIMIT;
 8001abe:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <device_modules_init+0x194>)
 8001ac0:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
	motor_instance_1.DIR_pin_logic_level_inverted = DIR_PIN_LOGIC_LEVEL_INVERTED;
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <device_modules_init+0x194>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	motor_instance_1.motor_timer_ticks_per_ms = MOTOR_TIMER_TICKS_PER_MS;
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <device_modules_init+0x194>)
 8001ad0:	4a49      	ldr	r2, [pc, #292]	; (8001bf8 <device_modules_init+0x198>)
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40

	motor_instance_1.step_impulses_acceptable_error = STEP_IMPULSES_ACCEPTABLE_ERROR;
 8001ad4:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <device_modules_init+0x194>)
 8001ad6:	2264      	movs	r2, #100	; 0x64
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
	motor_instance_1.step_impulses_distance_from_limit_switch = STEP_IMPULSES_DISTANCE_INITIAL;
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <device_modules_init+0x194>)
 8001adc:	f640 5248 	movw	r2, #3400	; 0xd48
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
	motor_instance_1.limit_emergency_counter = 0;
 8001ae2:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <device_modules_init+0x194>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	649a      	str	r2, [r3, #72]	; 0x48
	motor_instance_1.motor_movement_direction = MOVE_TO_COORD_END;
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <device_modules_init+0x194>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	motor_instance_1.step_pin_current_phase = STEP_LOW_PHASE;
 8001af0:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <device_modules_init+0x194>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	motor_instance_1.ticks_before_next_step_counter = 0;
 8001af8:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <device_modules_init+0x194>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	651a      	str	r2, [r3, #80]	; 0x50
	motor_instance_1.ticks_since_start_movement_counter = 0;
 8001afe:	493d      	ldr	r1, [pc, #244]	; (8001bf4 <device_modules_init+0x194>)
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	motor_instance_1.step_impulses_since_start_movement_counter = 0;
 8001b0c:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <device_modules_init+0x194>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	661a      	str	r2, [r3, #96]	; 0x60
	motor_instance_1.current_speed_step_per_ms = 0;
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <device_modules_init+0x194>)
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	665a      	str	r2, [r3, #100]	; 0x64
	motor_instance_1.ticks_for_acceleration_counter = 0;
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <device_modules_init+0x194>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	669a      	str	r2, [r3, #104]	; 0x68
	motor_instance_1.step_impulses_for_acceleration_counter = 0;
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <device_modules_init+0x194>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	66da      	str	r2, [r3, #108]	; 0x6c
	motor_instance_1.cyclic_movement_direction = MOVE_TO_COORD_END;
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <device_modules_init+0x194>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	movement_profile_1_default.acceleration_type = NO_ACCELERATION;
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <device_modules_init+0x19c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
	movement_profile_1_default.short_distance_step_impulses = SHORT_DISTANCE_STEP_IMPULSES;
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <device_modules_init+0x19c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
	movement_profile_1_default.far_distance_step_impulses = FAR_DISTANCE_STEP_IMPULSES;
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <device_modules_init+0x19c>)
 8001b3c:	f240 7222 	movw	r2, #1826	; 0x722
 8001b40:	609a      	str	r2, [r3, #8]
	movement_profile_1_default.min_speed_step_per_ms = CONSTANT_SPEED_STEP_PER_MS;
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <device_modules_init+0x19c>)
 8001b44:	4a2e      	ldr	r2, [pc, #184]	; (8001c00 <device_modules_init+0x1a0>)
 8001b46:	60da      	str	r2, [r3, #12]
	movement_profile_1_default.max_speed_step_per_ms = CONSTANT_SPEED_STEP_PER_MS;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <device_modules_init+0x19c>)
 8001b4a:	4a2d      	ldr	r2, [pc, #180]	; (8001c00 <device_modules_init+0x1a0>)
 8001b4c:	611a      	str	r2, [r3, #16]
	movement_profile_1_default.linear_acceleration_coefficient = LINEAR_ACCELERATION_COEFFICIENT_INITIAL;
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <device_modules_init+0x19c>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
	movement_profile_1_default.quadratic_acceleration_coefficient = QUADRATIC_ACCELERATION_COEFFICIENT_INITIAL;
 8001b56:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <device_modules_init+0x19c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
	movement_profile_1_default.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_00;
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <device_modules_init+0x19c>)
 8001b5e:	2228      	movs	r2, #40	; 0x28
 8001b60:	61da      	str	r2, [r3, #28]

	movement_profile_2_exposition.acceleration_type = LINEAR_ACCELERATION;
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <device_modules_init+0x1a4>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
	movement_profile_2_exposition.short_distance_step_impulses = SHORT_DISTANCE_STEP_IMPULSES;
 8001b68:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <device_modules_init+0x1a4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	605a      	str	r2, [r3, #4]
	movement_profile_2_exposition.far_distance_step_impulses = FAR_DISTANCE_STEP_IMPULSES;
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <device_modules_init+0x1a4>)
 8001b70:	f240 7222 	movw	r2, #1826	; 0x722
 8001b74:	609a      	str	r2, [r3, #8]
	movement_profile_2_exposition.min_speed_step_per_ms = MIN_SPEED_STEP_PER_MS_ALL_MODES;
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <device_modules_init+0x1a4>)
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <device_modules_init+0x1a8>)
 8001b7a:	60da      	str	r2, [r3, #12]
	movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_00;
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <device_modules_init+0x1a4>)
 8001b7e:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <device_modules_init+0x1ac>)
 8001b80:	611a      	str	r2, [r3, #16]
	movement_profile_2_exposition.linear_acceleration_coefficient = LINEAR_ACCELERATION_COEFFICIENT_INITIAL;
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <device_modules_init+0x1a4>)
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
	movement_profile_2_exposition.quadratic_acceleration_coefficient = QUADRATIC_ACCELERATION_COEFFICIENT_INITIAL;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <device_modules_init+0x1a4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
	movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_00;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <device_modules_init+0x1a4>)
 8001b92:	2228      	movs	r2, #40	; 0x28
 8001b94:	61da      	str	r2, [r3, #28]

	movement_profile_3_supply.acceleration_type = NO_ACCELERATION;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <device_modules_init+0x1b0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	movement_profile_3_supply.short_distance_step_impulses = SHORT_DISTANCE_STEP_IMPULSES;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <device_modules_init+0x1b0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
	movement_profile_3_supply.far_distance_step_impulses = RASTER_SUPPLY_DISTANCE_STEP_IMPULSES;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <device_modules_init+0x1b0>)
 8001ba4:	f240 7291 	movw	r2, #1937	; 0x791
 8001ba8:	609a      	str	r2, [r3, #8]
	movement_profile_3_supply.min_speed_step_per_ms = RASTER_SUPPLY_SPEED_STEP_PER_MS;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <device_modules_init+0x1b0>)
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <device_modules_init+0x1b4>)
 8001bae:	60da      	str	r2, [r3, #12]
	movement_profile_3_supply.max_speed_step_per_ms = RASTER_SUPPLY_SPEED_STEP_PER_MS;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <device_modules_init+0x1b0>)
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <device_modules_init+0x1b4>)
 8001bb4:	611a      	str	r2, [r3, #16]
	movement_profile_3_supply.linear_acceleration_coefficient = LINEAR_ACCELERATION_COEFFICIENT_INITIAL;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <device_modules_init+0x1b0>)
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
	movement_profile_3_supply.quadratic_acceleration_coefficient = QUADRATIC_ACCELERATION_COEFFICIENT_INITIAL;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <device_modules_init+0x1b0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
	movement_profile_3_supply.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_00;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <device_modules_init+0x1b0>)
 8001bc6:	2228      	movs	r2, #40	; 0x28
 8001bc8:	61da      	str	r2, [r3, #28]
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	20000280 	.word	0x20000280
 8001bd8:	20000198 	.word	0x20000198
 8001bdc:	20000099 	.word	0x20000099
 8001be0:	20000098 	.word	0x20000098
 8001be4:	20000168 	.word	0x20000168
 8001be8:	200001e0 	.word	0x200001e0
 8001bec:	20000118 	.word	0x20000118
 8001bf0:	200001e4 	.word	0x200001e4
 8001bf4:	200000a0 	.word	0x200000a0
 8001bf8:	43480000 	.word	0x43480000
 8001bfc:	2000019c 	.word	0x2000019c
 8001c00:	4029999a 	.word	0x4029999a
 8001c04:	200002d0 	.word	0x200002d0
 8001c08:	4048d4fe 	.word	0x4048d4fe
 8001c0c:	41111eb8 	.word	0x41111eb8
 8001c10:	200002f0 	.word	0x200002f0
 8001c14:	407e147b 	.word	0x407e147b

08001c18 <check_input_signals>:

/*
 * Обновляем состояние входных сигналов и аппаратных модулей
 */
void check_input_signals(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	input_signals_state_update();					// считываем состояние входов, обновляем их состояние в объекте устройства
 8001c1c:	f000 f866 	bl	8001cec <input_signals_state_update>
	buttons_state_update();							// обновляем состояние аппаратных модулей
 8001c20:	f000 f8ea 	bl	8001df8 <buttons_state_update>
	read_input_signals_and_set_device_state();		// изменяем состояние устройства в зависимости от входных сигналов
 8001c24:	f000 f978 	bl	8001f18 <read_input_signals_and_set_device_state>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <dip_switch_state_update>:

void dip_switch_state_update(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001c32:	7a1b      	ldrb	r3, [r3, #8]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d109      	bne.n	8001c4c <dip_switch_state_update+0x20>
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001c3a:	7d1b      	ldrb	r3, [r3, #20]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <dip_switch_state_update+0x20>
	{
		movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_00;
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <dip_switch_state_update+0xa8>)
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <dip_switch_state_update+0xac>)
 8001c44:	611a      	str	r2, [r3, #16]
		movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_00;
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <dip_switch_state_update+0xa8>)
 8001c48:	2228      	movs	r2, #40	; 0x28
 8001c4a:	61da      	str	r2, [r3, #28]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001c4e:	7a1b      	ldrb	r3, [r3, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d109      	bne.n	8001c68 <dip_switch_state_update+0x3c>
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001c56:	7d1b      	ldrb	r3, [r3, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <dip_switch_state_update+0x3c>
	{
		movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_01;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <dip_switch_state_update+0xa8>)
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <dip_switch_state_update+0xb0>)
 8001c60:	611a      	str	r2, [r3, #16]
		movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_01;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <dip_switch_state_update+0xa8>)
 8001c64:	2220      	movs	r2, #32
 8001c66:	61da      	str	r2, [r3, #28]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001c6a:	7a1b      	ldrb	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <dip_switch_state_update+0x58>
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001c72:	7d1b      	ldrb	r3, [r3, #20]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <dip_switch_state_update+0x58>
	{
		movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_10;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <dip_switch_state_update+0xa8>)
 8001c7a:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <dip_switch_state_update+0xb4>)
 8001c7c:	611a      	str	r2, [r3, #16]
		movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_10;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <dip_switch_state_update+0xa8>)
 8001c80:	222b      	movs	r2, #43	; 0x2b
 8001c82:	61da      	str	r2, [r3, #28]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001c86:	7a1b      	ldrb	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d109      	bne.n	8001ca0 <dip_switch_state_update+0x74>
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001c8e:	7d1b      	ldrb	r3, [r3, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <dip_switch_state_update+0x74>
	{
		movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_11;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <dip_switch_state_update+0xa8>)
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <dip_switch_state_update+0xb8>)
 8001c98:	611a      	str	r2, [r3, #16]
		movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_11;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <dip_switch_state_update+0xa8>)
 8001c9c:	2234      	movs	r2, #52	; 0x34
 8001c9e:	61da      	str	r2, [r3, #28]
	}
	switch (DIP_switch.DIP_SWITCH_3_IN_signal.signal_logic_level)
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <dip_switch_state_update+0xa4>)
 8001ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <dip_switch_state_update+0x84>
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <dip_switch_state_update+0x8e>
	{
		motor_instance_1.DIR_pin_logic_level_inverted = 0;
		break;
	}
	}
}
 8001cae:	e009      	b.n	8001cc4 <dip_switch_state_update+0x98>
		motor_instance_1.DIR_pin_logic_level_inverted = 1;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <dip_switch_state_update+0xbc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		break;
 8001cb8:	e004      	b.n	8001cc4 <dip_switch_state_update+0x98>
		motor_instance_1.DIR_pin_logic_level_inverted = 0;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <dip_switch_state_update+0xbc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		break;
 8001cc2:	bf00      	nop
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	200001bc 	.word	0x200001bc
 8001cd4:	200002d0 	.word	0x200002d0
 8001cd8:	41111eb8 	.word	0x41111eb8
 8001cdc:	40fe0419 	.word	0x40fe0419
 8001ce0:	41201893 	.word	0x41201893
 8001ce4:	416420c5 	.word	0x416420c5
 8001ce8:	200000a0 	.word	0x200000a0

08001cec <input_signals_state_update>:
/*
 * Опрашиваем состояние входных сигналов
 */

void input_signals_state_update(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	check_input_signal_state(&grid_sensor.GRID_180_DETECT_IN_signal);
 8001cf0:	480f      	ldr	r0, [pc, #60]	; (8001d30 <input_signals_state_update+0x44>)
 8001cf2:	f7ff fa6b 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&grid_sensor.GRID_120_DETECT_IN_signal);
 8001cf6:	480f      	ldr	r0, [pc, #60]	; (8001d34 <input_signals_state_update+0x48>)
 8001cf8:	f7ff fa68 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&grid_supply_button.button_signal);
 8001cfc:	480e      	ldr	r0, [pc, #56]	; (8001d38 <input_signals_state_update+0x4c>)
 8001cfe:	f7ff fa65 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&ON_TOMO_IN_signal);
 8001d02:	480e      	ldr	r0, [pc, #56]	; (8001d3c <input_signals_state_update+0x50>)
 8001d04:	f7ff fa62 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&BUCKY_CALL_IN_signal);
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <input_signals_state_update+0x54>)
 8001d0a:	f7ff fa5f 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&pushbutton_buckybrake.button_signal);
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <input_signals_state_update+0x58>)
 8001d10:	f7ff fa5c 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&motor_instance_1.limit_switch.limit_switch_IN_signal);
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <input_signals_state_update+0x5c>)
 8001d16:	f7ff fa59 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_1_IN_signal);
 8001d1a:	480c      	ldr	r0, [pc, #48]	; (8001d4c <input_signals_state_update+0x60>)
 8001d1c:	f7ff fa56 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_2_IN_signal);
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <input_signals_state_update+0x64>)
 8001d22:	f7ff fa53 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_3_IN_signal);
 8001d26:	480b      	ldr	r0, [pc, #44]	; (8001d54 <input_signals_state_update+0x68>)
 8001d28:	f7ff fa50 	bl	80011cc <check_input_signal_state>
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000274 	.word	0x20000274
 8001d34:	20000268 	.word	0x20000268
 8001d38:	20000168 	.word	0x20000168
 8001d3c:	20000314 	.word	0x20000314
 8001d40:	2000018c 	.word	0x2000018c
 8001d44:	200001e4 	.word	0x200001e4
 8001d48:	200000a0 	.word	0x200000a0
 8001d4c:	200001bc 	.word	0x200001bc
 8001d50:	200001c8 	.word	0x200001c8
 8001d54:	200001d4 	.word	0x200001d4

08001d58 <output_signals_state_init>:
/*
 * Выставляем одно состояние на всех выходных пинах
 */

void output_signals_state_init(SignalLogicLevel_EnumTypeDef signal_level_to_set)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
	set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, signal_level_to_set);
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	461a      	mov	r2, r3
 8001d66:	2120      	movs	r1, #32
 8001d68:	481a      	ldr	r0, [pc, #104]	; (8001dd4 <output_signals_state_init+0x7c>)
 8001d6a:	f7ff fa13 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, signal_level_to_set);
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	461a      	mov	r2, r3
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <output_signals_state_init+0x7c>)
 8001d76:	f7ff fa0d 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, signal_level_to_set);
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <output_signals_state_init+0x7c>)
 8001d84:	f7ff fa06 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, signal_level_to_set);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4811      	ldr	r0, [pc, #68]	; (8001dd4 <output_signals_state_init+0x7c>)
 8001d90:	f7ff fa00 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, signal_level_to_set);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	461a      	mov	r2, r3
 8001d98:	2108      	movs	r1, #8
 8001d9a:	480e      	ldr	r0, [pc, #56]	; (8001dd4 <output_signals_state_init+0x7c>)
 8001d9c:	f7ff f9fa 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, signal_level_to_set);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	461a      	mov	r2, r3
 8001da4:	2120      	movs	r1, #32
 8001da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001daa:	f7ff f9f3 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, signal_level_to_set);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	461a      	mov	r2, r3
 8001db2:	2108      	movs	r1, #8
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db8:	f7ff f9ec 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, signal_level_to_set);
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f7ff f9e5 	bl	8001194 <set_output_signal_state>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	48000400 	.word	0x48000400

08001dd8 <signals_check_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым будем опрашивать состояние входных сигналов
 */
void signals_check_timer_interrupts_start(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(SIGNALS_CHECK_TIMER_POINTER);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <signals_check_timer_interrupts_start+0x10>)
 8001dde:	f002 f86d 	bl	8003ebc <HAL_TIM_Base_Start_IT>
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000284 	.word	0x20000284

08001dec <signals_check_timer_interrupt_handler>:

/*
 * ОБработчик прерываний таймера, отвечающего за опрос входных сигналов
 */
void signals_check_timer_interrupt_handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	check_input_signals();
 8001df0:	f7ff ff12 	bl	8001c18 <check_input_signals>
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <buttons_state_update>:

/*
 * Обновляем состояние кнопок
 */
void buttons_state_update(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	check_and_update_button_state(&grid_supply_button, SIGNALS_CHECK_TIMER_TICKS_PER_SEC);
 8001dfc:	210a      	movs	r1, #10
 8001dfe:	4804      	ldr	r0, [pc, #16]	; (8001e10 <buttons_state_update+0x18>)
 8001e00:	f7ff fa03 	bl	800120a <check_and_update_button_state>
	check_and_update_button_state(&pushbutton_buckybrake, SIGNALS_CHECK_TIMER_TICKS_PER_SEC);
 8001e04:	210a      	movs	r1, #10
 8001e06:	4803      	ldr	r0, [pc, #12]	; (8001e14 <buttons_state_update+0x1c>)
 8001e08:	f7ff f9ff 	bl	800120a <check_and_update_button_state>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000168 	.word	0x20000168
 8001e14:	200001e4 	.word	0x200001e4

08001e18 <device_error_handler>:

/*
 * Обработчик ошибок
 */
void device_error_handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	switch (error_code)					// если код ошибки
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <device_error_handler+0xd8>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d863      	bhi.n	8001eec <device_error_handler+0xd4>
 8001e24:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <device_error_handler+0x14>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e41 	.word	0x08001e41
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001e91 	.word	0x08001e91
 8001e38:	08001ea7 	.word	0x08001ea7
 8001e3c:	08001ebf 	.word	0x08001ebf
	{
	case NO_ERROR:						// если нет ошибки
	{
		device_current_state = DEVICE_STANDBY;	// возвращаемся в состояние ожидания
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <device_error_handler+0xdc>)
 8001e42:	2202      	movs	r2, #2
 8001e44:	701a      	strb	r2, [r3, #0]
		break;
 8001e46:	e051      	b.n	8001eec <device_error_handler+0xd4>
	}
	case GRID_TYPE_ERROR:				// если ошибка типа растра
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_120_OUT_PIN
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f7ff f9a0 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_180_OUT_PIN
 8001e54:	2201      	movs	r2, #1
 8001e56:	2110      	movs	r1, #16
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f7ff f99a 	bl	8001194 <set_output_signal_state>

		/*
		 * если отсутствует растр типа 120 и типа 180
		 */
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <device_error_handler+0xe0>)
 8001e62:	7a1b      	ldrb	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d13a      	bne.n	8001ede <device_error_handler+0xc6>
				(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <device_error_handler+0xe0>)
 8001e6a:	7d1b      	ldrb	r3, [r3, #20]
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d136      	bne.n	8001ede <device_error_handler+0xc6>
		{
			set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_120_OUT_PIN
 8001e70:	2200      	movs	r2, #0
 8001e72:	2108      	movs	r1, #8
 8001e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e78:	f7ff f98c 	bl	8001194 <set_output_signal_state>
			set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_180_OUT_PIN
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2110      	movs	r1, #16
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f7ff f986 	bl	8001194 <set_output_signal_state>
			error_code = NO_ERROR;																	// выставляем флаг отсутствия ошибки
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <device_error_handler+0xd8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e8e:	e026      	b.n	8001ede <device_error_handler+0xc6>
	}
	case LIMIT_SWITCH_ERROR:			// если ошибка концевика
	{
		if (motor_movement_purpose != MOTOR_PURPOSE_EMERGENCY_SUPPLY)
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <device_error_handler+0xe4>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d024      	beq.n	8001ee2 <device_error_handler+0xca>
		{
			motor_instance_1.step_impulses_distance_from_limit_switch = 0;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <device_error_handler+0xe8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
			motor_movement_purpose = MOTOR_PURPOSE_EMERGENCY_SUPPLY;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <device_error_handler+0xe4>)
 8001ea0:	2206      	movs	r2, #6
 8001ea2:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001ea4:	e01d      	b.n	8001ee2 <device_error_handler+0xca>
	case STANDBY_MOVEMENT_ERROR:		// если ошибка движения в режиме ожидания
	{
		/*
		 * если была нажата какая-либо кнопка, выходим из состояния ошибки
		 */
		if ((grid_supply_button.button_current_state != BUTTON_RELEASED) || \
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <device_error_handler+0xec>)
 8001ea8:	7e1b      	ldrb	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <device_error_handler+0x9e>
				(pushbutton_buckybrake.button_current_state != BUTTON_RELEASED))
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <device_error_handler+0xf0>)
 8001eb0:	7e1b      	ldrb	r3, [r3, #24]
		if ((grid_supply_button.button_current_state != BUTTON_RELEASED) || \
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d017      	beq.n	8001ee6 <device_error_handler+0xce>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <device_error_handler+0xd8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001ebc:	e013      	b.n	8001ee6 <device_error_handler+0xce>
	case ON_TOMO_BUCKY_CALL_ERROR:		// если ошибка сигнала ON_TOMO
	{
		/*
		 * если сигнал ON_TOMO в "0", и сигнал BUCKY_CALL в "0", и мотор завершил движение
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <device_error_handler+0xf4>)
 8001ec0:	7a1b      	ldrb	r3, [r3, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d111      	bne.n	8001eea <device_error_handler+0xd2>
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <device_error_handler+0xf8>)
 8001ec8:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10d      	bne.n	8001eea <device_error_handler+0xd2>
			(motor_movement_status == MOTOR_MOVEMENT_COMPLETED))
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <device_error_handler+0xfc>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d109      	bne.n	8001eea <device_error_handler+0xd2>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <device_error_handler+0xd8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001edc:	e005      	b.n	8001eea <device_error_handler+0xd2>
		break;
 8001ede:	bf00      	nop
 8001ee0:	e004      	b.n	8001eec <device_error_handler+0xd4>
		break;
 8001ee2:	bf00      	nop
 8001ee4:	e002      	b.n	8001eec <device_error_handler+0xd4>
		break;
 8001ee6:	bf00      	nop
 8001ee8:	e000      	b.n	8001eec <device_error_handler+0xd4>
		break;
 8001eea:	bf00      	nop
	}
	}
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000310 	.word	0x20000310
 8001ef4:	20000188 	.word	0x20000188
 8001ef8:	20000268 	.word	0x20000268
 8001efc:	20000198 	.word	0x20000198
 8001f00:	200000a0 	.word	0x200000a0
 8001f04:	20000168 	.word	0x20000168
 8001f08:	200001e4 	.word	0x200001e4
 8001f0c:	20000314 	.word	0x20000314
 8001f10:	2000018c 	.word	0x2000018c
 8001f14:	20000099 	.word	0x20000099

08001f18 <read_input_signals_and_set_device_state>:

/*
 * Изменяем состояние устройства в зависимости от входных сигналов
 */
void read_input_signals_and_set_device_state(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	switch (device_current_state)													// если состояние устройства
 8001f1c:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <read_input_signals_and_set_device_state+0x17c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	f200 80a8 	bhi.w	8002076 <read_input_signals_and_set_device_state+0x15e>
 8001f26:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <read_input_signals_and_set_device_state+0x14>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001f51 	.word	0x08001f51
 8001f30:	08002077 	.word	0x08002077
 8001f34:	08001f6d 	.word	0x08001f6d
 8001f38:	08002077 	.word	0x08002077
 8001f3c:	08002063 	.word	0x08002063
 8001f40:	08002077 	.word	0x08002077
 8001f44:	08002077 	.word	0x08002077
 8001f48:	08002077 	.word	0x08002077
 8001f4c:	08001f67 	.word	0x08001f67
	{
	case DEVICE_STARTS:																// если устройство стартует
	{
		device_current_state = DEVICE_INITIAL_MOVEMENT;
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <read_input_signals_and_set_device_state+0x17c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
		motor_movement_purpose = MOTOR_PURPOSE_INITIAL_MOVEMENT;
 8001f56:	4b50      	ldr	r3, [pc, #320]	; (8002098 <read_input_signals_and_set_device_state+0x180>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
		motor_movement_start(&motor_instance_1, &movement_profile_1_default);
 8001f5c:	494f      	ldr	r1, [pc, #316]	; (800209c <read_input_signals_and_set_device_state+0x184>)
 8001f5e:	4850      	ldr	r0, [pc, #320]	; (80020a0 <read_input_signals_and_set_device_state+0x188>)
 8001f60:	f000 f936 	bl	80021d0 <motor_movement_start>
		break;
 8001f64:	e094      	b.n	8002090 <read_input_signals_and_set_device_state+0x178>
	}
	case DEVICE_ERROR:																// если возникла ошибка
	{
		device_error_handler();														// вызываем обработчик ошибок
 8001f66:	f7ff ff57 	bl	8001e18 <device_error_handler>
		break;
 8001f6a:	e091      	b.n	8002090 <read_input_signals_and_set_device_state+0x178>
	}
	case DEVICE_STANDBY:															// если устройство в режиме ожидания
	{
		set_grid_out_signal();
 8001f6c:	f000 f8ac 	bl	80020c8 <set_grid_out_signal>
		/*
		 * если сигнал ON_TOMO не активен и сигнал ON_TOMO был активен ранее
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001f70:	4b4c      	ldr	r3, [pc, #304]	; (80020a4 <read_input_signals_and_set_device_state+0x18c>)
 8001f72:	7a1b      	ldrb	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <read_input_signals_and_set_device_state+0x70>
			(ON_TOMO_IN_flag != ON_TOMO_WAS_NOT_ENABLED))
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <read_input_signals_and_set_device_state+0x190>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <read_input_signals_and_set_device_state+0x70>
		{
			ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;								// выставляем флаг: сигнал ON_TOMO не был активен
 8001f80:	4b49      	ldr	r3, [pc, #292]	; (80020a8 <read_input_signals_and_set_device_state+0x190>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e06b      	b.n	8002060 <read_input_signals_and_set_device_state+0x148>
		}
		/*
		 * иначе если кнопка подачи растра нажата долго и наличие/отсутствие растра определено
		 */
		else if (grid_supply_button.button_current_state == BUTTON_LONG_PRESS)
 8001f88:	4b48      	ldr	r3, [pc, #288]	; (80020ac <read_input_signals_and_set_device_state+0x194>)
 8001f8a:	7e1b      	ldrb	r3, [r3, #24]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d127      	bne.n	8001fe0 <read_input_signals_and_set_device_state+0xc8>
		{
			device_current_state = DEVICE_GRID_SUPPLY;								// выставляем состояние устройства: подача растра
 8001f90:	4b40      	ldr	r3, [pc, #256]	; (8002094 <read_input_signals_and_set_device_state+0x17c>)
 8001f92:	2203      	movs	r2, #3
 8001f94:	701a      	strb	r2, [r3, #0]

			/*
			 * если растр был извлечён и кнопка подачи растра нажата долго
			 */
			if (motor_instance_1.step_impulses_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <read_input_signals_and_set_device_state+0x188>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8001f9e:	dd06      	ble.n	8001fae <read_input_signals_and_set_device_state+0x96>
			{
				motor_movement_purpose = MOTOR_PURPOSE_GRID_INSERTION;						// назначение движения: вставить растр
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <read_input_signals_and_set_device_state+0x180>)
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	701a      	strb	r2, [r3, #0]
				motor_movement_start(&motor_instance_1, &movement_profile_3_supply);																// начинаем движение
 8001fa6:	4942      	ldr	r1, [pc, #264]	; (80020b0 <read_input_signals_and_set_device_state+0x198>)
 8001fa8:	483d      	ldr	r0, [pc, #244]	; (80020a0 <read_input_signals_and_set_device_state+0x188>)
 8001faa:	f000 f911 	bl	80021d0 <motor_movement_start>
			}
			/*
			 * если растр был вставлен и кнопка подачи растра нажата долго
			 */
			if (motor_instance_1.step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)
 8001fae:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <read_input_signals_and_set_device_state+0x188>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8001fb6:	dc66      	bgt.n	8002086 <read_input_signals_and_set_device_state+0x16e>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2108      	movs	r1, #8
 8001fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc0:	f7ff f8e8 	bl	8001194 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fcc:	f7ff f8e2 	bl	8001194 <set_output_signal_state>
				motor_movement_purpose = MOTOR_PURPOSE_GRID_EXTRACTION;						// назначение движения: извлечь растр
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <read_input_signals_and_set_device_state+0x180>)
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	701a      	strb	r2, [r3, #0]
				motor_movement_start(&motor_instance_1, &movement_profile_3_supply);																// начинаем движение
 8001fd6:	4936      	ldr	r1, [pc, #216]	; (80020b0 <read_input_signals_and_set_device_state+0x198>)
 8001fd8:	4831      	ldr	r0, [pc, #196]	; (80020a0 <read_input_signals_and_set_device_state+0x188>)
 8001fda:	f000 f8f9 	bl	80021d0 <motor_movement_start>
		{
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
		}
		break;
 8001fde:	e052      	b.n	8002086 <read_input_signals_and_set_device_state+0x16e>
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <read_input_signals_and_set_device_state+0x19c>)
 8001fe2:	7a1b      	ldrb	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d113      	bne.n	8002010 <read_input_signals_and_set_device_state+0xf8>
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <read_input_signals_and_set_device_state+0x18c>)
 8001fea:	7a1b      	ldrb	r3, [r3, #8]
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d10f      	bne.n	8002010 <read_input_signals_and_set_device_state+0xf8>
				(motor_instance_1.step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES))
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <read_input_signals_and_set_device_state+0x188>)
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001ff4:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8001ff8:	dc0a      	bgt.n	8002010 <read_input_signals_and_set_device_state+0xf8>
			device_current_state = DEVICE_SCANING_TOMO_OFF;											// выставляем состояние устройства: экспозиция без ON_TOMO
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <read_input_signals_and_set_device_state+0x17c>)
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	701a      	strb	r2, [r3, #0]
			motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_OFF;						// назначение движения: экспозиция без ON_TOMO
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <read_input_signals_and_set_device_state+0x180>)
 8002002:	2204      	movs	r2, #4
 8002004:	701a      	strb	r2, [r3, #0]
			motor_movement_start(&motor_instance_1, &movement_profile_2_exposition);																	// начинаем движение
 8002006:	492c      	ldr	r1, [pc, #176]	; (80020b8 <read_input_signals_and_set_device_state+0x1a0>)
 8002008:	4825      	ldr	r0, [pc, #148]	; (80020a0 <read_input_signals_and_set_device_state+0x188>)
 800200a:	f000 f8e1 	bl	80021d0 <motor_movement_start>
 800200e:	e027      	b.n	8002060 <read_input_signals_and_set_device_state+0x148>
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <read_input_signals_and_set_device_state+0x18c>)
 8002012:	7a1b      	ldrb	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d111      	bne.n	800203c <read_input_signals_and_set_device_state+0x124>
				(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8002018:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <read_input_signals_and_set_device_state+0x19c>)
 800201a:	7a1b      	ldrb	r3, [r3, #8]
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <read_input_signals_and_set_device_state+0x124>
			ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED;
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <read_input_signals_and_set_device_state+0x190>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
			device_current_state = DEVICE_SCANING_TOMO_ON;											// выставляем состояние устройства: экспозиция с ON_TOMO
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <read_input_signals_and_set_device_state+0x17c>)
 8002028:	2206      	movs	r2, #6
 800202a:	701a      	strb	r2, [r3, #0]
			motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_ON;						// назначние движения: экспозиция с ON_TOMO
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <read_input_signals_and_set_device_state+0x180>)
 800202e:	2205      	movs	r2, #5
 8002030:	701a      	strb	r2, [r3, #0]
			motor_movement_start(&motor_instance_1, &movement_profile_2_exposition);																	// начинаем движение
 8002032:	4921      	ldr	r1, [pc, #132]	; (80020b8 <read_input_signals_and_set_device_state+0x1a0>)
 8002034:	481a      	ldr	r0, [pc, #104]	; (80020a0 <read_input_signals_and_set_device_state+0x188>)
 8002036:	f000 f8cb 	bl	80021d0 <motor_movement_start>
 800203a:	e011      	b.n	8002060 <read_input_signals_and_set_device_state+0x148>
		else if (pushbutton_buckybrake.button_current_state != BUTTON_RELEASED)
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <read_input_signals_and_set_device_state+0x1a4>)
 800203e:	7e1b      	ldrb	r3, [r3, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <read_input_signals_and_set_device_state+0x16e>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <read_input_signals_and_set_device_state+0x17c>)
 8002046:	2204      	movs	r2, #4
 8002048:	701a      	strb	r2, [r3, #0]
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
 800204a:	2201      	movs	r2, #1
 800204c:	2101      	movs	r1, #1
 800204e:	481c      	ldr	r0, [pc, #112]	; (80020c0 <read_input_signals_and_set_device_state+0x1a8>)
 8002050:	f7ff f8a0 	bl	8001194 <set_output_signal_state>
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
 8002054:	2201      	movs	r2, #1
 8002056:	2108      	movs	r1, #8
 8002058:	4819      	ldr	r0, [pc, #100]	; (80020c0 <read_input_signals_and_set_device_state+0x1a8>)
 800205a:	f7ff f89b 	bl	8001194 <set_output_signal_state>
		break;
 800205e:	e012      	b.n	8002086 <read_input_signals_and_set_device_state+0x16e>
 8002060:	e011      	b.n	8002086 <read_input_signals_and_set_device_state+0x16e>
	case DEVICE_BUCKYBRAKE:																			// если устройство в состоянии "отпустить тормоз кассетоприёмника"
	{
		/*
		 *	если кнопка тормоза кассетоприёмника отпущена
		 */
		if (pushbutton_buckybrake.button_current_state == BUTTON_RELEASED)
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <read_input_signals_and_set_device_state+0x1a4>)
 8002064:	7e1b      	ldrb	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10f      	bne.n	800208a <read_input_signals_and_set_device_state+0x172>
		{
			buckybreak_laser_disable();
 800206a:	f000 f88d 	bl	8002188 <buckybreak_laser_disable>
			device_current_state = DEVICE_STANDBY;													// выставляем состояние устройства: режим ожидания
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <read_input_signals_and_set_device_state+0x17c>)
 8002070:	2202      	movs	r2, #2
 8002072:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002074:	e009      	b.n	800208a <read_input_signals_and_set_device_state+0x172>
	}
	default:
	{
		if (motor_movement_status == MOTOR_MOVEMENT_COMPLETED)			// если статус мотора "движение завершено"
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <read_input_signals_and_set_device_state+0x1ac>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <read_input_signals_and_set_device_state+0x176>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <read_input_signals_and_set_device_state+0x17c>)
 8002080:	2202      	movs	r2, #2
 8002082:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002084:	e003      	b.n	800208e <read_input_signals_and_set_device_state+0x176>
		break;
 8002086:	bf00      	nop
 8002088:	e002      	b.n	8002090 <read_input_signals_and_set_device_state+0x178>
		break;
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <read_input_signals_and_set_device_state+0x178>
		break;
 800208e:	bf00      	nop
	}
	}
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000188 	.word	0x20000188
 8002098:	20000198 	.word	0x20000198
 800209c:	2000019c 	.word	0x2000019c
 80020a0:	200000a0 	.word	0x200000a0
 80020a4:	20000314 	.word	0x20000314
 80020a8:	200001e0 	.word	0x200001e0
 80020ac:	20000168 	.word	0x20000168
 80020b0:	200002f0 	.word	0x200002f0
 80020b4:	2000018c 	.word	0x2000018c
 80020b8:	200002d0 	.word	0x200002d0
 80020bc:	200001e4 	.word	0x200001e4
 80020c0:	48000400 	.word	0x48000400
 80020c4:	20000099 	.word	0x20000099

080020c8 <set_grid_out_signal>:

void set_grid_out_signal(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	/*
	 * если растр не представлен
	 */
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <set_grid_out_signal+0xb4>)
 80020ce:	7a1b      	ldrb	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10f      	bne.n	80020f4 <set_grid_out_signal+0x2c>
		(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <set_grid_out_signal+0xb4>)
 80020d6:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <set_grid_out_signal+0x2c>
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 80020dc:	2200      	movs	r2, #0
 80020de:	2108      	movs	r1, #8
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	f7ff f856 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 80020e8:	2200      	movs	r2, #0
 80020ea:	2110      	movs	r1, #16
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f0:	f7ff f850 	bl	8001194 <set_output_signal_state>
	}
	/*
	* если тип растра 120
	*/
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <set_grid_out_signal+0xb4>)
 80020f6:	7a1b      	ldrb	r3, [r3, #8]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d10f      	bne.n	800211c <set_grid_out_signal+0x54>
		(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <set_grid_out_signal+0xb4>)
 80020fe:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <set_grid_out_signal+0x54>
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_120
 8002104:	2201      	movs	r2, #1
 8002106:	2108      	movs	r1, #8
 8002108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210c:	f7ff f842 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8002110:	2200      	movs	r2, #0
 8002112:	2110      	movs	r1, #16
 8002114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002118:	f7ff f83c 	bl	8001194 <set_output_signal_state>
	}
	/*
	* если тип растра 180
	*/
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <set_grid_out_signal+0xb4>)
 800211e:	7a1b      	ldrb	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <set_grid_out_signal+0x7c>
		(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <set_grid_out_signal+0xb4>)
 8002126:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10b      	bne.n	8002144 <set_grid_out_signal+0x7c>
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 800212c:	2200      	movs	r2, #0
 800212e:	2108      	movs	r1, #8
 8002130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002134:	f7ff f82e 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_180
 8002138:	2201      	movs	r2, #1
 800213a:	2110      	movs	r1, #16
 800213c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002140:	f7ff f828 	bl	8001194 <set_output_signal_state>
	}
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <set_grid_out_signal+0xb4>)
 8002146:	7a1b      	ldrb	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d115      	bne.n	8002178 <set_grid_out_signal+0xb0>
		(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <set_grid_out_signal+0xb4>)
 800214e:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8002150:	2b01      	cmp	r3, #1
 8002152:	d111      	bne.n	8002178 <set_grid_out_signal+0xb0>
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_120
 8002154:	2201      	movs	r2, #1
 8002156:	2108      	movs	r1, #8
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f7ff f81a 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_180
 8002160:	2201      	movs	r2, #1
 8002162:	2110      	movs	r1, #16
 8002164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002168:	f7ff f814 	bl	8001194 <set_output_signal_state>
		error_code = GRID_TYPE_ERROR;									// выставляем флаг ошибки типа растра
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <set_grid_out_signal+0xb8>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_ERROR;							// переключаем устройство в режим ожидания
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <set_grid_out_signal+0xbc>)
 8002174:	2208      	movs	r2, #8
 8002176:	701a      	strb	r2, [r3, #0]
	}
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000268 	.word	0x20000268
 8002180:	20000310 	.word	0x20000310
 8002184:	20000188 	.word	0x20000188

08002188 <buckybreak_laser_disable>:

void buckybreak_laser_disable(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_LOW);	// выставляем в "0" выходной сигнал LASER_CENTERING
 800218c:	2200      	movs	r2, #0
 800218e:	2101      	movs	r1, #1
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <buckybreak_laser_disable+0x1c>)
 8002192:	f7fe ffff 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_LOW);
 8002196:	2200      	movs	r2, #0
 8002198:	2108      	movs	r1, #8
 800219a:	4802      	ldr	r0, [pc, #8]	; (80021a4 <buckybreak_laser_disable+0x1c>)
 800219c:	f7fe fffa 	bl	8001194 <set_output_signal_state>
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	48000400 	.word	0x48000400

080021a8 <motor_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_start(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(MOTOR_TIMER_POINTER);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <motor_timer_interrupts_start+0x10>)
 80021ae:	f001 fe85 	bl	8003ebc <HAL_TIM_Base_Start_IT>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000011c 	.word	0x2000011c

080021bc <motor_timer_interrupts_stop>:

/*
 * Останавливаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_stop(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(MOTOR_TIMER_POINTER);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <motor_timer_interrupts_stop+0x10>)
 80021c2:	f001 fee5 	bl	8003f90 <HAL_TIM_Base_Stop_IT>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000011c 	.word	0x2000011c

080021d0 <motor_movement_start>:

/*
 * Начинаем движение мотора
 */
void motor_movement_start(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
	if (device_current_state == DEVICE_STANDBY)							// если устройство в режиме ожидания
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <motor_movement_start+0x54>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d106      	bne.n	80021f0 <motor_movement_start+0x20>
	{
		device_current_state = DEVICE_ERROR;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <motor_movement_start+0x54>)
 80021e4:	2208      	movs	r2, #8
 80021e6:	701a      	strb	r2, [r3, #0]
		error_code = STANDBY_MOVEMENT_ERROR;							// выставляем ошибку (нельзя двигаться в режиме ожидания)
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <motor_movement_start+0x58>)
 80021ea:	2203      	movs	r2, #3
 80021ec:	701a      	strb	r2, [r3, #0]
		}
		motor_movement_init(motor_object, movement_profile);
		motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;					// выставляем флаг, что мотор находится в движении
		motor_timer_interrupts_start();
	}						// запускаем прерывания, по которым мотор будет шагать
}
 80021ee:	e014      	b.n	800221a <motor_movement_start+0x4a>
		enable_pin_set();
 80021f0:	f7ff fba8 	bl	8001944 <enable_pin_set>
		if ((motor_movement_purpose == MOTOR_PURPOSE_EXPOSITION_TOMO_OFF) || (motor_movement_purpose == MOTOR_PURPOSE_EXPOSITION_TOMO_ON))
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <motor_movement_start+0x5c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d003      	beq.n	8002204 <motor_movement_start+0x34>
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <motor_movement_start+0x5c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d101      	bne.n	8002208 <motor_movement_start+0x38>
			dip_switch_state_update();
 8002204:	f7ff fd12 	bl	8001c2c <dip_switch_state_update>
		motor_movement_init(motor_object, movement_profile);
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff f869 	bl	80012e2 <motor_movement_init>
		motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;					// выставляем флаг, что мотор находится в движении
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <motor_movement_start+0x60>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
		motor_timer_interrupts_start();
 8002216:	f7ff ffc7 	bl	80021a8 <motor_timer_interrupts_start>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000188 	.word	0x20000188
 8002228:	20000310 	.word	0x20000310
 800222c:	20000198 	.word	0x20000198
 8002230:	20000099 	.word	0x20000099

08002234 <motor_movement_complete>:

/*
 * Прекращаем движение мотора
 */
void motor_movement_complete(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	motor_timer_interrupts_stop();										// останавливаем прерывания, по которым шагает мотор
 8002238:	f7ff ffc0 	bl	80021bc <motor_timer_interrupts_stop>
	enable_pin_clear();
 800223c:	f7ff fb8e 	bl	800195c <enable_pin_clear>
	motor_movement_status = MOTOR_MOVEMENT_COMPLETED;					// выставляем флаг, что движение завершено
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <motor_movement_complete+0x18>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000099 	.word	0x20000099

08002250 <bucky_ready_delay_set>:

/*
 * Начинаем отсчёт шагов до выставления сигнала BUCKY_READY
 */
void bucky_ready_delay_set(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	if (bucky_ready_delay_counter != BUCKY_READY_DELAY_STEP_IMPULSES)
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <bucky_ready_delay_set+0x30>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d00f      	beq.n	800227c <bucky_ready_delay_set+0x2c>
	{
		bucky_ready_delay_counter++;
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <bucky_ready_delay_set+0x30>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <bucky_ready_delay_set+0x30>)
 8002266:	701a      	strb	r2, [r3, #0]
		if (bucky_ready_delay_counter == BUCKY_READY_DELAY_STEP_IMPULSES)
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <bucky_ready_delay_set+0x30>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d105      	bne.n	800227c <bucky_ready_delay_set+0x2c>
		{
			set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_HIGH);
 8002270:	2201      	movs	r2, #1
 8002272:	2120      	movs	r1, #32
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f7fe ff8c 	bl	8001194 <set_output_signal_state>
		}
	}
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000118 	.word	0x20000118

08002284 <bucky_ready_dsable>:

void bucky_ready_dsable(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	bucky_ready_delay_counter = 0;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <bucky_ready_dsable+0x1c>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
	set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
 800228e:	2200      	movs	r2, #0
 8002290:	2120      	movs	r1, #32
 8002292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002296:	f7fe ff7d 	bl	8001194 <set_output_signal_state>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000118 	.word	0x20000118

080022a4 <motor_check_conditions_and_step>:

void motor_check_conditions_and_step(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
	switch (motor_movement_purpose)												// если назначение движения мотора
 80022ae:	4b71      	ldr	r3, [pc, #452]	; (8002474 <motor_check_conditions_and_step+0x1d0>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	f200 80d9 	bhi.w	800246a <motor_check_conditions_and_step+0x1c6>
 80022b8:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <motor_check_conditions_and_step+0x1c>)
 80022ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022be:	bf00      	nop
 80022c0:	08002413 	.word	0x08002413
 80022c4:	080022dd 	.word	0x080022dd
 80022c8:	08002331 	.word	0x08002331
 80022cc:	08002363 	.word	0x08002363
 80022d0:	08002387 	.word	0x08002387
 80022d4:	080023a9 	.word	0x080023a9
 80022d8:	0800243d 	.word	0x0800243d
	{
	case MOTOR_PURPOSE_INITIAL_MOVEMENT:
	{
		if (!limit_switch_enabled_once)
 80022dc:	4b66      	ldr	r3, [pc, #408]	; (8002478 <motor_check_conditions_and_step+0x1d4>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f083 0301 	eor.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d012      	beq.n	8002310 <motor_check_conditions_and_step+0x6c>
		{
			if(!limit_switch_active(&motor_instance_1))
 80022ea:	4864      	ldr	r0, [pc, #400]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 80022ec:	f7ff faa0 	bl	8001830 <limit_switch_active>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <motor_check_conditions_and_step+0x64>
			{
				motor_check_counter_and_make_step_to_direction(&motor_instance_1, &movement_profile_1_default, MOVE_TO_COORD_ORIGIN);
 80022fc:	2200      	movs	r2, #0
 80022fe:	4960      	ldr	r1, [pc, #384]	; (8002480 <motor_check_conditions_and_step+0x1dc>)
 8002300:	485e      	ldr	r0, [pc, #376]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 8002302:	f7ff f8d6 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
			else
			{
				motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;
			}
		}
		break;
 8002306:	e0b0      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
				limit_switch_enabled_once = 1;
 8002308:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <motor_check_conditions_and_step+0x1d4>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
		break;
 800230e:	e0ac      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
			if (motor_object->step_impulses_distance_from_limit_switch < FAR_DISTANCE_STEP_IMPULSES)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f240 7221 	movw	r2, #1825	; 0x721
 8002318:	4293      	cmp	r3, r2
 800231a:	dc05      	bgt.n	8002328 <motor_check_conditions_and_step+0x84>
				motor_check_counter_and_make_step_to_direction(&motor_instance_1, &movement_profile_1_default, MOVE_TO_COORD_END);
 800231c:	2201      	movs	r2, #1
 800231e:	4958      	ldr	r1, [pc, #352]	; (8002480 <motor_check_conditions_and_step+0x1dc>)
 8002320:	4856      	ldr	r0, [pc, #344]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 8002322:	f7ff f8c6 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
		break;
 8002326:	e0a0      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
				motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;
 8002328:	4b52      	ldr	r3, [pc, #328]	; (8002474 <motor_check_conditions_and_step+0x1d0>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
		break;
 800232e:	e09c      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
	}
	case MOTOR_PURPOSE_GRID_INSERTION:													// если назначение движения мотора - вставить растр
	{
		if (!(limit_switch_active(&motor_instance_1)))												// если концевик не активен
 8002330:	4852      	ldr	r0, [pc, #328]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 8002332:	f7ff fa7d 	bl	8001830 <limit_switch_active>
 8002336:	4603      	mov	r3, r0
 8002338:	f083 0301 	eor.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <motor_check_conditions_and_step+0xaa>
		{
			motor_check_counter_and_make_step_to_direction(&motor_instance_1,  &movement_profile_3_supply, MOVE_TO_COORD_ORIGIN);							// двигаемся к начальной точке
 8002342:	2200      	movs	r2, #0
 8002344:	494f      	ldr	r1, [pc, #316]	; (8002484 <motor_check_conditions_and_step+0x1e0>)
 8002346:	484d      	ldr	r0, [pc, #308]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 8002348:	f7ff f8b3 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 800234c:	e088      	b.n	8002460 <motor_check_conditions_and_step+0x1bc>
			set_grid_out_signal();
 800234e:	f7ff febb 	bl	80020c8 <set_grid_out_signal>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 8002352:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <motor_check_conditions_and_step+0x1e4>)
 8002354:	7e1b      	ldrb	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 8082 	bne.w	8002460 <motor_check_conditions_and_step+0x1bc>
				motor_movement_complete();												// завершаем движение
 800235c:	f7ff ff6a 	bl	8002234 <motor_movement_complete>
		break;
 8002360:	e07e      	b.n	8002460 <motor_check_conditions_and_step+0x1bc>
	}
	case MOTOR_PURPOSE_GRID_EXTRACTION:													// если назначение движения мотора - извлечь растр
	{
		if (motor_object->step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)		// если мы не дошли до крайнего положения
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 800236a:	dc05      	bgt.n	8002378 <motor_check_conditions_and_step+0xd4>
		{
			motor_check_counter_and_make_step_to_direction(&motor_instance_1,  &movement_profile_3_supply, MOVE_TO_COORD_END);							// движемся от начальной точки (наружу)
 800236c:	2201      	movs	r2, #1
 800236e:	4945      	ldr	r1, [pc, #276]	; (8002484 <motor_check_conditions_and_step+0x1e0>)
 8002370:	4842      	ldr	r0, [pc, #264]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 8002372:	f7ff f89e 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 8002376:	e075      	b.n	8002464 <motor_check_conditions_and_step+0x1c0>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <motor_check_conditions_and_step+0x1e4>)
 800237a:	7e1b      	ldrb	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d171      	bne.n	8002464 <motor_check_conditions_and_step+0x1c0>
				motor_movement_complete();												// завершаем движение
 8002380:	f7ff ff58 	bl	8002234 <motor_movement_complete>
		break;
 8002384:	e06e      	b.n	8002464 <motor_check_conditions_and_step+0x1c0>
	}
	case MOTOR_PURPOSE_EXPOSITION_TOMO_OFF:												// если назначение движения - экспозиция без сигнала ON_TOMO
	{
		if (BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)					// если сигнал BUCKY_CALL в "1"
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <motor_check_conditions_and_step+0x1e8>)
 8002388:	7a1b      	ldrb	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <motor_check_conditions_and_step+0xf8>
		{
			cyclic_movement_step(&motor_instance_1, &movement_profile_2_exposition);														// делаем шаг
 800238e:	4940      	ldr	r1, [pc, #256]	; (8002490 <motor_check_conditions_and_step+0x1ec>)
 8002390:	483a      	ldr	r0, [pc, #232]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 8002392:	f7ff f801 	bl	8001398 <cyclic_movement_step>
			bucky_ready_delay_set();
 8002396:	f7ff ff5b 	bl	8002250 <bucky_ready_delay_set>
		else
		{
			bucky_ready_dsable();								// иначе выключаем сигнал BUCKY_READY
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;				// выставляем назначение движения - двигаться в начальное положение
		}
		break;
 800239a:	e066      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
			bucky_ready_dsable();								// иначе выключаем сигнал BUCKY_READY
 800239c:	f7ff ff72 	bl	8002284 <bucky_ready_dsable>
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;				// выставляем назначение движения - двигаться в начальное положение
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <motor_check_conditions_and_step+0x1d0>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
		break;
 80023a6:	e060      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
	}
	case MOTOR_PURPOSE_EXPOSITION_TOMO_ON:												// если назначение движения - экспозиция с сигналом ON_TOMO
	{
		if (BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <motor_check_conditions_and_step+0x1e8>)
 80023aa:	7a1b      	ldrb	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d126      	bne.n	80023fe <motor_check_conditions_and_step+0x15a>
		{
			cyclic_movement_step(&motor_instance_1, &movement_profile_2_exposition);
 80023b0:	4937      	ldr	r1, [pc, #220]	; (8002490 <motor_check_conditions_and_step+0x1ec>)
 80023b2:	4832      	ldr	r0, [pc, #200]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 80023b4:	f7fe fff0 	bl	8001398 <cyclic_movement_step>

			if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <motor_check_conditions_and_step+0x1f0>)
 80023ba:	7a1b      	ldrb	r3, [r3, #8]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d10c      	bne.n	80023da <motor_check_conditions_and_step+0x136>
					(ON_TOMO_IN_flag != ON_TOMO_WAS_ENABLED_AND_DISABLED))				// если сигнал ON_TOMO в "0"
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <motor_check_conditions_and_step+0x1f4>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
			if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d008      	beq.n	80023da <motor_check_conditions_and_step+0x136>
			{
				ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED_AND_DISABLED;						// выставляем флаг, что ON_TOMO был в "1", а затем в "0"
 80023c8:	4b33      	ldr	r3, [pc, #204]	; (8002498 <motor_check_conditions_and_step+0x1f4>)
 80023ca:	2202      	movs	r2, #2
 80023cc:	701a      	strb	r2, [r3, #0]
				set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_HIGH);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2120      	movs	r1, #32
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d6:	f7fe fedd 	bl	8001194 <set_output_signal_state>
			}
			// если сигнал ON_TOMO был включён и выключен, и сигнал ON_TOMO включён
			if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED))
 80023da:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <motor_check_conditions_and_step+0x1f0>)
 80023dc:	7a1b      	ldrb	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d142      	bne.n	8002468 <motor_check_conditions_and_step+0x1c4>
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <motor_check_conditions_and_step+0x1f4>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d13e      	bne.n	8002468 <motor_check_conditions_and_step+0x1c4>
			{
				ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;
 80023ea:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <motor_check_conditions_and_step+0x1f4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
				set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2120      	movs	r1, #32
 80023f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f8:	f7fe fecc 	bl	8001194 <set_output_signal_state>
		else
		{
			set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;				// выставляем назначение движения - двигаться в начальное положение
		}
		break;
 80023fc:	e034      	b.n	8002468 <motor_check_conditions_and_step+0x1c4>
			set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
 80023fe:	2200      	movs	r2, #0
 8002400:	2120      	movs	r1, #32
 8002402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002406:	f7fe fec5 	bl	8001194 <set_output_signal_state>
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;				// выставляем назначение движения - двигаться в начальное положение
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <motor_check_conditions_and_step+0x1d0>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
		break;
 8002410:	e02a      	b.n	8002468 <motor_check_conditions_and_step+0x1c4>
	}
	case MOTOR_PURPOSE_TAKE_INITIAL_POSITION:											// если назначение движения - вернуться в начальную позицию
	{
		if(!(limit_switch_active(&motor_instance_1)))
 8002412:	481a      	ldr	r0, [pc, #104]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 8002414:	f7ff fa0c 	bl	8001830 <limit_switch_active>
 8002418:	4603      	mov	r3, r0
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <motor_check_conditions_and_step+0x18c>
		{
			motor_check_counter_and_make_step_to_direction(&motor_instance_1, &movement_profile_1_default, MOVE_TO_COORD_ORIGIN);		// делаем шаг в направлении начального положения
 8002424:	2200      	movs	r2, #0
 8002426:	4916      	ldr	r1, [pc, #88]	; (8002480 <motor_check_conditions_and_step+0x1dc>)
 8002428:	4814      	ldr	r0, [pc, #80]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 800242a:	f7ff f842 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
		else
		{
			motor_instance_1.limit_emergency_counter = 0;
			motor_movement_complete();
		}
		break;
 800242e:	e01c      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
			motor_instance_1.limit_emergency_counter = 0;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 8002432:	2200      	movs	r2, #0
 8002434:	649a      	str	r2, [r3, #72]	; 0x48
			motor_movement_complete();
 8002436:	f7ff fefd 	bl	8002234 <motor_movement_complete>
		break;
 800243a:	e016      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
	}
	case MOTOR_PURPOSE_EMERGENCY_SUPPLY:
	{
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
 800243c:	2200      	movs	r2, #0
 800243e:	2120      	movs	r1, #32
 8002440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002444:	f7fe fea6 	bl	8001194 <set_output_signal_state>
		if (motor_object->step_impulses_distance_from_limit_switch < (RASTER_SUPPLY_DISTANCE_STEP_IMPULSES + STEP_IMPULSES_ACCEPTABLE_ERROR))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8002450:	4293      	cmp	r3, r2
 8002452:	dc0a      	bgt.n	800246a <motor_check_conditions_and_step+0x1c6>
		{
			motor_check_counter_and_make_step_to_direction(&motor_instance_1, &movement_profile_1_default, MOVE_TO_COORD_END);
 8002454:	2201      	movs	r2, #1
 8002456:	490a      	ldr	r1, [pc, #40]	; (8002480 <motor_check_conditions_and_step+0x1dc>)
 8002458:	4808      	ldr	r0, [pc, #32]	; (800247c <motor_check_conditions_and_step+0x1d8>)
 800245a:	f7ff f82a 	bl	80014b2 <motor_check_counter_and_make_step_to_direction>
		}
	}
	}
}
 800245e:	e004      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
		break;
 8002460:	bf00      	nop
 8002462:	e002      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
		break;
 8002464:	bf00      	nop
 8002466:	e000      	b.n	800246a <motor_check_conditions_and_step+0x1c6>
		break;
 8002468:	bf00      	nop
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000198 	.word	0x20000198
 8002478:	20000280 	.word	0x20000280
 800247c:	200000a0 	.word	0x200000a0
 8002480:	2000019c 	.word	0x2000019c
 8002484:	200002f0 	.word	0x200002f0
 8002488:	20000168 	.word	0x20000168
 800248c:	2000018c 	.word	0x2000018c
 8002490:	200002d0 	.word	0x200002d0
 8002494:	20000314 	.word	0x20000314
 8002498:	200001e0 	.word	0x200001e0

0800249c <motor_timer_interrupt_handler>:

/*
 * Обработчик прерываний таймера, отвечающего за шаги мотора
 */
void motor_timer_interrupt_handler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	motor_check_conditions_and_step(&motor_instance_1,  &movement_profile_2_exposition);
 80024a0:	4902      	ldr	r1, [pc, #8]	; (80024ac <motor_timer_interrupt_handler+0x10>)
 80024a2:	4803      	ldr	r0, [pc, #12]	; (80024b0 <motor_timer_interrupt_handler+0x14>)
 80024a4:	f7ff fefe 	bl	80022a4 <motor_check_conditions_and_step>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200002d0 	.word	0x200002d0
 80024b0:	200000a0 	.word	0x200000a0

080024b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ba:	490e      	ldr	r1, [pc, #56]	; (80024f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <LoopForever+0xe>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024c0:	e002      	b.n	80024c8 <LoopCopyDataInit>

080024c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c6:	3304      	adds	r3, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024cc:	d3f9      	bcc.n	80024c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d0:	4c0b      	ldr	r4, [pc, #44]	; (8002500 <LoopForever+0x16>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d4:	e001      	b.n	80024da <LoopFillZerobss>

080024d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d8:	3204      	adds	r2, #4

080024da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024dc:	d3fb      	bcc.n	80024d6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024de:	f7fe fe43 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e2:	f002 fa25 	bl	8004930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024e6:	f7fe fb73 	bl	8000bd0 <main>

080024ea <LoopForever>:

LoopForever:
    b LoopForever
 80024ea:	e7fe      	b.n	80024ea <LoopForever>
  ldr   r0, =_estack
 80024ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024f8:	08005970 	.word	0x08005970
  ldr r2, =_sbss
 80024fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002500:	20000324 	.word	0x20000324

08002504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_2_IRQHandler>

08002506 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002510:	2003      	movs	r0, #3
 8002512:	f000 f939 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f80e 	bl	8002538 <HAL_InitTick>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	e001      	b.n	800252c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002528:	f7fe fd30 	bl	8000f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800252c:	79fb      	ldrb	r3, [r7, #7]

}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_InitTick+0x68>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d022      	beq.n	8002592 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_InitTick+0x6c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_InitTick+0x68>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002558:	fbb1 f3f3 	udiv	r3, r1, r3
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f944 	bl	80027ee <HAL_SYSTICK_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10f      	bne.n	800258c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	d809      	bhi.n	8002586 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002572:	2200      	movs	r2, #0
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	f04f 30ff 	mov.w	r0, #4294967295
 800257a:	f000 f910 	bl	800279e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <HAL_InitTick+0x70>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e007      	b.n	8002596 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e004      	b.n	8002596 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e001      	b.n	8002596 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000008 	.word	0x20000008
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000004 	.word	0x20000004

080025ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_IncTick+0x1c>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x20>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <HAL_IncTick+0x1c>)
 80025bc:	6013      	str	r3, [r2, #0]
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	20000320 	.word	0x20000320
 80025cc:	20000008 	.word	0x20000008

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000320 	.word	0x20000320

080025e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261a:	4a04      	ldr	r2, [pc, #16]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	60d3      	str	r3, [r2, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <__NVIC_GetPriorityGrouping+0x18>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0307 	and.w	r3, r3, #7
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db0b      	blt.n	8002676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	4907      	ldr	r1, [pc, #28]	; (8002684 <__NVIC_EnableIRQ+0x38>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2001      	movs	r0, #1
 800266e:	fa00 f202 	lsl.w	r2, r0, r2
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000e100 	.word	0xe000e100

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	; (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
         );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002754:	d301      	bcc.n	800275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2301      	movs	r3, #1
 8002758:	e00f      	b.n	800277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <SysTick_Config+0x40>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002762:	210f      	movs	r1, #15
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f7ff ff8e 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SysTick_Config+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <SysTick_Config+0x40>)
 8002774:	2207      	movs	r2, #7
 8002776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff29 	bl	80025e8 <__NVIC_SetPriorityGrouping>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027ac:	f7ff ff40 	bl	8002630 <__NVIC_GetPriorityGrouping>
 80027b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff ff90 	bl	80026dc <NVIC_EncodePriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff5f 	bl	8002688 <__NVIC_SetPriority>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff33 	bl	800264c <__NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffa4 	bl	8002744 <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e147      	b.n	8002aaa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fbd0 	bl	8000fd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0210 	bic.w	r2, r2, #16
 8002842:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002844:	f7ff fec4 	bl	80025d0 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800284a:	e012      	b.n	8002872 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800284c:	f7ff fec0 	bl	80025d0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b0a      	cmp	r3, #10
 8002858:	d90b      	bls.n	8002872 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e11b      	b.n	8002aaa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b08      	cmp	r3, #8
 800287e:	d0e5      	beq.n	800284c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002890:	f7ff fe9e 	bl	80025d0 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002896:	e012      	b.n	80028be <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002898:	f7ff fe9a 	bl	80025d0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b0a      	cmp	r3, #10
 80028a4:	d90b      	bls.n	80028be <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2203      	movs	r2, #3
 80028b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0f5      	b.n	8002aaa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0e5      	beq.n	8002898 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0202 	orr.w	r2, r2, #2
 80028da:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a74      	ldr	r2, [pc, #464]	; (8002ab4 <HAL_FDCAN_Init+0x2ac>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d103      	bne.n	80028ee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80028e6:	4a74      	ldr	r2, [pc, #464]	; (8002ab8 <HAL_FDCAN_Init+0x2b0>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7c1b      	ldrb	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002904:	619a      	str	r2, [r3, #24]
 8002906:	e007      	b.n	8002918 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002916:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7c5b      	ldrb	r3, [r3, #17]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800292e:	619a      	str	r2, [r3, #24]
 8002930:	e007      	b.n	8002942 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002940:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7c9b      	ldrb	r3, [r3, #18]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002958:	619a      	str	r2, [r3, #24]
 800295a:	e007      	b.n	800296c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800296a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002990:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0210 	bic.w	r2, r2, #16
 80029a0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d108      	bne.n	80029bc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0204 	orr.w	r2, r2, #4
 80029b8:	619a      	str	r2, [r3, #24]
 80029ba:	e02c      	b.n	8002a16 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d028      	beq.n	8002a16 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d01c      	beq.n	8002a06 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029da:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0210 	orr.w	r2, r2, #16
 80029ea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d110      	bne.n	8002a16 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	619a      	str	r2, [r3, #24]
 8002a04:	e007      	b.n	8002a16 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0220 	orr.w	r2, r2, #32
 8002a14:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a26:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a2e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a3e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a40:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a4a:	d115      	bne.n	8002a78 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	3b01      	subs	r3, #1
 8002a58:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a5a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	3b01      	subs	r3, #1
 8002a62:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a64:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a74:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a76:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f814 	bl	8002abc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40006400 	.word	0x40006400
 8002ab8:	40006500 	.word	0x40006500

08002abc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002ac4:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002ac6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ade:	041a      	lsls	r2, r3, #16
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	061a      	lsls	r2, r3, #24
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e005      	b.n	8002b4a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3304      	adds	r3, #4
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d3f3      	bcc.n	8002b3e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	4000a400 	.word	0x4000a400

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b76:	e15a      	b.n	8002e2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 814c 	beq.w	8002e28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d00b      	beq.n	8002bb0 <HAL_GPIO_Init+0x48>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d007      	beq.n	8002bb0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ba4:	2b11      	cmp	r3, #17
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b12      	cmp	r3, #18
 8002bae:	d130      	bne.n	8002c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002be6:	2201      	movs	r2, #1
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 0201 	and.w	r2, r3, #1
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0xea>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b12      	cmp	r3, #18
 8002c50:	d123      	bne.n	8002c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	08da      	lsrs	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	6939      	ldr	r1, [r7, #16]
 8002c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a6 	beq.w	8002e28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cdc:	4b5b      	ldr	r3, [pc, #364]	; (8002e4c <HAL_GPIO_Init+0x2e4>)
 8002cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce0:	4a5a      	ldr	r2, [pc, #360]	; (8002e4c <HAL_GPIO_Init+0x2e4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ce8:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <HAL_GPIO_Init+0x2e4>)
 8002cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf4:	4a56      	ldr	r2, [pc, #344]	; (8002e50 <HAL_GPIO_Init+0x2e8>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d1e:	d01f      	beq.n	8002d60 <HAL_GPIO_Init+0x1f8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <HAL_GPIO_Init+0x2ec>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d019      	beq.n	8002d5c <HAL_GPIO_Init+0x1f4>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a4b      	ldr	r2, [pc, #300]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_GPIO_Init+0x1f0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a4a      	ldr	r2, [pc, #296]	; (8002e5c <HAL_GPIO_Init+0x2f4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00d      	beq.n	8002d54 <HAL_GPIO_Init+0x1ec>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a49      	ldr	r2, [pc, #292]	; (8002e60 <HAL_GPIO_Init+0x2f8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <HAL_GPIO_Init+0x1e8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a48      	ldr	r2, [pc, #288]	; (8002e64 <HAL_GPIO_Init+0x2fc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_GPIO_Init+0x1e4>
 8002d48:	2305      	movs	r3, #5
 8002d4a:	e00a      	b.n	8002d62 <HAL_GPIO_Init+0x1fa>
 8002d4c:	2306      	movs	r3, #6
 8002d4e:	e008      	b.n	8002d62 <HAL_GPIO_Init+0x1fa>
 8002d50:	2304      	movs	r3, #4
 8002d52:	e006      	b.n	8002d62 <HAL_GPIO_Init+0x1fa>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e004      	b.n	8002d62 <HAL_GPIO_Init+0x1fa>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e002      	b.n	8002d62 <HAL_GPIO_Init+0x1fa>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_GPIO_Init+0x1fa>
 8002d60:	2300      	movs	r3, #0
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	f002 0203 	and.w	r2, r2, #3
 8002d68:	0092      	lsls	r2, r2, #2
 8002d6a:	4093      	lsls	r3, r2
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d72:	4937      	ldr	r1, [pc, #220]	; (8002e50 <HAL_GPIO_Init+0x2e8>)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	3302      	adds	r3, #2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d80:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_GPIO_Init+0x300>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002da4:	4a30      	ldr	r2, [pc, #192]	; (8002e68 <HAL_GPIO_Init+0x300>)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002daa:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <HAL_GPIO_Init+0x300>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dce:	4a26      	ldr	r2, [pc, #152]	; (8002e68 <HAL_GPIO_Init+0x300>)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_GPIO_Init+0x300>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002df8:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <HAL_GPIO_Init+0x300>)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <HAL_GPIO_Init+0x300>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e22:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_GPIO_Init+0x300>)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f ae9d 	bne.w	8002b78 <HAL_GPIO_Init+0x10>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010000 	.word	0x40010000
 8002e54:	48000400 	.word	0x48000400
 8002e58:	48000800 	.word	0x48000800
 8002e5c:	48000c00 	.word	0x48000c00
 8002e60:	48001000 	.word	0x48001000
 8002e64:	48001400 	.word	0x48001400
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e001      	b.n	8002e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb8:	e002      	b.n	8002ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d141      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eda:	4b4b      	ldr	r3, [pc, #300]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee6:	d131      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee8:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eee:	4a46      	ldr	r2, [pc, #280]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef8:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f00:	4a41      	ldr	r2, [pc, #260]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f08:	4b40      	ldr	r3, [pc, #256]	; (800300c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2232      	movs	r2, #50	; 0x32
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a3f      	ldr	r2, [pc, #252]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	0c9b      	lsrs	r3, r3, #18
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1e:	e002      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d102      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f2      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f3a:	4b33      	ldr	r3, [pc, #204]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f46:	d158      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e057      	b.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f4c:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	4a2d      	ldr	r2, [pc, #180]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f5c:	e04d      	b.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f64:	d141      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f66:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f72:	d131      	bne.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7a:	4a23      	ldr	r2, [pc, #140]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2232      	movs	r2, #50	; 0x32
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002faa:	e002      	b.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbe:	d102      	bne.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f2      	bne.n	8002fac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd2:	d112      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e011      	b.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fde:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fe8:	e007      	b.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40007000 	.word	0x40007000
 800300c:	20000000 	.word	0x20000000
 8003010:	431bde83 	.word	0x431bde83

08003014 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a04      	ldr	r2, [pc, #16]	; (8003030 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800301e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003022:	6093      	str	r3, [r2, #8]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40007000 	.word	0x40007000

08003034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e308      	b.n	8003658 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d075      	beq.n	800313e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	4ba3      	ldr	r3, [pc, #652]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305c:	4ba0      	ldr	r3, [pc, #640]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d102      	bne.n	8003072 <HAL_RCC_OscConfig+0x3e>
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d002      	beq.n	8003078 <HAL_RCC_OscConfig+0x44>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d10b      	bne.n	8003090 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	4b99      	ldr	r3, [pc, #612]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d05b      	beq.n	800313c <HAL_RCC_OscConfig+0x108>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d157      	bne.n	800313c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e2e3      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d106      	bne.n	80030a8 <HAL_RCC_OscConfig+0x74>
 800309a:	4b91      	ldr	r3, [pc, #580]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a90      	ldr	r2, [pc, #576]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e01d      	b.n	80030e4 <HAL_RCC_OscConfig+0xb0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x98>
 80030b2:	4b8b      	ldr	r3, [pc, #556]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a8a      	ldr	r2, [pc, #552]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a87      	ldr	r2, [pc, #540]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0xb0>
 80030cc:	4b84      	ldr	r3, [pc, #528]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a83      	ldr	r2, [pc, #524]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a80      	ldr	r2, [pc, #512]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d013      	beq.n	8003114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7ff fa70 	bl	80025d0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7ff fa6c 	bl	80025d0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e2a8      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0xc0>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7ff fa5c 	bl	80025d0 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7ff fa58 	bl	80025d0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e294      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800312e:	4b6c      	ldr	r3, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0xe8>
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d075      	beq.n	8003236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314a:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003154:	4b62      	ldr	r3, [pc, #392]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	d102      	bne.n	800316a <HAL_RCC_OscConfig+0x136>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d002      	beq.n	8003170 <HAL_RCC_OscConfig+0x13c>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d11f      	bne.n	80031b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003170:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_OscConfig+0x154>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e267      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b55      	ldr	r3, [pc, #340]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	4952      	ldr	r1, [pc, #328]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800319c:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCC_OscConfig+0x2b0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff f9c9 	bl	8002538 <HAL_InitTick>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d043      	beq.n	8003234 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e253      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d023      	beq.n	8003200 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a48      	ldr	r2, [pc, #288]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7ff fa04 	bl	80025d0 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031cc:	f7ff fa00 	bl	80025d0 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e23c      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031de:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	4939      	ldr	r1, [pc, #228]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]
 80031fe:	e01a      	b.n	8003236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003200:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a36      	ldr	r2, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7ff f9e0 	bl	80025d0 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003214:	f7ff f9dc 	bl	80025d0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e218      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x1e0>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03c      	beq.n	80032bc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01c      	beq.n	8003284 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003250:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325a:	f7ff f9b9 	bl	80025d0 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003262:	f7ff f9b5 	bl	80025d0 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e1f1      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ef      	beq.n	8003262 <HAL_RCC_OscConfig+0x22e>
 8003282:	e01b      	b.n	80032bc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328a:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7ff f99c 	bl	80025d0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329c:	f7ff f998 	bl	80025d0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1d4      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ef      	bne.n	800329c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80ab 	beq.w	8003420 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x2b4>
 80032da:	2301      	movs	r3, #1
 80032dc:	e005      	b.n	80032ea <HAL_RCC_OscConfig+0x2b6>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	20000004 	.word	0x20000004
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	4baf      	ldr	r3, [pc, #700]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	4aae      	ldr	r2, [pc, #696]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80032f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f8:	6593      	str	r3, [r2, #88]	; 0x58
 80032fa:	4bac      	ldr	r3, [pc, #688]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003306:	2301      	movs	r3, #1
 8003308:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330a:	4ba9      	ldr	r3, [pc, #676]	; (80035b0 <HAL_RCC_OscConfig+0x57c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d118      	bne.n	8003348 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003316:	4ba6      	ldr	r3, [pc, #664]	; (80035b0 <HAL_RCC_OscConfig+0x57c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4aa5      	ldr	r2, [pc, #660]	; (80035b0 <HAL_RCC_OscConfig+0x57c>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003322:	f7ff f955 	bl	80025d0 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332a:	f7ff f951 	bl	80025d0 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e18d      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333c:	4b9c      	ldr	r3, [pc, #624]	; (80035b0 <HAL_RCC_OscConfig+0x57c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d108      	bne.n	8003362 <HAL_RCC_OscConfig+0x32e>
 8003350:	4b96      	ldr	r3, [pc, #600]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	4a95      	ldr	r2, [pc, #596]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003360:	e024      	b.n	80033ac <HAL_RCC_OscConfig+0x378>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b05      	cmp	r3, #5
 8003368:	d110      	bne.n	800338c <HAL_RCC_OscConfig+0x358>
 800336a:	4b90      	ldr	r3, [pc, #576]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	4a8e      	ldr	r2, [pc, #568]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003372:	f043 0304 	orr.w	r3, r3, #4
 8003376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800337a:	4b8c      	ldr	r3, [pc, #560]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	4a8a      	ldr	r2, [pc, #552]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800338a:	e00f      	b.n	80033ac <HAL_RCC_OscConfig+0x378>
 800338c:	4b87      	ldr	r3, [pc, #540]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	4a86      	ldr	r2, [pc, #536]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339c:	4b83      	ldr	r3, [pc, #524]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	4a82      	ldr	r2, [pc, #520]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d016      	beq.n	80033e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7ff f90c 	bl	80025d0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7ff f908 	bl	80025d0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e142      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d2:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ed      	beq.n	80033bc <HAL_RCC_OscConfig+0x388>
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7ff f8f5 	bl	80025d0 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7ff f8f1 	bl	80025d0 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e12b      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ed      	bne.n	80033ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800340e:	7ffb      	ldrb	r3, [r7, #31]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	4a64      	ldr	r2, [pc, #400]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01c      	beq.n	800346e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003434:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800343a:	4a5c      	ldr	r2, [pc, #368]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7ff f8c4 	bl	80025d0 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800344c:	f7ff f8c0 	bl	80025d0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0fc      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800345e:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ef      	beq.n	800344c <HAL_RCC_OscConfig+0x418>
 800346c:	e01b      	b.n	80034a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800346e:	4b4f      	ldr	r3, [pc, #316]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003474:	4a4d      	ldr	r2, [pc, #308]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7ff f8a7 	bl	80025d0 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003486:	f7ff f8a3 	bl	80025d0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e0df      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003498:	4b44      	ldr	r3, [pc, #272]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ef      	bne.n	8003486 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80d3 	beq.w	8003656 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034b0:	4b3e      	ldr	r3, [pc, #248]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	f000 808d 	beq.w	80035d8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d15a      	bne.n	800357c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a38      	ldr	r2, [pc, #224]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80034cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7ff f87d 	bl	80025d0 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034da:	f7ff f879 	bl	80025d0 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0b5      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f0      	bne.n	80034da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_RCC_OscConfig+0x580>)
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6a11      	ldr	r1, [r2, #32]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003508:	3a01      	subs	r2, #1
 800350a:	0112      	lsls	r2, r2, #4
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003512:	0212      	lsls	r2, r2, #8
 8003514:	4311      	orrs	r1, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800351a:	0852      	lsrs	r2, r2, #1
 800351c:	3a01      	subs	r2, #1
 800351e:	0552      	lsls	r2, r2, #21
 8003520:	4311      	orrs	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003526:	0852      	lsrs	r2, r2, #1
 8003528:	3a01      	subs	r2, #1
 800352a:	0652      	lsls	r2, r2, #25
 800352c:	4311      	orrs	r1, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003532:	06d2      	lsls	r2, r2, #27
 8003534:	430a      	orrs	r2, r1
 8003536:	491d      	ldr	r1, [pc, #116]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003538:	4313      	orrs	r3, r2
 800353a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003546:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a17      	ldr	r2, [pc, #92]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800354e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003552:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7ff f83c 	bl	80025d0 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355c:	f7ff f838 	bl	80025d0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e074      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x528>
 800357a:	e06c      	b.n	8003656 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003586:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a07      	ldr	r2, [pc, #28]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_RCC_OscConfig+0x578>)
 800359a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7ff f814 	bl	80025d0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035aa:	e00e      	b.n	80035ca <HAL_RCC_OscConfig+0x596>
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
 80035b4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7ff f80a 	bl	80025d0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e046      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ca:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_RCC_OscConfig+0x62c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x584>
 80035d6:	e03e      	b.n	8003656 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e039      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_RCC_OscConfig+0x62c>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0203 	and.w	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d12c      	bne.n	8003652 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	3b01      	subs	r3, #1
 8003604:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d123      	bne.n	8003652 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d11b      	bne.n	8003652 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d113      	bne.n	8003652 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	3b01      	subs	r3, #1
 8003638:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d109      	bne.n	8003652 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	3b01      	subs	r3, #1
 800364c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d001      	beq.n	8003656 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000

08003664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e11e      	b.n	80038ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b91      	ldr	r3, [pc, #580]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d910      	bls.n	80036ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b8e      	ldr	r3, [pc, #568]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 020f 	bic.w	r2, r3, #15
 8003692:	498c      	ldr	r1, [pc, #560]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b8a      	ldr	r3, [pc, #552]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e106      	b.n	80038ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d073      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d129      	bne.n	8003714 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c0:	4b81      	ldr	r3, [pc, #516]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0f4      	b.n	80038ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036d0:	f000 f966 	bl	80039a0 <RCC_GetSysClockFreqFromPLLSource>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4a7c      	ldr	r2, [pc, #496]	; (80038cc <HAL_RCC_ClockConfig+0x268>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d93f      	bls.n	800375e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036de:	4b7a      	ldr	r3, [pc, #488]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d033      	beq.n	800375e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d12f      	bne.n	800375e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036fe:	4b72      	ldr	r3, [pc, #456]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003706:	4a70      	ldr	r2, [pc, #448]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 8003708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e024      	b.n	800375e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d107      	bne.n	800372c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800371c:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0c6      	b.n	80038ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800372c:	4b66      	ldr	r3, [pc, #408]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0be      	b.n	80038ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800373c:	f000 f8ce 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003740:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4a61      	ldr	r2, [pc, #388]	; (80038cc <HAL_RCC_ClockConfig+0x268>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d909      	bls.n	800375e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800374a:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 8003754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003758:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4957      	ldr	r1, [pc, #348]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 800376c:	4313      	orrs	r3, r2
 800376e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003770:	f7fe ff2e 	bl	80025d0 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe ff2a 	bl	80025d0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e095      	b.n	80038ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d023      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b8:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a42      	ldr	r2, [pc, #264]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80037be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037d8:	4a3b      	ldr	r2, [pc, #236]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80037da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4936      	ldr	r1, [pc, #216]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
 80037f2:	e008      	b.n	8003806 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b80      	cmp	r3, #128	; 0x80
 80037f8:	d105      	bne.n	8003806 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037fa:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4a32      	ldr	r2, [pc, #200]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 8003800:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003804:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003806:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d21d      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 020f 	bic.w	r2, r3, #15
 800381c:	4929      	ldr	r1, [pc, #164]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003824:	f7fe fed4 	bl	80025d0 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fe fed0 	bl	80025d0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e03b      	b.n	80038ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_RCC_ClockConfig+0x260>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d1ed      	bne.n	800382c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4917      	ldr	r1, [pc, #92]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	490f      	ldr	r1, [pc, #60]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800388e:	f000 f825 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003892:	4602      	mov	r2, r0
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <HAL_RCC_ClockConfig+0x264>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	490c      	ldr	r1, [pc, #48]	; (80038d0 <HAL_RCC_ClockConfig+0x26c>)
 80038a0:	5ccb      	ldrb	r3, [r1, r3]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x270>)
 80038ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x274>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fe40 	bl	8002538 <HAL_InitTick>
 80038b8:	4603      	mov	r3, r0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40022000 	.word	0x40022000
 80038c8:	40021000 	.word	0x40021000
 80038cc:	04c4b400 	.word	0x04c4b400
 80038d0:	08005910 	.word	0x08005910
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000004 	.word	0x20000004

080038dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038e2:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d102      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	e047      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d102      	bne.n	8003906 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	e03e      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003906:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d136      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3301      	adds	r3, #1
 8003928:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d10c      	bne.n	800394a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003930:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	4a16      	ldr	r2, [pc, #88]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800393a:	68d2      	ldr	r2, [r2, #12]
 800393c:	0a12      	lsrs	r2, r2, #8
 800393e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	617b      	str	r3, [r7, #20]
      break;
 8003948:	e00c      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800394a:	4a13      	ldr	r2, [pc, #76]	; (8003998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	0a12      	lsrs	r2, r2, #8
 8003958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
      break;
 8003962:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	0e5b      	lsrs	r3, r3, #25
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e001      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003984:	693b      	ldr	r3, [r7, #16]
}
 8003986:	4618      	mov	r0, r3
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000
 8003998:	00f42400 	.word	0x00f42400
 800399c:	01e84800 	.word	0x01e84800

080039a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d10c      	bne.n	80039de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039c4:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ce:	68d2      	ldr	r2, [r2, #12]
 80039d0:	0a12      	lsrs	r2, r2, #8
 80039d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	617b      	str	r3, [r7, #20]
    break;
 80039dc:	e00c      	b.n	80039f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039e8:	68d2      	ldr	r2, [r2, #12]
 80039ea:	0a12      	lsrs	r2, r2, #8
 80039ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
    break;
 80039f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	0e5b      	lsrs	r3, r3, #25
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	3301      	adds	r3, #1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a12:	687b      	ldr	r3, [r7, #4]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40021000 	.word	0x40021000
 8003a24:	01e84800 	.word	0x01e84800
 8003a28:	00f42400 	.word	0x00f42400

08003a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a34:	2300      	movs	r3, #0
 8003a36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a38:	2300      	movs	r3, #0
 8003a3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8098 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	4a3f      	ldr	r2, [pc, #252]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6593      	str	r3, [r2, #88]	; 0x58
 8003a66:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a76:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a39      	ldr	r2, [pc, #228]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a82:	f7fe fda5 	bl	80025d0 <HAL_GetTick>
 8003a86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a88:	e009      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7fe fda1 	bl	80025d0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d902      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	74fb      	strb	r3, [r7, #19]
        break;
 8003a9c:	e005      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a9e:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ef      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d159      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ab0:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01e      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d019      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003acc:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ad8:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae8:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003af8:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fd61 	bl	80025d0 <HAL_GetTick>
 8003b0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b10:	e00b      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fe fd5d 	bl	80025d0 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d902      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	74fb      	strb	r3, [r7, #19]
            break;
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2a:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ec      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b54:	e008      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	74bb      	strb	r3, [r7, #18]
 8003b5a:	e005      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b68:	7c7b      	ldrb	r3, [r7, #17]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4ba6      	ldr	r3, [pc, #664]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	4aa5      	ldr	r2, [pc, #660]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b86:	4ba0      	ldr	r3, [pc, #640]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f023 0203 	bic.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	499c      	ldr	r1, [pc, #624]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ba8:	4b97      	ldr	r3, [pc, #604]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f023 020c 	bic.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4994      	ldr	r1, [pc, #592]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bca:	4b8f      	ldr	r3, [pc, #572]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	498b      	ldr	r1, [pc, #556]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bec:	4b86      	ldr	r3, [pc, #536]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	4983      	ldr	r1, [pc, #524]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c0e:	4b7e      	ldr	r3, [pc, #504]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	497a      	ldr	r1, [pc, #488]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c30:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	4972      	ldr	r1, [pc, #456]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c52:	4b6d      	ldr	r3, [pc, #436]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	4969      	ldr	r1, [pc, #420]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c74:	4b64      	ldr	r3, [pc, #400]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4961      	ldr	r1, [pc, #388]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c96:	4b5c      	ldr	r3, [pc, #368]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	4958      	ldr	r1, [pc, #352]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb8:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	4950      	ldr	r1, [pc, #320]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd8:	4b4b      	ldr	r3, [pc, #300]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a4a      	ldr	r2, [pc, #296]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cf0:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	4942      	ldr	r1, [pc, #264]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d10:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a3c      	ldr	r2, [pc, #240]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d28:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4934      	ldr	r1, [pc, #208]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d48:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a2e      	ldr	r2, [pc, #184]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d60:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	4926      	ldr	r1, [pc, #152]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a20      	ldr	r2, [pc, #128]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d015      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	4918      	ldr	r1, [pc, #96]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	490a      	ldr	r1, [pc, #40]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dee:	d105      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000

08003e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e049      	b.n	8003eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd f912 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f000 fb76 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d001      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e04a      	b.n	8003f6a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d018      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x6c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d013      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x6c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_TIM_Base_Start_IT+0xc0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00e      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x6c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x6c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x6c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d115      	bne.n	8003f54 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d015      	beq.n	8003f66 <HAL_TIM_Base_Start_IT+0xaa>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d011      	beq.n	8003f66 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	e008      	b.n	8003f66 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e000      	b.n	8003f68 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40013400 	.word	0x40013400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	00010007 	.word	0x00010007

08003f90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10f      	bne.n	8003fd8 <HAL_TIM_Base_Stop_IT+0x48>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	f244 4344 	movw	r3, #17476	; 0x4444
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_Base_Stop_IT+0x48>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d122      	bne.n	800404a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d11b      	bne.n	800404a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0202 	mvn.w	r2, #2
 800401a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fa65 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8004036:	e005      	b.n	8004044 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fa57 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa68 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d122      	bne.n	800409e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d11b      	bne.n	800409e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f06f 0204 	mvn.w	r2, #4
 800406e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fa3b 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 800408a:	e005      	b.n	8004098 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fa2d 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fa3e 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d122      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d11b      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0208 	mvn.w	r2, #8
 80040c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2204      	movs	r2, #4
 80040c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa11 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 80040de:	e005      	b.n	80040ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fa03 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fa14 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d122      	bne.n	8004146 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d11b      	bne.n	8004146 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f06f 0210 	mvn.w	r2, #16
 8004116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2208      	movs	r2, #8
 800411c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f9e7 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8004132:	e005      	b.n	8004140 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f9d9 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9ea 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10e      	bne.n	8004172 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f06f 0201 	mvn.w	r2, #1
 800416a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f9b3 	bl	80044d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d10e      	bne.n	800419e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d107      	bne.n	800419e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fb87 	bl	80048ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d107      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fb7a 	bl	80048c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f998 	bl	8004528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b20      	cmp	r3, #32
 8004204:	d10e      	bne.n	8004224 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b20      	cmp	r3, #32
 8004212:	d107      	bne.n	8004224 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0220 	mvn.w	r2, #32
 800421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb3a 	bl	8004898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004232:	d10f      	bne.n	8004254 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fb40 	bl	80048d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800425e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004262:	d10f      	bne.n	8004284 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fb32 	bl	80048e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d10f      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fb24 	bl	80048fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042c2:	d10f      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d2:	d107      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb16 	bl	8004910 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_TIM_ConfigClockSource+0x18>
 8004300:	2302      	movs	r3, #2
 8004302:	e0dd      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x1d4>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004326:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800432e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a62      	ldr	r2, [pc, #392]	; (80044c8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	f000 80a9 	beq.w	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
 8004344:	4a60      	ldr	r2, [pc, #384]	; (80044c8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	f200 80ae 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800434c:	4a5f      	ldr	r2, [pc, #380]	; (80044cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	f000 80a1 	beq.w	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
 8004354:	4a5d      	ldr	r2, [pc, #372]	; (80044cc <HAL_TIM_ConfigClockSource+0x1e0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f200 80a6 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800435c:	4a5c      	ldr	r2, [pc, #368]	; (80044d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	f000 8099 	beq.w	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
 8004364:	4a5a      	ldr	r2, [pc, #360]	; (80044d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	f200 809e 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800436c:	4a59      	ldr	r2, [pc, #356]	; (80044d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f000 8091 	beq.w	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
 8004374:	4a57      	ldr	r2, [pc, #348]	; (80044d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f200 8096 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800437c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004380:	f000 8089 	beq.w	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
 8004384:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004388:	f200 808e 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800438c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004390:	d03e      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0x124>
 8004392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004396:	f200 8087 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	f000 8085 	beq.w	80044ac <HAL_TIM_ConfigClockSource+0x1c0>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a6:	d87f      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80043a8:	2b70      	cmp	r3, #112	; 0x70
 80043aa:	d01a      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0xf6>
 80043ac:	2b70      	cmp	r3, #112	; 0x70
 80043ae:	d87b      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80043b0:	2b60      	cmp	r3, #96	; 0x60
 80043b2:	d050      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x16a>
 80043b4:	2b60      	cmp	r3, #96	; 0x60
 80043b6:	d877      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80043b8:	2b50      	cmp	r3, #80	; 0x50
 80043ba:	d03c      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x14a>
 80043bc:	2b50      	cmp	r3, #80	; 0x50
 80043be:	d873      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d058      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x18a>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d86f      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80043c8:	2b30      	cmp	r3, #48	; 0x30
 80043ca:	d064      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
 80043cc:	2b30      	cmp	r3, #48	; 0x30
 80043ce:	d86b      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d060      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d867      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d05c      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d05a      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043e0:	e062      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6899      	ldr	r1, [r3, #8]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f000 f9af 	bl	8004754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004404:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	609a      	str	r2, [r3, #8]
      break;
 800440e:	e04e      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f000 f998 	bl	8004754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004432:	609a      	str	r2, [r3, #8]
      break;
 8004434:	e03b      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 f90a 	bl	800465c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2150      	movs	r1, #80	; 0x50
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f963 	bl	800471a <TIM_ITRx_SetConfig>
      break;
 8004454:	e02b      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 f929 	bl	80046ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2160      	movs	r1, #96	; 0x60
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f953 	bl	800471a <TIM_ITRx_SetConfig>
      break;
 8004474:	e01b      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	461a      	mov	r2, r3
 8004484:	f000 f8ea 	bl	800465c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2140      	movs	r1, #64	; 0x40
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f943 	bl	800471a <TIM_ITRx_SetConfig>
      break;
 8004494:	e00b      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f000 f93a 	bl	800471a <TIM_ITRx_SetConfig>
        break;
 80044a6:	e002      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 80044ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	00100070 	.word	0x00100070
 80044cc:	00100040 	.word	0x00100040
 80044d0:	00100030 	.word	0x00100030
 80044d4:	00100020 	.word	0x00100020

080044d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3c      	ldr	r2, [pc, #240]	; (8004640 <TIM_Base_SetConfig+0x104>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00f      	beq.n	8004574 <TIM_Base_SetConfig+0x38>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d00b      	beq.n	8004574 <TIM_Base_SetConfig+0x38>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a39      	ldr	r2, [pc, #228]	; (8004644 <TIM_Base_SetConfig+0x108>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_Base_SetConfig+0x38>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a38      	ldr	r2, [pc, #224]	; (8004648 <TIM_Base_SetConfig+0x10c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_Base_SetConfig+0x38>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a37      	ldr	r2, [pc, #220]	; (800464c <TIM_Base_SetConfig+0x110>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d108      	bne.n	8004586 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2d      	ldr	r2, [pc, #180]	; (8004640 <TIM_Base_SetConfig+0x104>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01b      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004594:	d017      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <TIM_Base_SetConfig+0x108>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a29      	ldr	r2, [pc, #164]	; (8004648 <TIM_Base_SetConfig+0x10c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a28      	ldr	r2, [pc, #160]	; (800464c <TIM_Base_SetConfig+0x110>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a27      	ldr	r2, [pc, #156]	; (8004650 <TIM_Base_SetConfig+0x114>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a26      	ldr	r2, [pc, #152]	; (8004654 <TIM_Base_SetConfig+0x118>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a25      	ldr	r2, [pc, #148]	; (8004658 <TIM_Base_SetConfig+0x11c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a10      	ldr	r2, [pc, #64]	; (8004640 <TIM_Base_SetConfig+0x104>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00f      	beq.n	8004624 <TIM_Base_SetConfig+0xe8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a11      	ldr	r2, [pc, #68]	; (800464c <TIM_Base_SetConfig+0x110>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_Base_SetConfig+0xe8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_Base_SetConfig+0xe8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a0f      	ldr	r2, [pc, #60]	; (8004654 <TIM_Base_SetConfig+0x118>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0xe8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <TIM_Base_SetConfig+0x11c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	615a      	str	r2, [r3, #20]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40013400 	.word	0x40013400
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800

0800465c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0201 	bic.w	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 030a 	bic.w	r3, r3, #10
 8004698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b087      	sub	sp, #28
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f023 0210 	bic.w	r2, r3, #16
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	031b      	lsls	r3, r3, #12
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	f043 0307 	orr.w	r3, r3, #7
 8004740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800476e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	431a      	orrs	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4313      	orrs	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e065      	b.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2c      	ldr	r2, [pc, #176]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2b      	ldr	r2, [pc, #172]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d108      	bne.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d018      	beq.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d013      	beq.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a12      	ldr	r2, [pc, #72]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a13      	ldr	r2, [pc, #76]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10c      	bne.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004852:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	4313      	orrs	r3, r2
 800485c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40013400 	.word	0x40013400
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40014000 	.word	0x40014000

08004898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <__errno>:
 8004924:	4b01      	ldr	r3, [pc, #4]	; (800492c <__errno+0x8>)
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c

08004930 <__libc_init_array>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4d0d      	ldr	r5, [pc, #52]	; (8004968 <__libc_init_array+0x38>)
 8004934:	4c0d      	ldr	r4, [pc, #52]	; (800496c <__libc_init_array+0x3c>)
 8004936:	1b64      	subs	r4, r4, r5
 8004938:	10a4      	asrs	r4, r4, #2
 800493a:	2600      	movs	r6, #0
 800493c:	42a6      	cmp	r6, r4
 800493e:	d109      	bne.n	8004954 <__libc_init_array+0x24>
 8004940:	4d0b      	ldr	r5, [pc, #44]	; (8004970 <__libc_init_array+0x40>)
 8004942:	4c0c      	ldr	r4, [pc, #48]	; (8004974 <__libc_init_array+0x44>)
 8004944:	f000 ffd6 	bl	80058f4 <_init>
 8004948:	1b64      	subs	r4, r4, r5
 800494a:	10a4      	asrs	r4, r4, #2
 800494c:	2600      	movs	r6, #0
 800494e:	42a6      	cmp	r6, r4
 8004950:	d105      	bne.n	800495e <__libc_init_array+0x2e>
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f855 3b04 	ldr.w	r3, [r5], #4
 8004958:	4798      	blx	r3
 800495a:	3601      	adds	r6, #1
 800495c:	e7ee      	b.n	800493c <__libc_init_array+0xc>
 800495e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004962:	4798      	blx	r3
 8004964:	3601      	adds	r6, #1
 8004966:	e7f2      	b.n	800494e <__libc_init_array+0x1e>
 8004968:	08005968 	.word	0x08005968
 800496c:	08005968 	.word	0x08005968
 8004970:	08005968 	.word	0x08005968
 8004974:	0800596c 	.word	0x0800596c

08004978 <memset>:
 8004978:	4402      	add	r2, r0
 800497a:	4603      	mov	r3, r0
 800497c:	4293      	cmp	r3, r2
 800497e:	d100      	bne.n	8004982 <memset+0xa>
 8004980:	4770      	bx	lr
 8004982:	f803 1b01 	strb.w	r1, [r3], #1
 8004986:	e7f9      	b.n	800497c <memset+0x4>

08004988 <pow>:
 8004988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800498c:	ec59 8b10 	vmov	r8, r9, d0
 8004990:	ec57 6b11 	vmov	r6, r7, d1
 8004994:	f000 f8a8 	bl	8004ae8 <__ieee754_pow>
 8004998:	4b4e      	ldr	r3, [pc, #312]	; (8004ad4 <pow+0x14c>)
 800499a:	f993 3000 	ldrsb.w	r3, [r3]
 800499e:	3301      	adds	r3, #1
 80049a0:	ec55 4b10 	vmov	r4, r5, d0
 80049a4:	d015      	beq.n	80049d2 <pow+0x4a>
 80049a6:	4632      	mov	r2, r6
 80049a8:	463b      	mov	r3, r7
 80049aa:	4630      	mov	r0, r6
 80049ac:	4639      	mov	r1, r7
 80049ae:	f7fc f889 	bl	8000ac4 <__aeabi_dcmpun>
 80049b2:	b970      	cbnz	r0, 80049d2 <pow+0x4a>
 80049b4:	4642      	mov	r2, r8
 80049b6:	464b      	mov	r3, r9
 80049b8:	4640      	mov	r0, r8
 80049ba:	4649      	mov	r1, r9
 80049bc:	f7fc f882 	bl	8000ac4 <__aeabi_dcmpun>
 80049c0:	2200      	movs	r2, #0
 80049c2:	2300      	movs	r3, #0
 80049c4:	b148      	cbz	r0, 80049da <pow+0x52>
 80049c6:	4630      	mov	r0, r6
 80049c8:	4639      	mov	r1, r7
 80049ca:	f7fc f849 	bl	8000a60 <__aeabi_dcmpeq>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d17d      	bne.n	8004ace <pow+0x146>
 80049d2:	ec45 4b10 	vmov	d0, r4, r5
 80049d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049da:	4640      	mov	r0, r8
 80049dc:	4649      	mov	r1, r9
 80049de:	f7fc f83f 	bl	8000a60 <__aeabi_dcmpeq>
 80049e2:	b1e0      	cbz	r0, 8004a1e <pow+0x96>
 80049e4:	2200      	movs	r2, #0
 80049e6:	2300      	movs	r3, #0
 80049e8:	4630      	mov	r0, r6
 80049ea:	4639      	mov	r1, r7
 80049ec:	f7fc f838 	bl	8000a60 <__aeabi_dcmpeq>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d16c      	bne.n	8004ace <pow+0x146>
 80049f4:	ec47 6b10 	vmov	d0, r6, r7
 80049f8:	f000 fe55 	bl	80056a6 <finite>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d0e8      	beq.n	80049d2 <pow+0x4a>
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	4630      	mov	r0, r6
 8004a06:	4639      	mov	r1, r7
 8004a08:	f7fc f834 	bl	8000a74 <__aeabi_dcmplt>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d0e0      	beq.n	80049d2 <pow+0x4a>
 8004a10:	f7ff ff88 	bl	8004924 <__errno>
 8004a14:	2321      	movs	r3, #33	; 0x21
 8004a16:	6003      	str	r3, [r0, #0]
 8004a18:	2400      	movs	r4, #0
 8004a1a:	4d2f      	ldr	r5, [pc, #188]	; (8004ad8 <pow+0x150>)
 8004a1c:	e7d9      	b.n	80049d2 <pow+0x4a>
 8004a1e:	ec45 4b10 	vmov	d0, r4, r5
 8004a22:	f000 fe40 	bl	80056a6 <finite>
 8004a26:	bbb8      	cbnz	r0, 8004a98 <pow+0x110>
 8004a28:	ec49 8b10 	vmov	d0, r8, r9
 8004a2c:	f000 fe3b 	bl	80056a6 <finite>
 8004a30:	b390      	cbz	r0, 8004a98 <pow+0x110>
 8004a32:	ec47 6b10 	vmov	d0, r6, r7
 8004a36:	f000 fe36 	bl	80056a6 <finite>
 8004a3a:	b368      	cbz	r0, 8004a98 <pow+0x110>
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	462b      	mov	r3, r5
 8004a40:	4620      	mov	r0, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7fc f83e 	bl	8000ac4 <__aeabi_dcmpun>
 8004a48:	b160      	cbz	r0, 8004a64 <pow+0xdc>
 8004a4a:	f7ff ff6b 	bl	8004924 <__errno>
 8004a4e:	2321      	movs	r3, #33	; 0x21
 8004a50:	6003      	str	r3, [r0, #0]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2300      	movs	r3, #0
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f7fb fec3 	bl	80007e4 <__aeabi_ddiv>
 8004a5e:	4604      	mov	r4, r0
 8004a60:	460d      	mov	r5, r1
 8004a62:	e7b6      	b.n	80049d2 <pow+0x4a>
 8004a64:	f7ff ff5e 	bl	8004924 <__errno>
 8004a68:	2322      	movs	r3, #34	; 0x22
 8004a6a:	6003      	str	r3, [r0, #0]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2300      	movs	r3, #0
 8004a70:	4640      	mov	r0, r8
 8004a72:	4649      	mov	r1, r9
 8004a74:	f7fb fffe 	bl	8000a74 <__aeabi_dcmplt>
 8004a78:	2400      	movs	r4, #0
 8004a7a:	b158      	cbz	r0, 8004a94 <pow+0x10c>
 8004a7c:	ec47 6b10 	vmov	d0, r6, r7
 8004a80:	f000 fe26 	bl	80056d0 <rint>
 8004a84:	4632      	mov	r2, r6
 8004a86:	ec51 0b10 	vmov	r0, r1, d0
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	f7fb ffe8 	bl	8000a60 <__aeabi_dcmpeq>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d0c2      	beq.n	8004a1a <pow+0x92>
 8004a94:	4d11      	ldr	r5, [pc, #68]	; (8004adc <pow+0x154>)
 8004a96:	e79c      	b.n	80049d2 <pow+0x4a>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	f7fb ffde 	bl	8000a60 <__aeabi_dcmpeq>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d094      	beq.n	80049d2 <pow+0x4a>
 8004aa8:	ec49 8b10 	vmov	d0, r8, r9
 8004aac:	f000 fdfb 	bl	80056a6 <finite>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d08e      	beq.n	80049d2 <pow+0x4a>
 8004ab4:	ec47 6b10 	vmov	d0, r6, r7
 8004ab8:	f000 fdf5 	bl	80056a6 <finite>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d088      	beq.n	80049d2 <pow+0x4a>
 8004ac0:	f7ff ff30 	bl	8004924 <__errno>
 8004ac4:	2322      	movs	r3, #34	; 0x22
 8004ac6:	6003      	str	r3, [r0, #0]
 8004ac8:	2400      	movs	r4, #0
 8004aca:	2500      	movs	r5, #0
 8004acc:	e781      	b.n	80049d2 <pow+0x4a>
 8004ace:	4d04      	ldr	r5, [pc, #16]	; (8004ae0 <pow+0x158>)
 8004ad0:	2400      	movs	r4, #0
 8004ad2:	e77e      	b.n	80049d2 <pow+0x4a>
 8004ad4:	20000070 	.word	0x20000070
 8004ad8:	fff00000 	.word	0xfff00000
 8004adc:	7ff00000 	.word	0x7ff00000
 8004ae0:	3ff00000 	.word	0x3ff00000
 8004ae4:	00000000 	.word	0x00000000

08004ae8 <__ieee754_pow>:
 8004ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aec:	ed2d 8b06 	vpush	{d8-d10}
 8004af0:	b08d      	sub	sp, #52	; 0x34
 8004af2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004af6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8004afa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004afe:	ea56 0100 	orrs.w	r1, r6, r0
 8004b02:	ec53 2b10 	vmov	r2, r3, d0
 8004b06:	f000 84d1 	beq.w	80054ac <__ieee754_pow+0x9c4>
 8004b0a:	497f      	ldr	r1, [pc, #508]	; (8004d08 <__ieee754_pow+0x220>)
 8004b0c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004b10:	428c      	cmp	r4, r1
 8004b12:	ee10 8a10 	vmov	r8, s0
 8004b16:	4699      	mov	r9, r3
 8004b18:	dc09      	bgt.n	8004b2e <__ieee754_pow+0x46>
 8004b1a:	d103      	bne.n	8004b24 <__ieee754_pow+0x3c>
 8004b1c:	b97a      	cbnz	r2, 8004b3e <__ieee754_pow+0x56>
 8004b1e:	42a6      	cmp	r6, r4
 8004b20:	dd02      	ble.n	8004b28 <__ieee754_pow+0x40>
 8004b22:	e00c      	b.n	8004b3e <__ieee754_pow+0x56>
 8004b24:	428e      	cmp	r6, r1
 8004b26:	dc02      	bgt.n	8004b2e <__ieee754_pow+0x46>
 8004b28:	428e      	cmp	r6, r1
 8004b2a:	d110      	bne.n	8004b4e <__ieee754_pow+0x66>
 8004b2c:	b178      	cbz	r0, 8004b4e <__ieee754_pow+0x66>
 8004b2e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004b32:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004b36:	ea54 0308 	orrs.w	r3, r4, r8
 8004b3a:	f000 84b7 	beq.w	80054ac <__ieee754_pow+0x9c4>
 8004b3e:	4873      	ldr	r0, [pc, #460]	; (8004d0c <__ieee754_pow+0x224>)
 8004b40:	b00d      	add	sp, #52	; 0x34
 8004b42:	ecbd 8b06 	vpop	{d8-d10}
 8004b46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4a:	f000 bdb9 	b.w	80056c0 <nan>
 8004b4e:	f1b9 0f00 	cmp.w	r9, #0
 8004b52:	da36      	bge.n	8004bc2 <__ieee754_pow+0xda>
 8004b54:	496e      	ldr	r1, [pc, #440]	; (8004d10 <__ieee754_pow+0x228>)
 8004b56:	428e      	cmp	r6, r1
 8004b58:	dc51      	bgt.n	8004bfe <__ieee754_pow+0x116>
 8004b5a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8004b5e:	428e      	cmp	r6, r1
 8004b60:	f340 84af 	ble.w	80054c2 <__ieee754_pow+0x9da>
 8004b64:	1531      	asrs	r1, r6, #20
 8004b66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004b6a:	2914      	cmp	r1, #20
 8004b6c:	dd0f      	ble.n	8004b8e <__ieee754_pow+0xa6>
 8004b6e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004b72:	fa20 fc01 	lsr.w	ip, r0, r1
 8004b76:	fa0c f101 	lsl.w	r1, ip, r1
 8004b7a:	4281      	cmp	r1, r0
 8004b7c:	f040 84a1 	bne.w	80054c2 <__ieee754_pow+0x9da>
 8004b80:	f00c 0c01 	and.w	ip, ip, #1
 8004b84:	f1cc 0102 	rsb	r1, ip, #2
 8004b88:	9100      	str	r1, [sp, #0]
 8004b8a:	b180      	cbz	r0, 8004bae <__ieee754_pow+0xc6>
 8004b8c:	e059      	b.n	8004c42 <__ieee754_pow+0x15a>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d155      	bne.n	8004c3e <__ieee754_pow+0x156>
 8004b92:	f1c1 0114 	rsb	r1, r1, #20
 8004b96:	fa46 fc01 	asr.w	ip, r6, r1
 8004b9a:	fa0c f101 	lsl.w	r1, ip, r1
 8004b9e:	42b1      	cmp	r1, r6
 8004ba0:	f040 848c 	bne.w	80054bc <__ieee754_pow+0x9d4>
 8004ba4:	f00c 0c01 	and.w	ip, ip, #1
 8004ba8:	f1cc 0102 	rsb	r1, ip, #2
 8004bac:	9100      	str	r1, [sp, #0]
 8004bae:	4959      	ldr	r1, [pc, #356]	; (8004d14 <__ieee754_pow+0x22c>)
 8004bb0:	428e      	cmp	r6, r1
 8004bb2:	d12d      	bne.n	8004c10 <__ieee754_pow+0x128>
 8004bb4:	2f00      	cmp	r7, #0
 8004bb6:	da79      	bge.n	8004cac <__ieee754_pow+0x1c4>
 8004bb8:	4956      	ldr	r1, [pc, #344]	; (8004d14 <__ieee754_pow+0x22c>)
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f7fb fe12 	bl	80007e4 <__aeabi_ddiv>
 8004bc0:	e016      	b.n	8004bf0 <__ieee754_pow+0x108>
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	9100      	str	r1, [sp, #0]
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d13b      	bne.n	8004c42 <__ieee754_pow+0x15a>
 8004bca:	494f      	ldr	r1, [pc, #316]	; (8004d08 <__ieee754_pow+0x220>)
 8004bcc:	428e      	cmp	r6, r1
 8004bce:	d1ee      	bne.n	8004bae <__ieee754_pow+0xc6>
 8004bd0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004bd4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004bd8:	ea53 0308 	orrs.w	r3, r3, r8
 8004bdc:	f000 8466 	beq.w	80054ac <__ieee754_pow+0x9c4>
 8004be0:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <__ieee754_pow+0x230>)
 8004be2:	429c      	cmp	r4, r3
 8004be4:	dd0d      	ble.n	8004c02 <__ieee754_pow+0x11a>
 8004be6:	2f00      	cmp	r7, #0
 8004be8:	f280 8464 	bge.w	80054b4 <__ieee754_pow+0x9cc>
 8004bec:	2000      	movs	r0, #0
 8004bee:	2100      	movs	r1, #0
 8004bf0:	ec41 0b10 	vmov	d0, r0, r1
 8004bf4:	b00d      	add	sp, #52	; 0x34
 8004bf6:	ecbd 8b06 	vpop	{d8-d10}
 8004bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfe:	2102      	movs	r1, #2
 8004c00:	e7e0      	b.n	8004bc4 <__ieee754_pow+0xdc>
 8004c02:	2f00      	cmp	r7, #0
 8004c04:	daf2      	bge.n	8004bec <__ieee754_pow+0x104>
 8004c06:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8004c0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004c0e:	e7ef      	b.n	8004bf0 <__ieee754_pow+0x108>
 8004c10:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004c14:	d104      	bne.n	8004c20 <__ieee754_pow+0x138>
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fb fcb9 	bl	8000590 <__aeabi_dmul>
 8004c1e:	e7e7      	b.n	8004bf0 <__ieee754_pow+0x108>
 8004c20:	493e      	ldr	r1, [pc, #248]	; (8004d1c <__ieee754_pow+0x234>)
 8004c22:	428f      	cmp	r7, r1
 8004c24:	d10d      	bne.n	8004c42 <__ieee754_pow+0x15a>
 8004c26:	f1b9 0f00 	cmp.w	r9, #0
 8004c2a:	db0a      	blt.n	8004c42 <__ieee754_pow+0x15a>
 8004c2c:	ec43 2b10 	vmov	d0, r2, r3
 8004c30:	b00d      	add	sp, #52	; 0x34
 8004c32:	ecbd 8b06 	vpop	{d8-d10}
 8004c36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3a:	f000 bc77 	b.w	800552c <__ieee754_sqrt>
 8004c3e:	2100      	movs	r1, #0
 8004c40:	9100      	str	r1, [sp, #0]
 8004c42:	ec43 2b10 	vmov	d0, r2, r3
 8004c46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c4a:	f000 fd23 	bl	8005694 <fabs>
 8004c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c52:	ec51 0b10 	vmov	r0, r1, d0
 8004c56:	f1b8 0f00 	cmp.w	r8, #0
 8004c5a:	d12a      	bne.n	8004cb2 <__ieee754_pow+0x1ca>
 8004c5c:	b12c      	cbz	r4, 8004c6a <__ieee754_pow+0x182>
 8004c5e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8004d14 <__ieee754_pow+0x22c>
 8004c62:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8004c66:	45e6      	cmp	lr, ip
 8004c68:	d123      	bne.n	8004cb2 <__ieee754_pow+0x1ca>
 8004c6a:	2f00      	cmp	r7, #0
 8004c6c:	da05      	bge.n	8004c7a <__ieee754_pow+0x192>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	2000      	movs	r0, #0
 8004c74:	4927      	ldr	r1, [pc, #156]	; (8004d14 <__ieee754_pow+0x22c>)
 8004c76:	f7fb fdb5 	bl	80007e4 <__aeabi_ddiv>
 8004c7a:	f1b9 0f00 	cmp.w	r9, #0
 8004c7e:	dab7      	bge.n	8004bf0 <__ieee754_pow+0x108>
 8004c80:	9b00      	ldr	r3, [sp, #0]
 8004c82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004c86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004c8a:	4323      	orrs	r3, r4
 8004c8c:	d108      	bne.n	8004ca0 <__ieee754_pow+0x1b8>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	f7fb fac3 	bl	8000220 <__aeabi_dsub>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	e78d      	b.n	8004bbc <__ieee754_pow+0xd4>
 8004ca0:	9b00      	ldr	r3, [sp, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d1a4      	bne.n	8004bf0 <__ieee754_pow+0x108>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cac:	4610      	mov	r0, r2
 8004cae:	4619      	mov	r1, r3
 8004cb0:	e79e      	b.n	8004bf0 <__ieee754_pow+0x108>
 8004cb2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004cb6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8004cba:	950a      	str	r5, [sp, #40]	; 0x28
 8004cbc:	9d00      	ldr	r5, [sp, #0]
 8004cbe:	46ac      	mov	ip, r5
 8004cc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004cc2:	ea5c 0505 	orrs.w	r5, ip, r5
 8004cc6:	d0e4      	beq.n	8004c92 <__ieee754_pow+0x1aa>
 8004cc8:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <__ieee754_pow+0x238>)
 8004cca:	429e      	cmp	r6, r3
 8004ccc:	f340 80fc 	ble.w	8004ec8 <__ieee754_pow+0x3e0>
 8004cd0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004cd4:	429e      	cmp	r6, r3
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <__ieee754_pow+0x230>)
 8004cd8:	dd07      	ble.n	8004cea <__ieee754_pow+0x202>
 8004cda:	429c      	cmp	r4, r3
 8004cdc:	dc0a      	bgt.n	8004cf4 <__ieee754_pow+0x20c>
 8004cde:	2f00      	cmp	r7, #0
 8004ce0:	da84      	bge.n	8004bec <__ieee754_pow+0x104>
 8004ce2:	a307      	add	r3, pc, #28	; (adr r3, 8004d00 <__ieee754_pow+0x218>)
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	e795      	b.n	8004c16 <__ieee754_pow+0x12e>
 8004cea:	429c      	cmp	r4, r3
 8004cec:	dbf7      	blt.n	8004cde <__ieee754_pow+0x1f6>
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <__ieee754_pow+0x22c>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	dd17      	ble.n	8004d24 <__ieee754_pow+0x23c>
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	dcf4      	bgt.n	8004ce2 <__ieee754_pow+0x1fa>
 8004cf8:	e778      	b.n	8004bec <__ieee754_pow+0x104>
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w
 8004d00:	8800759c 	.word	0x8800759c
 8004d04:	7e37e43c 	.word	0x7e37e43c
 8004d08:	7ff00000 	.word	0x7ff00000
 8004d0c:	08005920 	.word	0x08005920
 8004d10:	433fffff 	.word	0x433fffff
 8004d14:	3ff00000 	.word	0x3ff00000
 8004d18:	3fefffff 	.word	0x3fefffff
 8004d1c:	3fe00000 	.word	0x3fe00000
 8004d20:	41e00000 	.word	0x41e00000
 8004d24:	4b64      	ldr	r3, [pc, #400]	; (8004eb8 <__ieee754_pow+0x3d0>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	f7fb fa7a 	bl	8000220 <__aeabi_dsub>
 8004d2c:	a356      	add	r3, pc, #344	; (adr r3, 8004e88 <__ieee754_pow+0x3a0>)
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	4604      	mov	r4, r0
 8004d34:	460d      	mov	r5, r1
 8004d36:	f7fb fc2b 	bl	8000590 <__aeabi_dmul>
 8004d3a:	a355      	add	r3, pc, #340	; (adr r3, 8004e90 <__ieee754_pow+0x3a8>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	4606      	mov	r6, r0
 8004d42:	460f      	mov	r7, r1
 8004d44:	4620      	mov	r0, r4
 8004d46:	4629      	mov	r1, r5
 8004d48:	f7fb fc22 	bl	8000590 <__aeabi_dmul>
 8004d4c:	4b5b      	ldr	r3, [pc, #364]	; (8004ebc <__ieee754_pow+0x3d4>)
 8004d4e:	4682      	mov	sl, r0
 8004d50:	468b      	mov	fp, r1
 8004d52:	2200      	movs	r2, #0
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb fc1a 	bl	8000590 <__aeabi_dmul>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	a14d      	add	r1, pc, #308	; (adr r1, 8004e98 <__ieee754_pow+0x3b0>)
 8004d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d66:	f7fb fa5b 	bl	8000220 <__aeabi_dsub>
 8004d6a:	4622      	mov	r2, r4
 8004d6c:	462b      	mov	r3, r5
 8004d6e:	f7fb fc0f 	bl	8000590 <__aeabi_dmul>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	2000      	movs	r0, #0
 8004d78:	4951      	ldr	r1, [pc, #324]	; (8004ec0 <__ieee754_pow+0x3d8>)
 8004d7a:	f7fb fa51 	bl	8000220 <__aeabi_dsub>
 8004d7e:	4622      	mov	r2, r4
 8004d80:	4680      	mov	r8, r0
 8004d82:	4689      	mov	r9, r1
 8004d84:	462b      	mov	r3, r5
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fc01 	bl	8000590 <__aeabi_dmul>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4640      	mov	r0, r8
 8004d94:	4649      	mov	r1, r9
 8004d96:	f7fb fbfb 	bl	8000590 <__aeabi_dmul>
 8004d9a:	a341      	add	r3, pc, #260	; (adr r3, 8004ea0 <__ieee754_pow+0x3b8>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fbf6 	bl	8000590 <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4650      	mov	r0, sl
 8004daa:	4659      	mov	r1, fp
 8004dac:	f7fb fa38 	bl	8000220 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4680      	mov	r8, r0
 8004db6:	4689      	mov	r9, r1
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb fa32 	bl	8000224 <__adddf3>
 8004dc0:	2400      	movs	r4, #0
 8004dc2:	4632      	mov	r2, r6
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	460d      	mov	r5, r1
 8004dca:	f7fb fa29 	bl	8000220 <__aeabi_dsub>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb fa23 	bl	8000220 <__aeabi_dsub>
 8004dda:	9b00      	ldr	r3, [sp, #0]
 8004ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dde:	3b01      	subs	r3, #1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	4682      	mov	sl, r0
 8004de4:	468b      	mov	fp, r1
 8004de6:	f040 81f1 	bne.w	80051cc <__ieee754_pow+0x6e4>
 8004dea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004ea8 <__ieee754_pow+0x3c0>
 8004dee:	eeb0 8a47 	vmov.f32	s16, s14
 8004df2:	eef0 8a67 	vmov.f32	s17, s15
 8004df6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004dfa:	2600      	movs	r6, #0
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	463b      	mov	r3, r7
 8004e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e04:	f7fb fa0c 	bl	8000220 <__aeabi_dsub>
 8004e08:	4622      	mov	r2, r4
 8004e0a:	462b      	mov	r3, r5
 8004e0c:	f7fb fbc0 	bl	8000590 <__aeabi_dmul>
 8004e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e14:	4680      	mov	r8, r0
 8004e16:	4689      	mov	r9, r1
 8004e18:	4650      	mov	r0, sl
 8004e1a:	4659      	mov	r1, fp
 8004e1c:	f7fb fbb8 	bl	8000590 <__aeabi_dmul>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4640      	mov	r0, r8
 8004e26:	4649      	mov	r1, r9
 8004e28:	f7fb f9fc 	bl	8000224 <__adddf3>
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	463b      	mov	r3, r7
 8004e30:	4680      	mov	r8, r0
 8004e32:	4689      	mov	r9, r1
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fbaa 	bl	8000590 <__aeabi_dmul>
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4604      	mov	r4, r0
 8004e40:	460d      	mov	r5, r1
 8004e42:	4602      	mov	r2, r0
 8004e44:	4649      	mov	r1, r9
 8004e46:	4640      	mov	r0, r8
 8004e48:	f7fb f9ec 	bl	8000224 <__adddf3>
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <__ieee754_pow+0x3dc>)
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	ec45 4b19 	vmov	d9, r4, r5
 8004e54:	4606      	mov	r6, r0
 8004e56:	460f      	mov	r7, r1
 8004e58:	468b      	mov	fp, r1
 8004e5a:	f340 82fe 	ble.w	800545a <__ieee754_pow+0x972>
 8004e5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004e62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004e66:	4303      	orrs	r3, r0
 8004e68:	f000 81f0 	beq.w	800524c <__ieee754_pow+0x764>
 8004e6c:	a310      	add	r3, pc, #64	; (adr r3, 8004eb0 <__ieee754_pow+0x3c8>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	ec51 0b18 	vmov	r0, r1, d8
 8004e76:	f7fb fb8b 	bl	8000590 <__aeabi_dmul>
 8004e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8004eb0 <__ieee754_pow+0x3c8>)
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	e6cb      	b.n	8004c1a <__ieee754_pow+0x132>
 8004e82:	bf00      	nop
 8004e84:	f3af 8000 	nop.w
 8004e88:	60000000 	.word	0x60000000
 8004e8c:	3ff71547 	.word	0x3ff71547
 8004e90:	f85ddf44 	.word	0xf85ddf44
 8004e94:	3e54ae0b 	.word	0x3e54ae0b
 8004e98:	55555555 	.word	0x55555555
 8004e9c:	3fd55555 	.word	0x3fd55555
 8004ea0:	652b82fe 	.word	0x652b82fe
 8004ea4:	3ff71547 	.word	0x3ff71547
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	bff00000 	.word	0xbff00000
 8004eb0:	8800759c 	.word	0x8800759c
 8004eb4:	7e37e43c 	.word	0x7e37e43c
 8004eb8:	3ff00000 	.word	0x3ff00000
 8004ebc:	3fd00000 	.word	0x3fd00000
 8004ec0:	3fe00000 	.word	0x3fe00000
 8004ec4:	408fffff 	.word	0x408fffff
 8004ec8:	4bd7      	ldr	r3, [pc, #860]	; (8005228 <__ieee754_pow+0x740>)
 8004eca:	ea03 0309 	and.w	r3, r3, r9
 8004ece:	2200      	movs	r2, #0
 8004ed0:	b92b      	cbnz	r3, 8004ede <__ieee754_pow+0x3f6>
 8004ed2:	4bd6      	ldr	r3, [pc, #856]	; (800522c <__ieee754_pow+0x744>)
 8004ed4:	f7fb fb5c 	bl	8000590 <__aeabi_dmul>
 8004ed8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004edc:	460c      	mov	r4, r1
 8004ede:	1523      	asrs	r3, r4, #20
 8004ee0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004ee4:	4413      	add	r3, r2
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	4bd1      	ldr	r3, [pc, #836]	; (8005230 <__ieee754_pow+0x748>)
 8004eea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004eee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004ef8:	dd08      	ble.n	8004f0c <__ieee754_pow+0x424>
 8004efa:	4bce      	ldr	r3, [pc, #824]	; (8005234 <__ieee754_pow+0x74c>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	f340 8163 	ble.w	80051c8 <__ieee754_pow+0x6e0>
 8004f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f04:	3301      	adds	r3, #1
 8004f06:	9309      	str	r3, [sp, #36]	; 0x24
 8004f08:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004f0c:	2400      	movs	r4, #0
 8004f0e:	00e3      	lsls	r3, r4, #3
 8004f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f12:	4bc9      	ldr	r3, [pc, #804]	; (8005238 <__ieee754_pow+0x750>)
 8004f14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f18:	ed93 7b00 	vldr	d7, [r3]
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	ec53 2b17 	vmov	r2, r3, d7
 8004f22:	eeb0 8a47 	vmov.f32	s16, s14
 8004f26:	eef0 8a67 	vmov.f32	s17, s15
 8004f2a:	4682      	mov	sl, r0
 8004f2c:	f7fb f978 	bl	8000220 <__aeabi_dsub>
 8004f30:	4652      	mov	r2, sl
 8004f32:	4606      	mov	r6, r0
 8004f34:	460f      	mov	r7, r1
 8004f36:	462b      	mov	r3, r5
 8004f38:	ec51 0b18 	vmov	r0, r1, d8
 8004f3c:	f7fb f972 	bl	8000224 <__adddf3>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	2000      	movs	r0, #0
 8004f46:	49bd      	ldr	r1, [pc, #756]	; (800523c <__ieee754_pow+0x754>)
 8004f48:	f7fb fc4c 	bl	80007e4 <__aeabi_ddiv>
 8004f4c:	ec41 0b19 	vmov	d9, r0, r1
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4630      	mov	r0, r6
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7fb fb1a 	bl	8000590 <__aeabi_dmul>
 8004f5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9304      	str	r3, [sp, #16]
 8004f6c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004f70:	46ab      	mov	fp, r5
 8004f72:	106d      	asrs	r5, r5, #1
 8004f74:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004f78:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004f7c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004f80:	2200      	movs	r2, #0
 8004f82:	4640      	mov	r0, r8
 8004f84:	4649      	mov	r1, r9
 8004f86:	4614      	mov	r4, r2
 8004f88:	461d      	mov	r5, r3
 8004f8a:	f7fb fb01 	bl	8000590 <__aeabi_dmul>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4630      	mov	r0, r6
 8004f94:	4639      	mov	r1, r7
 8004f96:	f7fb f943 	bl	8000220 <__aeabi_dsub>
 8004f9a:	ec53 2b18 	vmov	r2, r3, d8
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460f      	mov	r7, r1
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	f7fb f93b 	bl	8000220 <__aeabi_dsub>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4650      	mov	r0, sl
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	f7fb f935 	bl	8000220 <__aeabi_dsub>
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	464b      	mov	r3, r9
 8004fba:	f7fb fae9 	bl	8000590 <__aeabi_dmul>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f7fb f92b 	bl	8000220 <__aeabi_dsub>
 8004fca:	ec53 2b19 	vmov	r2, r3, d9
 8004fce:	f7fb fadf 	bl	8000590 <__aeabi_dmul>
 8004fd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fd6:	ec41 0b18 	vmov	d8, r0, r1
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f7fb fad7 	bl	8000590 <__aeabi_dmul>
 8004fe2:	a37d      	add	r3, pc, #500	; (adr r3, 80051d8 <__ieee754_pow+0x6f0>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460d      	mov	r5, r1
 8004fec:	f7fb fad0 	bl	8000590 <__aeabi_dmul>
 8004ff0:	a37b      	add	r3, pc, #492	; (adr r3, 80051e0 <__ieee754_pow+0x6f8>)
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f7fb f915 	bl	8000224 <__adddf3>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f7fb fac7 	bl	8000590 <__aeabi_dmul>
 8005002:	a379      	add	r3, pc, #484	; (adr r3, 80051e8 <__ieee754_pow+0x700>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f7fb f90c 	bl	8000224 <__adddf3>
 800500c:	4622      	mov	r2, r4
 800500e:	462b      	mov	r3, r5
 8005010:	f7fb fabe 	bl	8000590 <__aeabi_dmul>
 8005014:	a376      	add	r3, pc, #472	; (adr r3, 80051f0 <__ieee754_pow+0x708>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb f903 	bl	8000224 <__adddf3>
 800501e:	4622      	mov	r2, r4
 8005020:	462b      	mov	r3, r5
 8005022:	f7fb fab5 	bl	8000590 <__aeabi_dmul>
 8005026:	a374      	add	r3, pc, #464	; (adr r3, 80051f8 <__ieee754_pow+0x710>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb f8fa 	bl	8000224 <__adddf3>
 8005030:	4622      	mov	r2, r4
 8005032:	462b      	mov	r3, r5
 8005034:	f7fb faac 	bl	8000590 <__aeabi_dmul>
 8005038:	a371      	add	r3, pc, #452	; (adr r3, 8005200 <__ieee754_pow+0x718>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb f8f1 	bl	8000224 <__adddf3>
 8005042:	4622      	mov	r2, r4
 8005044:	4606      	mov	r6, r0
 8005046:	460f      	mov	r7, r1
 8005048:	462b      	mov	r3, r5
 800504a:	4620      	mov	r0, r4
 800504c:	4629      	mov	r1, r5
 800504e:	f7fb fa9f 	bl	8000590 <__aeabi_dmul>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7fb fa99 	bl	8000590 <__aeabi_dmul>
 800505e:	4642      	mov	r2, r8
 8005060:	4604      	mov	r4, r0
 8005062:	460d      	mov	r5, r1
 8005064:	464b      	mov	r3, r9
 8005066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800506a:	f7fb f8db 	bl	8000224 <__adddf3>
 800506e:	ec53 2b18 	vmov	r2, r3, d8
 8005072:	f7fb fa8d 	bl	8000590 <__aeabi_dmul>
 8005076:	4622      	mov	r2, r4
 8005078:	462b      	mov	r3, r5
 800507a:	f7fb f8d3 	bl	8000224 <__adddf3>
 800507e:	4642      	mov	r2, r8
 8005080:	4682      	mov	sl, r0
 8005082:	468b      	mov	fp, r1
 8005084:	464b      	mov	r3, r9
 8005086:	4640      	mov	r0, r8
 8005088:	4649      	mov	r1, r9
 800508a:	f7fb fa81 	bl	8000590 <__aeabi_dmul>
 800508e:	4b6c      	ldr	r3, [pc, #432]	; (8005240 <__ieee754_pow+0x758>)
 8005090:	2200      	movs	r2, #0
 8005092:	4606      	mov	r6, r0
 8005094:	460f      	mov	r7, r1
 8005096:	f7fb f8c5 	bl	8000224 <__adddf3>
 800509a:	4652      	mov	r2, sl
 800509c:	465b      	mov	r3, fp
 800509e:	f7fb f8c1 	bl	8000224 <__adddf3>
 80050a2:	9c04      	ldr	r4, [sp, #16]
 80050a4:	460d      	mov	r5, r1
 80050a6:	4622      	mov	r2, r4
 80050a8:	460b      	mov	r3, r1
 80050aa:	4640      	mov	r0, r8
 80050ac:	4649      	mov	r1, r9
 80050ae:	f7fb fa6f 	bl	8000590 <__aeabi_dmul>
 80050b2:	4b63      	ldr	r3, [pc, #396]	; (8005240 <__ieee754_pow+0x758>)
 80050b4:	4680      	mov	r8, r0
 80050b6:	4689      	mov	r9, r1
 80050b8:	2200      	movs	r2, #0
 80050ba:	4620      	mov	r0, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	f7fb f8af 	bl	8000220 <__aeabi_dsub>
 80050c2:	4632      	mov	r2, r6
 80050c4:	463b      	mov	r3, r7
 80050c6:	f7fb f8ab 	bl	8000220 <__aeabi_dsub>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4650      	mov	r0, sl
 80050d0:	4659      	mov	r1, fp
 80050d2:	f7fb f8a5 	bl	8000220 <__aeabi_dsub>
 80050d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050da:	f7fb fa59 	bl	8000590 <__aeabi_dmul>
 80050de:	4622      	mov	r2, r4
 80050e0:	4606      	mov	r6, r0
 80050e2:	460f      	mov	r7, r1
 80050e4:	462b      	mov	r3, r5
 80050e6:	ec51 0b18 	vmov	r0, r1, d8
 80050ea:	f7fb fa51 	bl	8000590 <__aeabi_dmul>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4630      	mov	r0, r6
 80050f4:	4639      	mov	r1, r7
 80050f6:	f7fb f895 	bl	8000224 <__adddf3>
 80050fa:	4606      	mov	r6, r0
 80050fc:	460f      	mov	r7, r1
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4640      	mov	r0, r8
 8005104:	4649      	mov	r1, r9
 8005106:	f7fb f88d 	bl	8000224 <__adddf3>
 800510a:	9c04      	ldr	r4, [sp, #16]
 800510c:	a33e      	add	r3, pc, #248	; (adr r3, 8005208 <__ieee754_pow+0x720>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	4620      	mov	r0, r4
 8005114:	460d      	mov	r5, r1
 8005116:	f7fb fa3b 	bl	8000590 <__aeabi_dmul>
 800511a:	4642      	mov	r2, r8
 800511c:	ec41 0b18 	vmov	d8, r0, r1
 8005120:	464b      	mov	r3, r9
 8005122:	4620      	mov	r0, r4
 8005124:	4629      	mov	r1, r5
 8005126:	f7fb f87b 	bl	8000220 <__aeabi_dsub>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4630      	mov	r0, r6
 8005130:	4639      	mov	r1, r7
 8005132:	f7fb f875 	bl	8000220 <__aeabi_dsub>
 8005136:	a336      	add	r3, pc, #216	; (adr r3, 8005210 <__ieee754_pow+0x728>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb fa28 	bl	8000590 <__aeabi_dmul>
 8005140:	a335      	add	r3, pc, #212	; (adr r3, 8005218 <__ieee754_pow+0x730>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	4606      	mov	r6, r0
 8005148:	460f      	mov	r7, r1
 800514a:	4620      	mov	r0, r4
 800514c:	4629      	mov	r1, r5
 800514e:	f7fb fa1f 	bl	8000590 <__aeabi_dmul>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4630      	mov	r0, r6
 8005158:	4639      	mov	r1, r7
 800515a:	f7fb f863 	bl	8000224 <__adddf3>
 800515e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005160:	4b38      	ldr	r3, [pc, #224]	; (8005244 <__ieee754_pow+0x75c>)
 8005162:	4413      	add	r3, r2
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f7fb f85c 	bl	8000224 <__adddf3>
 800516c:	4682      	mov	sl, r0
 800516e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005170:	468b      	mov	fp, r1
 8005172:	f7fb f9a3 	bl	80004bc <__aeabi_i2d>
 8005176:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005178:	4b33      	ldr	r3, [pc, #204]	; (8005248 <__ieee754_pow+0x760>)
 800517a:	4413      	add	r3, r2
 800517c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005180:	4606      	mov	r6, r0
 8005182:	460f      	mov	r7, r1
 8005184:	4652      	mov	r2, sl
 8005186:	465b      	mov	r3, fp
 8005188:	ec51 0b18 	vmov	r0, r1, d8
 800518c:	f7fb f84a 	bl	8000224 <__adddf3>
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	f7fb f846 	bl	8000224 <__adddf3>
 8005198:	4632      	mov	r2, r6
 800519a:	463b      	mov	r3, r7
 800519c:	f7fb f842 	bl	8000224 <__adddf3>
 80051a0:	9c04      	ldr	r4, [sp, #16]
 80051a2:	4632      	mov	r2, r6
 80051a4:	463b      	mov	r3, r7
 80051a6:	4620      	mov	r0, r4
 80051a8:	460d      	mov	r5, r1
 80051aa:	f7fb f839 	bl	8000220 <__aeabi_dsub>
 80051ae:	4642      	mov	r2, r8
 80051b0:	464b      	mov	r3, r9
 80051b2:	f7fb f835 	bl	8000220 <__aeabi_dsub>
 80051b6:	ec53 2b18 	vmov	r2, r3, d8
 80051ba:	f7fb f831 	bl	8000220 <__aeabi_dsub>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4650      	mov	r0, sl
 80051c4:	4659      	mov	r1, fp
 80051c6:	e606      	b.n	8004dd6 <__ieee754_pow+0x2ee>
 80051c8:	2401      	movs	r4, #1
 80051ca:	e6a0      	b.n	8004f0e <__ieee754_pow+0x426>
 80051cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005220 <__ieee754_pow+0x738>
 80051d0:	e60d      	b.n	8004dee <__ieee754_pow+0x306>
 80051d2:	bf00      	nop
 80051d4:	f3af 8000 	nop.w
 80051d8:	4a454eef 	.word	0x4a454eef
 80051dc:	3fca7e28 	.word	0x3fca7e28
 80051e0:	93c9db65 	.word	0x93c9db65
 80051e4:	3fcd864a 	.word	0x3fcd864a
 80051e8:	a91d4101 	.word	0xa91d4101
 80051ec:	3fd17460 	.word	0x3fd17460
 80051f0:	518f264d 	.word	0x518f264d
 80051f4:	3fd55555 	.word	0x3fd55555
 80051f8:	db6fabff 	.word	0xdb6fabff
 80051fc:	3fdb6db6 	.word	0x3fdb6db6
 8005200:	33333303 	.word	0x33333303
 8005204:	3fe33333 	.word	0x3fe33333
 8005208:	e0000000 	.word	0xe0000000
 800520c:	3feec709 	.word	0x3feec709
 8005210:	dc3a03fd 	.word	0xdc3a03fd
 8005214:	3feec709 	.word	0x3feec709
 8005218:	145b01f5 	.word	0x145b01f5
 800521c:	be3e2fe0 	.word	0xbe3e2fe0
 8005220:	00000000 	.word	0x00000000
 8005224:	3ff00000 	.word	0x3ff00000
 8005228:	7ff00000 	.word	0x7ff00000
 800522c:	43400000 	.word	0x43400000
 8005230:	0003988e 	.word	0x0003988e
 8005234:	000bb679 	.word	0x000bb679
 8005238:	08005928 	.word	0x08005928
 800523c:	3ff00000 	.word	0x3ff00000
 8005240:	40080000 	.word	0x40080000
 8005244:	08005948 	.word	0x08005948
 8005248:	08005938 	.word	0x08005938
 800524c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005524 <__ieee754_pow+0xa3c>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f7fa ffe5 	bl	8000224 <__adddf3>
 800525a:	4622      	mov	r2, r4
 800525c:	ec41 0b1a 	vmov	d10, r0, r1
 8005260:	462b      	mov	r3, r5
 8005262:	4630      	mov	r0, r6
 8005264:	4639      	mov	r1, r7
 8005266:	f7fa ffdb 	bl	8000220 <__aeabi_dsub>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	ec51 0b1a 	vmov	r0, r1, d10
 8005272:	f7fb fc1d 	bl	8000ab0 <__aeabi_dcmpgt>
 8005276:	2800      	cmp	r0, #0
 8005278:	f47f adf8 	bne.w	8004e6c <__ieee754_pow+0x384>
 800527c:	4aa4      	ldr	r2, [pc, #656]	; (8005510 <__ieee754_pow+0xa28>)
 800527e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005282:	4293      	cmp	r3, r2
 8005284:	f340 810b 	ble.w	800549e <__ieee754_pow+0x9b6>
 8005288:	151b      	asrs	r3, r3, #20
 800528a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800528e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005292:	fa4a f303 	asr.w	r3, sl, r3
 8005296:	445b      	add	r3, fp
 8005298:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800529c:	4e9d      	ldr	r6, [pc, #628]	; (8005514 <__ieee754_pow+0xa2c>)
 800529e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80052a2:	4116      	asrs	r6, r2
 80052a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80052a8:	2000      	movs	r0, #0
 80052aa:	ea23 0106 	bic.w	r1, r3, r6
 80052ae:	f1c2 0214 	rsb	r2, r2, #20
 80052b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80052b6:	fa4a fa02 	asr.w	sl, sl, r2
 80052ba:	f1bb 0f00 	cmp.w	fp, #0
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4620      	mov	r0, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	bfb8      	it	lt
 80052c8:	f1ca 0a00 	rsblt	sl, sl, #0
 80052cc:	f7fa ffa8 	bl	8000220 <__aeabi_dsub>
 80052d0:	ec41 0b19 	vmov	d9, r0, r1
 80052d4:	4642      	mov	r2, r8
 80052d6:	464b      	mov	r3, r9
 80052d8:	ec51 0b19 	vmov	r0, r1, d9
 80052dc:	f7fa ffa2 	bl	8000224 <__adddf3>
 80052e0:	2400      	movs	r4, #0
 80052e2:	a379      	add	r3, pc, #484	; (adr r3, 80054c8 <__ieee754_pow+0x9e0>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	4620      	mov	r0, r4
 80052ea:	460d      	mov	r5, r1
 80052ec:	f7fb f950 	bl	8000590 <__aeabi_dmul>
 80052f0:	ec53 2b19 	vmov	r2, r3, d9
 80052f4:	4606      	mov	r6, r0
 80052f6:	460f      	mov	r7, r1
 80052f8:	4620      	mov	r0, r4
 80052fa:	4629      	mov	r1, r5
 80052fc:	f7fa ff90 	bl	8000220 <__aeabi_dsub>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4640      	mov	r0, r8
 8005306:	4649      	mov	r1, r9
 8005308:	f7fa ff8a 	bl	8000220 <__aeabi_dsub>
 800530c:	a370      	add	r3, pc, #448	; (adr r3, 80054d0 <__ieee754_pow+0x9e8>)
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fb f93d 	bl	8000590 <__aeabi_dmul>
 8005316:	a370      	add	r3, pc, #448	; (adr r3, 80054d8 <__ieee754_pow+0x9f0>)
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	4680      	mov	r8, r0
 800531e:	4689      	mov	r9, r1
 8005320:	4620      	mov	r0, r4
 8005322:	4629      	mov	r1, r5
 8005324:	f7fb f934 	bl	8000590 <__aeabi_dmul>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4640      	mov	r0, r8
 800532e:	4649      	mov	r1, r9
 8005330:	f7fa ff78 	bl	8000224 <__adddf3>
 8005334:	4604      	mov	r4, r0
 8005336:	460d      	mov	r5, r1
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fa ff70 	bl	8000224 <__adddf3>
 8005344:	4632      	mov	r2, r6
 8005346:	463b      	mov	r3, r7
 8005348:	4680      	mov	r8, r0
 800534a:	4689      	mov	r9, r1
 800534c:	f7fa ff68 	bl	8000220 <__aeabi_dsub>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4620      	mov	r0, r4
 8005356:	4629      	mov	r1, r5
 8005358:	f7fa ff62 	bl	8000220 <__aeabi_dsub>
 800535c:	4642      	mov	r2, r8
 800535e:	4606      	mov	r6, r0
 8005360:	460f      	mov	r7, r1
 8005362:	464b      	mov	r3, r9
 8005364:	4640      	mov	r0, r8
 8005366:	4649      	mov	r1, r9
 8005368:	f7fb f912 	bl	8000590 <__aeabi_dmul>
 800536c:	a35c      	add	r3, pc, #368	; (adr r3, 80054e0 <__ieee754_pow+0x9f8>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	4604      	mov	r4, r0
 8005374:	460d      	mov	r5, r1
 8005376:	f7fb f90b 	bl	8000590 <__aeabi_dmul>
 800537a:	a35b      	add	r3, pc, #364	; (adr r3, 80054e8 <__ieee754_pow+0xa00>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fa ff4e 	bl	8000220 <__aeabi_dsub>
 8005384:	4622      	mov	r2, r4
 8005386:	462b      	mov	r3, r5
 8005388:	f7fb f902 	bl	8000590 <__aeabi_dmul>
 800538c:	a358      	add	r3, pc, #352	; (adr r3, 80054f0 <__ieee754_pow+0xa08>)
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fa ff47 	bl	8000224 <__adddf3>
 8005396:	4622      	mov	r2, r4
 8005398:	462b      	mov	r3, r5
 800539a:	f7fb f8f9 	bl	8000590 <__aeabi_dmul>
 800539e:	a356      	add	r3, pc, #344	; (adr r3, 80054f8 <__ieee754_pow+0xa10>)
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f7fa ff3c 	bl	8000220 <__aeabi_dsub>
 80053a8:	4622      	mov	r2, r4
 80053aa:	462b      	mov	r3, r5
 80053ac:	f7fb f8f0 	bl	8000590 <__aeabi_dmul>
 80053b0:	a353      	add	r3, pc, #332	; (adr r3, 8005500 <__ieee754_pow+0xa18>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fa ff35 	bl	8000224 <__adddf3>
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	f7fb f8e7 	bl	8000590 <__aeabi_dmul>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4640      	mov	r0, r8
 80053c8:	4649      	mov	r1, r9
 80053ca:	f7fa ff29 	bl	8000220 <__aeabi_dsub>
 80053ce:	4604      	mov	r4, r0
 80053d0:	460d      	mov	r5, r1
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4640      	mov	r0, r8
 80053d8:	4649      	mov	r1, r9
 80053da:	f7fb f8d9 	bl	8000590 <__aeabi_dmul>
 80053de:	2200      	movs	r2, #0
 80053e0:	ec41 0b19 	vmov	d9, r0, r1
 80053e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053e8:	4620      	mov	r0, r4
 80053ea:	4629      	mov	r1, r5
 80053ec:	f7fa ff18 	bl	8000220 <__aeabi_dsub>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	ec51 0b19 	vmov	r0, r1, d9
 80053f8:	f7fb f9f4 	bl	80007e4 <__aeabi_ddiv>
 80053fc:	4632      	mov	r2, r6
 80053fe:	4604      	mov	r4, r0
 8005400:	460d      	mov	r5, r1
 8005402:	463b      	mov	r3, r7
 8005404:	4640      	mov	r0, r8
 8005406:	4649      	mov	r1, r9
 8005408:	f7fb f8c2 	bl	8000590 <__aeabi_dmul>
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	f7fa ff08 	bl	8000224 <__adddf3>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4620      	mov	r0, r4
 800541a:	4629      	mov	r1, r5
 800541c:	f7fa ff00 	bl	8000220 <__aeabi_dsub>
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	f7fa fefc 	bl	8000220 <__aeabi_dsub>
 8005428:	460b      	mov	r3, r1
 800542a:	4602      	mov	r2, r0
 800542c:	493a      	ldr	r1, [pc, #232]	; (8005518 <__ieee754_pow+0xa30>)
 800542e:	2000      	movs	r0, #0
 8005430:	f7fa fef6 	bl	8000220 <__aeabi_dsub>
 8005434:	e9cd 0100 	strd	r0, r1, [sp]
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800543e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005442:	da2f      	bge.n	80054a4 <__ieee754_pow+0x9bc>
 8005444:	4650      	mov	r0, sl
 8005446:	ed9d 0b00 	vldr	d0, [sp]
 800544a:	f000 f9cd 	bl	80057e8 <scalbn>
 800544e:	ec51 0b10 	vmov	r0, r1, d0
 8005452:	ec53 2b18 	vmov	r2, r3, d8
 8005456:	f7ff bbe0 	b.w	8004c1a <__ieee754_pow+0x132>
 800545a:	4b30      	ldr	r3, [pc, #192]	; (800551c <__ieee754_pow+0xa34>)
 800545c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005460:	429e      	cmp	r6, r3
 8005462:	f77f af0b 	ble.w	800527c <__ieee754_pow+0x794>
 8005466:	4b2e      	ldr	r3, [pc, #184]	; (8005520 <__ieee754_pow+0xa38>)
 8005468:	440b      	add	r3, r1
 800546a:	4303      	orrs	r3, r0
 800546c:	d00b      	beq.n	8005486 <__ieee754_pow+0x99e>
 800546e:	a326      	add	r3, pc, #152	; (adr r3, 8005508 <__ieee754_pow+0xa20>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	ec51 0b18 	vmov	r0, r1, d8
 8005478:	f7fb f88a 	bl	8000590 <__aeabi_dmul>
 800547c:	a322      	add	r3, pc, #136	; (adr r3, 8005508 <__ieee754_pow+0xa20>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7ff bbca 	b.w	8004c1a <__ieee754_pow+0x132>
 8005486:	4622      	mov	r2, r4
 8005488:	462b      	mov	r3, r5
 800548a:	f7fa fec9 	bl	8000220 <__aeabi_dsub>
 800548e:	4642      	mov	r2, r8
 8005490:	464b      	mov	r3, r9
 8005492:	f7fb fb03 	bl	8000a9c <__aeabi_dcmpge>
 8005496:	2800      	cmp	r0, #0
 8005498:	f43f aef0 	beq.w	800527c <__ieee754_pow+0x794>
 800549c:	e7e7      	b.n	800546e <__ieee754_pow+0x986>
 800549e:	f04f 0a00 	mov.w	sl, #0
 80054a2:	e717      	b.n	80052d4 <__ieee754_pow+0x7ec>
 80054a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054a8:	4619      	mov	r1, r3
 80054aa:	e7d2      	b.n	8005452 <__ieee754_pow+0x96a>
 80054ac:	491a      	ldr	r1, [pc, #104]	; (8005518 <__ieee754_pow+0xa30>)
 80054ae:	2000      	movs	r0, #0
 80054b0:	f7ff bb9e 	b.w	8004bf0 <__ieee754_pow+0x108>
 80054b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054b8:	f7ff bb9a 	b.w	8004bf0 <__ieee754_pow+0x108>
 80054bc:	9000      	str	r0, [sp, #0]
 80054be:	f7ff bb76 	b.w	8004bae <__ieee754_pow+0xc6>
 80054c2:	2100      	movs	r1, #0
 80054c4:	f7ff bb60 	b.w	8004b88 <__ieee754_pow+0xa0>
 80054c8:	00000000 	.word	0x00000000
 80054cc:	3fe62e43 	.word	0x3fe62e43
 80054d0:	fefa39ef 	.word	0xfefa39ef
 80054d4:	3fe62e42 	.word	0x3fe62e42
 80054d8:	0ca86c39 	.word	0x0ca86c39
 80054dc:	be205c61 	.word	0xbe205c61
 80054e0:	72bea4d0 	.word	0x72bea4d0
 80054e4:	3e663769 	.word	0x3e663769
 80054e8:	c5d26bf1 	.word	0xc5d26bf1
 80054ec:	3ebbbd41 	.word	0x3ebbbd41
 80054f0:	af25de2c 	.word	0xaf25de2c
 80054f4:	3f11566a 	.word	0x3f11566a
 80054f8:	16bebd93 	.word	0x16bebd93
 80054fc:	3f66c16c 	.word	0x3f66c16c
 8005500:	5555553e 	.word	0x5555553e
 8005504:	3fc55555 	.word	0x3fc55555
 8005508:	c2f8f359 	.word	0xc2f8f359
 800550c:	01a56e1f 	.word	0x01a56e1f
 8005510:	3fe00000 	.word	0x3fe00000
 8005514:	000fffff 	.word	0x000fffff
 8005518:	3ff00000 	.word	0x3ff00000
 800551c:	4090cbff 	.word	0x4090cbff
 8005520:	3f6f3400 	.word	0x3f6f3400
 8005524:	652b82fe 	.word	0x652b82fe
 8005528:	3c971547 	.word	0x3c971547

0800552c <__ieee754_sqrt>:
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	ec55 4b10 	vmov	r4, r5, d0
 8005534:	4e56      	ldr	r6, [pc, #344]	; (8005690 <__ieee754_sqrt+0x164>)
 8005536:	43ae      	bics	r6, r5
 8005538:	ee10 0a10 	vmov	r0, s0
 800553c:	ee10 3a10 	vmov	r3, s0
 8005540:	4629      	mov	r1, r5
 8005542:	462a      	mov	r2, r5
 8005544:	d110      	bne.n	8005568 <__ieee754_sqrt+0x3c>
 8005546:	ee10 2a10 	vmov	r2, s0
 800554a:	462b      	mov	r3, r5
 800554c:	f7fb f820 	bl	8000590 <__aeabi_dmul>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	f7fa fe64 	bl	8000224 <__adddf3>
 800555c:	4604      	mov	r4, r0
 800555e:	460d      	mov	r5, r1
 8005560:	ec45 4b10 	vmov	d0, r4, r5
 8005564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005568:	2d00      	cmp	r5, #0
 800556a:	dc10      	bgt.n	800558e <__ieee754_sqrt+0x62>
 800556c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005570:	4330      	orrs	r0, r6
 8005572:	d0f5      	beq.n	8005560 <__ieee754_sqrt+0x34>
 8005574:	b15d      	cbz	r5, 800558e <__ieee754_sqrt+0x62>
 8005576:	ee10 2a10 	vmov	r2, s0
 800557a:	462b      	mov	r3, r5
 800557c:	ee10 0a10 	vmov	r0, s0
 8005580:	f7fa fe4e 	bl	8000220 <__aeabi_dsub>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	f7fb f92c 	bl	80007e4 <__aeabi_ddiv>
 800558c:	e7e6      	b.n	800555c <__ieee754_sqrt+0x30>
 800558e:	1509      	asrs	r1, r1, #20
 8005590:	d076      	beq.n	8005680 <__ieee754_sqrt+0x154>
 8005592:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005596:	07ce      	lsls	r6, r1, #31
 8005598:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800559c:	bf5e      	ittt	pl
 800559e:	0fda      	lsrpl	r2, r3, #31
 80055a0:	005b      	lslpl	r3, r3, #1
 80055a2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80055a6:	0fda      	lsrs	r2, r3, #31
 80055a8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80055ac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80055b0:	2000      	movs	r0, #0
 80055b2:	106d      	asrs	r5, r5, #1
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	f04f 0e16 	mov.w	lr, #22
 80055ba:	4684      	mov	ip, r0
 80055bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055c0:	eb0c 0401 	add.w	r4, ip, r1
 80055c4:	4294      	cmp	r4, r2
 80055c6:	bfde      	ittt	le
 80055c8:	1b12      	suble	r2, r2, r4
 80055ca:	eb04 0c01 	addle.w	ip, r4, r1
 80055ce:	1840      	addle	r0, r0, r1
 80055d0:	0052      	lsls	r2, r2, #1
 80055d2:	f1be 0e01 	subs.w	lr, lr, #1
 80055d6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80055da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80055de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80055e2:	d1ed      	bne.n	80055c0 <__ieee754_sqrt+0x94>
 80055e4:	4671      	mov	r1, lr
 80055e6:	2720      	movs	r7, #32
 80055e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80055ec:	4562      	cmp	r2, ip
 80055ee:	eb04 060e 	add.w	r6, r4, lr
 80055f2:	dc02      	bgt.n	80055fa <__ieee754_sqrt+0xce>
 80055f4:	d113      	bne.n	800561e <__ieee754_sqrt+0xf2>
 80055f6:	429e      	cmp	r6, r3
 80055f8:	d811      	bhi.n	800561e <__ieee754_sqrt+0xf2>
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	eb06 0e04 	add.w	lr, r6, r4
 8005600:	da43      	bge.n	800568a <__ieee754_sqrt+0x15e>
 8005602:	f1be 0f00 	cmp.w	lr, #0
 8005606:	db40      	blt.n	800568a <__ieee754_sqrt+0x15e>
 8005608:	f10c 0801 	add.w	r8, ip, #1
 800560c:	eba2 020c 	sub.w	r2, r2, ip
 8005610:	429e      	cmp	r6, r3
 8005612:	bf88      	it	hi
 8005614:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005618:	1b9b      	subs	r3, r3, r6
 800561a:	4421      	add	r1, r4
 800561c:	46c4      	mov	ip, r8
 800561e:	0052      	lsls	r2, r2, #1
 8005620:	3f01      	subs	r7, #1
 8005622:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005626:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800562a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800562e:	d1dd      	bne.n	80055ec <__ieee754_sqrt+0xc0>
 8005630:	4313      	orrs	r3, r2
 8005632:	d006      	beq.n	8005642 <__ieee754_sqrt+0x116>
 8005634:	1c4c      	adds	r4, r1, #1
 8005636:	bf13      	iteet	ne
 8005638:	3101      	addne	r1, #1
 800563a:	3001      	addeq	r0, #1
 800563c:	4639      	moveq	r1, r7
 800563e:	f021 0101 	bicne.w	r1, r1, #1
 8005642:	1043      	asrs	r3, r0, #1
 8005644:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005648:	0849      	lsrs	r1, r1, #1
 800564a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800564e:	07c2      	lsls	r2, r0, #31
 8005650:	bf48      	it	mi
 8005652:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005656:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800565a:	460c      	mov	r4, r1
 800565c:	463d      	mov	r5, r7
 800565e:	e77f      	b.n	8005560 <__ieee754_sqrt+0x34>
 8005660:	0ada      	lsrs	r2, r3, #11
 8005662:	3815      	subs	r0, #21
 8005664:	055b      	lsls	r3, r3, #21
 8005666:	2a00      	cmp	r2, #0
 8005668:	d0fa      	beq.n	8005660 <__ieee754_sqrt+0x134>
 800566a:	02d7      	lsls	r7, r2, #11
 800566c:	d50a      	bpl.n	8005684 <__ieee754_sqrt+0x158>
 800566e:	f1c1 0420 	rsb	r4, r1, #32
 8005672:	fa23 f404 	lsr.w	r4, r3, r4
 8005676:	1e4d      	subs	r5, r1, #1
 8005678:	408b      	lsls	r3, r1
 800567a:	4322      	orrs	r2, r4
 800567c:	1b41      	subs	r1, r0, r5
 800567e:	e788      	b.n	8005592 <__ieee754_sqrt+0x66>
 8005680:	4608      	mov	r0, r1
 8005682:	e7f0      	b.n	8005666 <__ieee754_sqrt+0x13a>
 8005684:	0052      	lsls	r2, r2, #1
 8005686:	3101      	adds	r1, #1
 8005688:	e7ef      	b.n	800566a <__ieee754_sqrt+0x13e>
 800568a:	46e0      	mov	r8, ip
 800568c:	e7be      	b.n	800560c <__ieee754_sqrt+0xe0>
 800568e:	bf00      	nop
 8005690:	7ff00000 	.word	0x7ff00000

08005694 <fabs>:
 8005694:	ec51 0b10 	vmov	r0, r1, d0
 8005698:	ee10 2a10 	vmov	r2, s0
 800569c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80056a0:	ec43 2b10 	vmov	d0, r2, r3
 80056a4:	4770      	bx	lr

080056a6 <finite>:
 80056a6:	b082      	sub	sp, #8
 80056a8:	ed8d 0b00 	vstr	d0, [sp]
 80056ac:	9801      	ldr	r0, [sp, #4]
 80056ae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80056b2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80056b6:	0fc0      	lsrs	r0, r0, #31
 80056b8:	b002      	add	sp, #8
 80056ba:	4770      	bx	lr
 80056bc:	0000      	movs	r0, r0
	...

080056c0 <nan>:
 80056c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80056c8 <nan+0x8>
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	00000000 	.word	0x00000000
 80056cc:	7ff80000 	.word	0x7ff80000

080056d0 <rint>:
 80056d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d2:	ec51 0b10 	vmov	r0, r1, d0
 80056d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80056da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80056de:	2e13      	cmp	r6, #19
 80056e0:	ee10 4a10 	vmov	r4, s0
 80056e4:	460b      	mov	r3, r1
 80056e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80056ea:	dc58      	bgt.n	800579e <rint+0xce>
 80056ec:	2e00      	cmp	r6, #0
 80056ee:	da2b      	bge.n	8005748 <rint+0x78>
 80056f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80056f4:	4302      	orrs	r2, r0
 80056f6:	d023      	beq.n	8005740 <rint+0x70>
 80056f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80056fc:	4302      	orrs	r2, r0
 80056fe:	4254      	negs	r4, r2
 8005700:	4314      	orrs	r4, r2
 8005702:	0c4b      	lsrs	r3, r1, #17
 8005704:	0b24      	lsrs	r4, r4, #12
 8005706:	045b      	lsls	r3, r3, #17
 8005708:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800570c:	ea44 0103 	orr.w	r1, r4, r3
 8005710:	4b32      	ldr	r3, [pc, #200]	; (80057dc <rint+0x10c>)
 8005712:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005716:	e9d3 6700 	ldrd	r6, r7, [r3]
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4630      	mov	r0, r6
 8005720:	4639      	mov	r1, r7
 8005722:	f7fa fd7f 	bl	8000224 <__adddf3>
 8005726:	e9cd 0100 	strd	r0, r1, [sp]
 800572a:	463b      	mov	r3, r7
 800572c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005730:	4632      	mov	r2, r6
 8005732:	f7fa fd75 	bl	8000220 <__aeabi_dsub>
 8005736:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800573a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800573e:	4639      	mov	r1, r7
 8005740:	ec41 0b10 	vmov	d0, r0, r1
 8005744:	b003      	add	sp, #12
 8005746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005748:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <rint+0x110>)
 800574a:	4132      	asrs	r2, r6
 800574c:	ea01 0702 	and.w	r7, r1, r2
 8005750:	4307      	orrs	r7, r0
 8005752:	d0f5      	beq.n	8005740 <rint+0x70>
 8005754:	0851      	lsrs	r1, r2, #1
 8005756:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800575a:	4314      	orrs	r4, r2
 800575c:	d00c      	beq.n	8005778 <rint+0xa8>
 800575e:	ea23 0201 	bic.w	r2, r3, r1
 8005762:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005766:	2e13      	cmp	r6, #19
 8005768:	fa43 f606 	asr.w	r6, r3, r6
 800576c:	bf0c      	ite	eq
 800576e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005772:	2400      	movne	r4, #0
 8005774:	ea42 0306 	orr.w	r3, r2, r6
 8005778:	4918      	ldr	r1, [pc, #96]	; (80057dc <rint+0x10c>)
 800577a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800577e:	4622      	mov	r2, r4
 8005780:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005784:	4620      	mov	r0, r4
 8005786:	4629      	mov	r1, r5
 8005788:	f7fa fd4c 	bl	8000224 <__adddf3>
 800578c:	e9cd 0100 	strd	r0, r1, [sp]
 8005790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005794:	4622      	mov	r2, r4
 8005796:	462b      	mov	r3, r5
 8005798:	f7fa fd42 	bl	8000220 <__aeabi_dsub>
 800579c:	e7d0      	b.n	8005740 <rint+0x70>
 800579e:	2e33      	cmp	r6, #51	; 0x33
 80057a0:	dd07      	ble.n	80057b2 <rint+0xe2>
 80057a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80057a6:	d1cb      	bne.n	8005740 <rint+0x70>
 80057a8:	ee10 2a10 	vmov	r2, s0
 80057ac:	f7fa fd3a 	bl	8000224 <__adddf3>
 80057b0:	e7c6      	b.n	8005740 <rint+0x70>
 80057b2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80057b6:	f04f 36ff 	mov.w	r6, #4294967295
 80057ba:	40d6      	lsrs	r6, r2
 80057bc:	4230      	tst	r0, r6
 80057be:	d0bf      	beq.n	8005740 <rint+0x70>
 80057c0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80057c4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80057c8:	bf1f      	itttt	ne
 80057ca:	ea24 0101 	bicne.w	r1, r4, r1
 80057ce:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80057d2:	fa44 f202 	asrne.w	r2, r4, r2
 80057d6:	ea41 0402 	orrne.w	r4, r1, r2
 80057da:	e7cd      	b.n	8005778 <rint+0xa8>
 80057dc:	08005958 	.word	0x08005958
 80057e0:	000fffff 	.word	0x000fffff
 80057e4:	00000000 	.word	0x00000000

080057e8 <scalbn>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	ec55 4b10 	vmov	r4, r5, d0
 80057ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80057f2:	4606      	mov	r6, r0
 80057f4:	462b      	mov	r3, r5
 80057f6:	b99a      	cbnz	r2, 8005820 <scalbn+0x38>
 80057f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80057fc:	4323      	orrs	r3, r4
 80057fe:	d036      	beq.n	800586e <scalbn+0x86>
 8005800:	4b39      	ldr	r3, [pc, #228]	; (80058e8 <scalbn+0x100>)
 8005802:	4629      	mov	r1, r5
 8005804:	ee10 0a10 	vmov	r0, s0
 8005808:	2200      	movs	r2, #0
 800580a:	f7fa fec1 	bl	8000590 <__aeabi_dmul>
 800580e:	4b37      	ldr	r3, [pc, #220]	; (80058ec <scalbn+0x104>)
 8005810:	429e      	cmp	r6, r3
 8005812:	4604      	mov	r4, r0
 8005814:	460d      	mov	r5, r1
 8005816:	da10      	bge.n	800583a <scalbn+0x52>
 8005818:	a32b      	add	r3, pc, #172	; (adr r3, 80058c8 <scalbn+0xe0>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	e03a      	b.n	8005896 <scalbn+0xae>
 8005820:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005824:	428a      	cmp	r2, r1
 8005826:	d10c      	bne.n	8005842 <scalbn+0x5a>
 8005828:	ee10 2a10 	vmov	r2, s0
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fa fcf8 	bl	8000224 <__adddf3>
 8005834:	4604      	mov	r4, r0
 8005836:	460d      	mov	r5, r1
 8005838:	e019      	b.n	800586e <scalbn+0x86>
 800583a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800583e:	460b      	mov	r3, r1
 8005840:	3a36      	subs	r2, #54	; 0x36
 8005842:	4432      	add	r2, r6
 8005844:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005848:	428a      	cmp	r2, r1
 800584a:	dd08      	ble.n	800585e <scalbn+0x76>
 800584c:	2d00      	cmp	r5, #0
 800584e:	a120      	add	r1, pc, #128	; (adr r1, 80058d0 <scalbn+0xe8>)
 8005850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005854:	da1c      	bge.n	8005890 <scalbn+0xa8>
 8005856:	a120      	add	r1, pc, #128	; (adr r1, 80058d8 <scalbn+0xf0>)
 8005858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800585c:	e018      	b.n	8005890 <scalbn+0xa8>
 800585e:	2a00      	cmp	r2, #0
 8005860:	dd08      	ble.n	8005874 <scalbn+0x8c>
 8005862:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005866:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800586a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800586e:	ec45 4b10 	vmov	d0, r4, r5
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005878:	da19      	bge.n	80058ae <scalbn+0xc6>
 800587a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800587e:	429e      	cmp	r6, r3
 8005880:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005884:	dd0a      	ble.n	800589c <scalbn+0xb4>
 8005886:	a112      	add	r1, pc, #72	; (adr r1, 80058d0 <scalbn+0xe8>)
 8005888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e2      	bne.n	8005856 <scalbn+0x6e>
 8005890:	a30f      	add	r3, pc, #60	; (adr r3, 80058d0 <scalbn+0xe8>)
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	f7fa fe7b 	bl	8000590 <__aeabi_dmul>
 800589a:	e7cb      	b.n	8005834 <scalbn+0x4c>
 800589c:	a10a      	add	r1, pc, #40	; (adr r1, 80058c8 <scalbn+0xe0>)
 800589e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0b8      	beq.n	8005818 <scalbn+0x30>
 80058a6:	a10e      	add	r1, pc, #56	; (adr r1, 80058e0 <scalbn+0xf8>)
 80058a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058ac:	e7b4      	b.n	8005818 <scalbn+0x30>
 80058ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058b2:	3236      	adds	r2, #54	; 0x36
 80058b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80058bc:	4620      	mov	r0, r4
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <scalbn+0x108>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	e7e8      	b.n	8005896 <scalbn+0xae>
 80058c4:	f3af 8000 	nop.w
 80058c8:	c2f8f359 	.word	0xc2f8f359
 80058cc:	01a56e1f 	.word	0x01a56e1f
 80058d0:	8800759c 	.word	0x8800759c
 80058d4:	7e37e43c 	.word	0x7e37e43c
 80058d8:	8800759c 	.word	0x8800759c
 80058dc:	fe37e43c 	.word	0xfe37e43c
 80058e0:	c2f8f359 	.word	0xc2f8f359
 80058e4:	81a56e1f 	.word	0x81a56e1f
 80058e8:	43500000 	.word	0x43500000
 80058ec:	ffff3cb0 	.word	0xffff3cb0
 80058f0:	3c900000 	.word	0x3c900000

080058f4 <_init>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	bf00      	nop
 80058f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fa:	bc08      	pop	{r3}
 80058fc:	469e      	mov	lr, r3
 80058fe:	4770      	bx	lr

08005900 <_fini>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr
