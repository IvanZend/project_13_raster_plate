
project_13_raster_plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005980  08005980  00015980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d8  080059d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080059d8  080059d8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d8  080059d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000078  08005a54  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005a54  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c9c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fca  00000000  00000000  00032d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001020  00000000  00000000  00034d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f28  00000000  00000000  00035d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dfa6  00000000  00000000  00036c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf37  00000000  00000000  00054bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6aa4  00000000  00000000  00060b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001275d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004824  00000000  00000000  00127654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005964 	.word	0x08005964

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08005964 	.word	0x08005964

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f001 fc51 	bl	800247a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f80b 	bl	8000bf2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 f950 	bl	8000e80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000be0:	f000 f8b2 	bl	8000d48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000be4:	f000 f8fe 	bl	8000de4 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000be8:	f000 f868 	bl	8000cbc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  device_init();
 8000bec:	f000 fe62 	bl	80018b4 <device_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <main+0x20>

08000bf2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b0a4      	sub	sp, #144	; 0x90
 8000bf6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bfc:	2238      	movs	r2, #56	; 0x38
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fe4f 	bl	80048a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2244      	movs	r2, #68	; 0x44
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 fe41 	bl	80048a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f002 f90c 	bl	8002e40 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c32:	2302      	movs	r3, #2
 8000c34:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c36:	2303      	movs	r3, #3
 8000c38:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c3e:	2314      	movs	r3, #20
 8000c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 f9a4 	bl	8002fa8 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c66:	f000 f989 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c82:	2104      	movs	r1, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fca7 	bl	80035d8 <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c90:	f000 f974 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fe7c 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cae:	f000 f965 	bl	8000f7c <Error_Handler>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3790      	adds	r7, #144	; 0x90
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cc2:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <MX_FDCAN1_Init+0x88>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_FDCAN1_Init+0x84>)
 8000d2e:	f001 fd25 	bl	800277c <HAL_FDCAN_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000d38:	f000 f920 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200001fc 	.word	0x200001fc
 8000d44:	40006400 	.word	0x40006400

08000d48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d70:	229f      	movs	r2, #159	; 0x9f
 8000d72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000d8e:	f002 fff7 	bl	8003d80 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d98:	f000 f8f0 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000daa:	f003 fa59 	bl	8004260 <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000db4:	f000 f8e2 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000db8:	2320      	movs	r3, #32
 8000dba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_TIM2_Init+0x94>)
 8000dc6:	f003 fc7b 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 f8d4 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000278 	.word	0x20000278
 8000de0:	0001869f 	.word	0x0001869f

08000de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e04:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <MX_TIM3_Init+0x98>)
 8000e06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e10:	2210      	movs	r2, #16
 8000e12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e16:	2263      	movs	r2, #99	; 0x63
 8000e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e28:	f002 ffaa 	bl	8003d80 <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 f8a3 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e44:	f003 fa0c 	bl	8004260 <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f895 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e52:	2320      	movs	r3, #32
 8000e54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_TIM3_Init+0x94>)
 8000e60:	f003 fc2e 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e6a:	f000 f887 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000114 	.word	0x20000114
 8000e7c:	40000400 	.word	0x40000400

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a35      	ldr	r2, [pc, #212]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000e9c:	f043 0320 	orr.w	r3, r3, #32
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_GPIO_Init+0xf0>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2138      	movs	r1, #56	; 0x38
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f001 ff93 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 8000eea:	2200      	movs	r2, #0
 8000eec:	f240 11f9 	movw	r1, #505	; 0x1f9
 8000ef0:	4820      	ldr	r0, [pc, #128]	; (8000f74 <MX_GPIO_Init+0xf4>)
 8000ef2:	f001 ff8d 	bl	8002e10 <HAL_GPIO_WritePin>
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ON_TOMO_Pin */
  GPIO_InitStruct.Pin = ON_TOMO_Pin;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ON_TOMO_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4619      	mov	r1, r3
 8000f08:	481b      	ldr	r0, [pc, #108]	; (8000f78 <MX_GPIO_Init+0xf8>)
 8000f0a:	f001 fde7 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONFIG_3_Pin CONFIG_2_Pin CONFIG_1_Pin BUCKY_CALL_Pin
                           GRID_BUTTON_Pin GRID_END_POINT_Pin GRID_120_DETECT_Pin GRID_180_DETECT_Pin
                           PUSHBUTTON_BUCKYBRAKE_Pin */
  GPIO_InitStruct.Pin = CONFIG_3_Pin|CONFIG_2_Pin|CONFIG_1_Pin|BUCKY_CALL_Pin
 8000f0e:	f248 73c7 	movw	r3, #34759	; 0x87c7
 8000f12:	60fb      	str	r3, [r7, #12]
                          |GRID_BUTTON_Pin|GRID_END_POINT_Pin|GRID_120_DETECT_Pin|GRID_180_DETECT_Pin
                          |PUSHBUTTON_BUCKYBRAKE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f001 fdd9 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : GRID_120_Pin GRID_180_Pin BUCKY_READY_Pin */
  GPIO_InitStruct.Pin = GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin;
 8000f2a:	2338      	movs	r3, #56	; 0x38
 8000f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f001 fdca 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_CENTERING_Pin BUCKY_BRAKE_Pin RESET_Pin ENABLE_Pin
                           CURRENT_WIND_Pin STEP_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 8000f48:	f240 13f9 	movw	r3, #505	; 0x1f9
 8000f4c:	60fb      	str	r3, [r7, #12]
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_GPIO_Init+0xf4>)
 8000f62:	f001 fdbb 	bl	8002adc <HAL_GPIO_Init>

}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400
 8000f78:	48001400 	.word	0x48001400

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fc2:	f001 ffe1 	bl	8002f88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a18      	ldr	r2, [pc, #96]	; (8001054 <HAL_FDCAN_MspInit+0x80>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d129      	bne.n	800104a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8000ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_FDCAN_MspInit+0x84>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001026:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001038:	2309      	movs	r3, #9
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f001 fd49 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40006400 	.word	0x40006400
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d114      	bne.n	8001098 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	201c      	movs	r0, #28
 800108c:	f001 fb41 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001090:	201c      	movs	r0, #28
 8001092:	f001 fb58 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001096:	e018      	b.n	80010ca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_TIM_Base_MspInit+0x7c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d113      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_TIM_Base_MspInit+0x78>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2102      	movs	r1, #2
 80010be:	201d      	movs	r0, #29
 80010c0:	f001 fb27 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010c4:	201d      	movs	r0, #29
 80010c6:	f001 fb3e 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40000400 	.word	0x40000400

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f001 f9f6 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <TIM2_IRQHandler+0x14>)
 800113e:	f002 ff10 	bl	8003f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  signals_check_timer_interrupt_handler();
 8001142:	f000 fe21 	bl	8001d88 <signals_check_timer_interrupt_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000278 	.word	0x20000278

08001150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <TIM3_IRQHandler+0x14>)
 8001156:	f002 ff04 	bl	8003f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  motor_timer_interrupt_handler();
 800115a:	f001 f959 	bl	8002410 <motor_timer_interrupt_handler>
  /* USER CODE END TIM3_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000114 	.word	0x20000114

08001168 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <SystemInit+0x28>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <SystemInit+0x28>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x28>)
 800117e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001182:	609a      	str	r2, [r3, #8]
#endif
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <set_output_signal_state>:

/*
 * Выставляем логическое состояние на выходном пине
 */
void set_output_signal_state(GPIO_TypeDef* GPIO_port_pointer, uint16_t pin_number, SignalLogicLevel_EnumTypeDef requied_logic_level)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
	if (requied_logic_level == LOGIC_LEVEL_LOW)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <set_output_signal_state+0x24>
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_RESET);
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 fe2d 	bl	8002e10 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
	}
}
 80011b6:	e005      	b.n	80011c4 <set_output_signal_state+0x30>
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 fe26 	bl	8002e10 <HAL_GPIO_WritePin>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <check_input_signal_state>:

/*
 * Считывание и запись состояния входного пина
 */
void check_input_signal_state(InSignalAttributes_StructTypeDef* signal_to_check)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	GPIO_PinState current_logic_state = HAL_GPIO_ReadPin(signal_to_check->signal_pin.GPIO_port_pointer, signal_to_check->signal_pin.pin_number);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	889b      	ldrh	r3, [r3, #4]
 80011dc:	4619      	mov	r1, r3
 80011de:	4610      	mov	r0, r2
 80011e0:	f001 fdfe 	bl	8002de0 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]

	switch (current_logic_state)
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <check_input_signal_state+0x30>
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d000      	beq.n	80011f4 <check_input_signal_state+0x28>
	{
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
		break;
	}
	}
}
 80011f2:	e007      	b.n	8001204 <check_input_signal_state+0x38>
		signal_to_check->signal_logic_level = LOGIC_LEVEL_HIGH;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	721a      	strb	r2, [r3, #8]
		break;
 80011fa:	e003      	b.n	8001204 <check_input_signal_state+0x38>
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	721a      	strb	r2, [r3, #8]
		break;
 8001202:	bf00      	nop
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <check_and_update_button_state>:

/*
 * Проверяем состояние кнопки
 */
void check_and_update_button_state(ButtonAttributes_StructTypeDef* button_to_check, uint32_t ticks_per_sec)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	if (button_to_check->button_released_default_signal_level == LOGIC_LEVEL_LOW)						// если при отпущенной кнопке логическое состояние пина "0"
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7b1b      	ldrb	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d12f      	bne.n	800127e <check_and_update_button_state+0x72>
	{
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7a1b      	ldrb	r3, [r3, #8]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d124      	bne.n	8001270 <check_and_update_button_state+0x64>
		{
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7e1b      	ldrb	r3, [r3, #24]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d008      	beq.n	8001240 <check_and_update_button_state+0x34>
			{
				if (button_to_check->button_pressing_duration_counter >= button_to_check->button_bounce_filter_counts)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69da      	ldr	r2, [r3, #28]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	429a      	cmp	r2, r3
 8001238:	d302      	bcc.n	8001240 <check_and_update_button_state+0x34>
				{
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	761a      	strb	r2, [r3, #24]
				}
			}
			if (button_to_check->button_pressing_duration_counter >= convert_ms_to_ticks(button_to_check->button_long_press_ms, ticks_per_sec))			// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69dc      	ldr	r4, [r3, #28]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fb20 	bl	8001890 <convert_ms_to_ticks>
 8001250:	4603      	mov	r3, r0
 8001252:	429c      	cmp	r4, r3
 8001254:	d306      	bcc.n	8001264 <check_and_update_button_state+0x58>
			{
				button_to_check->button_pressing_duration_counter = button_to_check->button_long_press_ms;			// удерживаем счётчик от дальнейшего увеличения
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	61da      	str	r2, [r3, #28]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	761a      	strb	r2, [r3, #24]
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	61da      	str	r2, [r3, #28]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
		}
	}
}
 800126e:	e035      	b.n	80012dc <check_and_update_button_state+0xd0>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	e02e      	b.n	80012dc <check_and_update_button_state+0xd0>
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a1b      	ldrb	r3, [r3, #8]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d106      	bne.n	8001294 <check_and_update_button_state+0x88>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	761a      	strb	r2, [r3, #24]
}
 8001292:	e023      	b.n	80012dc <check_and_update_button_state+0xd0>
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7e1b      	ldrb	r3, [r3, #24]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d008      	beq.n	80012ae <check_and_update_button_state+0xa2>
				if (button_to_check->button_pressing_duration_counter >= button_to_check->button_bounce_filter_counts)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d302      	bcc.n	80012ae <check_and_update_button_state+0xa2>
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	761a      	strb	r2, [r3, #24]
			if (button_to_check->button_pressing_duration_counter >= convert_ms_to_ticks(button_to_check->button_long_press_ms, ticks_per_sec))		// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69dc      	ldr	r4, [r3, #28]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	6839      	ldr	r1, [r7, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fae9 	bl	8001890 <convert_ms_to_ticks>
 80012be:	4603      	mov	r3, r0
 80012c0:	429c      	cmp	r4, r3
 80012c2:	d306      	bcc.n	80012d2 <check_and_update_button_state+0xc6>
				button_to_check->button_pressing_duration_counter = button_to_check->button_long_press_ms;			// удерживаем счётчик от дальнейшего увеличения
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695a      	ldr	r2, [r3, #20]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	61da      	str	r2, [r3, #28]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	761a      	strb	r2, [r3, #24]
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	61da      	str	r2, [r3, #28]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <motor_movement_init>:

/*
 * Вызываем эту функцию тогда же, когда запускаем прерывания для движения
 */
void motor_movement_init(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	calculate_acceleration_coefficient(movement_profile);
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f000 f80a 	bl	8001308 <calculate_acceleration_coefficient>
	reset_movement_counters(motor_object);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f8a0 	bl	800143a <reset_movement_counters>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	0000      	movs	r0, r0
 8001304:	0000      	movs	r0, r0
	...

08001308 <calculate_acceleration_coefficient>:

/*
 * Рассчитываем коэффициент ускорения
 */
void calculate_acceleration_coefficient(MotorMovementProfile_StructTypeDef* movement_profile)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	movement_profile->linear_acceleration_coefficient = (movement_profile->max_speed_step_per_ms -  movement_profile->min_speed_step_per_ms)/movement_profile->acceleration_duration_ms;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	ed93 7a04 	vldr	s14, [r3, #16]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	edd3 7a03 	vldr	s15, [r3, #12]
 800131c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edc3 7a05 	vstr	s15, [r3, #20]
	movement_profile->quadratic_acceleration_coefficient = (movement_profile->max_speed_step_per_ms -  movement_profile->min_speed_step_per_ms)/pow(movement_profile->acceleration_duration_ms, 2);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a04 	vldr	s14, [r3, #16]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001346:	ee17 0a90 	vmov	r0, s15
 800134a:	f7ff f8c9 	bl	80004e0 <__aeabi_f2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8a0 	bl	800049c <__aeabi_ui2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001398 <calculate_acceleration_coefficient+0x90>
 8001364:	ec43 2b10 	vmov	d0, r2, r3
 8001368:	f003 faa4 	bl	80048b4 <pow>
 800136c:	ec53 2b10 	vmov	r2, r3, d0
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7ff fa36 	bl	80007e4 <__aeabi_ddiv>
 8001378:	4603      	mov	r3, r0
 800137a:	460c      	mov	r4, r1
 800137c:	4618      	mov	r0, r3
 800137e:	4621      	mov	r1, r4
 8001380:	f7ff fbb6 	bl	8000af0 <__aeabi_d2uiz>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bdb0      	pop	{r4, r5, r7, pc}
 8001392:	bf00      	nop
 8001394:	f3af 8000 	nop.w
 8001398:	00000000 	.word	0x00000000
 800139c:	40000000 	.word	0x40000000

080013a0 <cyclic_movement_step>:

/*
 * Циклическое движение мотора в режиме экспозиции
 */
void cyclic_movement_step(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	if (motor_object->step_impulses_distance_from_limit_switch <= movement_profile->short_distance_step_impulses)					// если мы в крайней точке точке, ближайшей к начальному положению
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d80b      	bhi.n	80013d0 <cyclic_movement_step+0x30>
	{
		motor_object->cyclic_movement_direction = MOVE_TO_COORD_END;			// выставляем флаг движения от начального положения
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_END);											// делаем шаг в сторону от начального положения
 80013c0:	2201      	movs	r2, #1
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f858 	bl	800147a <motor_check_counter_and_make_step_to_direction>
		reset_movement_counters(motor_object);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f835 	bl	800143a <reset_movement_counters>
	}
	/*
	 * если мы находимся в промежутке между крайними положениями растра (ближнее и дальнее)
	 */
	if ((motor_object->step_impulses_distance_from_limit_switch > movement_profile->short_distance_step_impulses) && \
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	461a      	mov	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d916      	bls.n	800140c <cyclic_movement_step+0x6c>
			(motor_object->step_impulses_distance_from_limit_switch < movement_profile->far_distance_step_impulses))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	461a      	mov	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
	if ((motor_object->step_impulses_distance_from_limit_switch > movement_profile->short_distance_step_impulses) && \
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d20f      	bcs.n	800140c <cyclic_movement_step+0x6c>
	{
		if (motor_object->cyclic_movement_direction == MOVE_TO_COORD_END)		// если выставлен флаг движения от начального положения
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d105      	bne.n	8001402 <cyclic_movement_step+0x62>
		{
			motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_END);										// делаем шаг от начального положения
 80013f6:	2201      	movs	r2, #1
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f83d 	bl	800147a <motor_check_counter_and_make_step_to_direction>
 8001400:	e004      	b.n	800140c <cyclic_movement_step+0x6c>
		}
		else
		{
			motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_ORIGIN);										// иначе делаем шаг в сторону начального положения
 8001402:	2200      	movs	r2, #0
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f837 	bl	800147a <motor_check_counter_and_make_step_to_direction>
		}
	}
	if (motor_object->step_impulses_distance_from_limit_switch >= movement_profile->far_distance_step_impulses)						// если мы в крайней точке, дальней от начального положения
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	461a      	mov	r2, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	d30b      	bcc.n	8001432 <cyclic_movement_step+0x92>
	{
		motor_object->cyclic_movement_direction = MOVE_TO_COORD_ORIGIN;					// выставляем флаг движения к начальному положению
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		motor_check_counter_and_make_step_to_direction(motor_object, movement_profile, MOVE_TO_COORD_ORIGIN);											// делаем шаг в сторону начального положения
 8001422:	2200      	movs	r2, #0
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f827 	bl	800147a <motor_check_counter_and_make_step_to_direction>
		reset_movement_counters(motor_object);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f804 	bl	800143a <reset_movement_counters>
	}
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <reset_movement_counters>:

/*
 * Сбрасываем счётчики движения
 */
void reset_movement_counters(MotorObject_StructTypeDef* motor_object)
{
 800143a:	b490      	push	{r4, r7}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	motor_object->ticks_before_next_step_counter = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	64da      	str	r2, [r3, #76]	; 0x4c
	motor_object->ticks_since_start_movement_counter = 0;
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	f04f 0400 	mov.w	r4, #0
 8001452:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	motor_object->step_impulses_for_acceleration_counter = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	665a      	str	r2, [r3, #100]	; 0x64
	motor_object->step_impulses_since_start_movement_counter = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	659a      	str	r2, [r3, #88]	; 0x58
	motor_object->ticks_for_acceleration_counter = 0;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	661a      	str	r2, [r3, #96]	; 0x60
	motor_object->current_speed_step_per_ms = 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bc90      	pop	{r4, r7}
 8001478:	4770      	bx	lr

0800147a <motor_check_counter_and_make_step_to_direction>:

/*
 * Делаем шаг в заданном направлении
 */
void motor_check_counter_and_make_step_to_direction(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile, MotorMoveDirection_EnumTypeDef movement_direction)
{
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	4613      	mov	r3, r2
 8001486:	71fb      	strb	r3, [r7, #7]
	motor_object->ticks_since_start_movement_counter = motor_object->ticks_since_start_movement_counter + 1;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	e9d3 1214 	ldrd	r1, r2, [r3, #80]	; 0x50
 800148e:	1c4b      	adds	r3, r1, #1
 8001490:	f142 0400 	adc.w	r4, r2, #0
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	motor_object->ticks_before_next_step_counter = motor_object->ticks_before_next_step_counter - 1;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	1e5a      	subs	r2, r3, #1
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	64da      	str	r2, [r3, #76]	; 0x4c
	if (movement_profile->acceleration_type != NO_ACCELERATION)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d01e      	beq.n	80014ea <motor_check_counter_and_make_step_to_direction+0x70>
	{
		if ((movement_profile->far_distance_step_impulses - motor_object->step_impulses_since_start_movement_counter) >= motor_object->step_impulses_for_acceleration_counter)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	1ad2      	subs	r2, r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d310      	bcc.n	80014e0 <motor_check_counter_and_make_step_to_direction+0x66>
		{
			if (motor_object->current_speed_step_per_ms < movement_profile->max_speed_step_per_ms)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d50a      	bpl.n	80014ea <motor_check_counter_and_make_step_to_direction+0x70>
			{
				motor_object->ticks_for_acceleration_counter = motor_object->ticks_for_acceleration_counter + 1;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	661a      	str	r2, [r3, #96]	; 0x60
 80014de:	e004      	b.n	80014ea <motor_check_counter_and_make_step_to_direction+0x70>
			}
		}
		else
		{
			motor_object->ticks_for_acceleration_counter = motor_object->ticks_for_acceleration_counter - 1;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	661a      	str	r2, [r3, #96]	; 0x60
		}
	}

	if (motor_object->ticks_before_next_step_counter <= 0)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	dc12      	bgt.n	8001518 <motor_check_counter_and_make_step_to_direction+0x9e>
	{
		motor_object->motor_movement_direction = movement_direction;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		motor_direction_pin_set(motor_object);
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f810 	bl	8001520 <motor_direction_pin_set>
		check_limit_switch_and_make_step(motor_object);
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f84b 	bl	800159c <check_limit_switch_and_make_step>
		motor_object->step_impulses_since_start_movement_counter = motor_object->step_impulses_since_start_movement_counter + 1;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	659a      	str	r2, [r3, #88]	; 0x58
		calculate_ticks_per_next_step(motor_object, movement_profile);
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f87b 	bl	800160e <calculate_ticks_per_next_step>
	}
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}

08001520 <motor_direction_pin_set>:

/*
 * выставляем пин направления мотора
 */
void motor_direction_pin_set(MotorObject_StructTypeDef* motor_object)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	switch (motor_object->motor_movement_direction)																// если направление движения
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <motor_direction_pin_set+0x18>
 8001532:	2b01      	cmp	r3, #1
 8001534:	d017      	beq.n	8001566 <motor_direction_pin_set+0x46>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
		}
		break;
	}
	}
}
 8001536:	e02d      	b.n	8001594 <motor_direction_pin_set+0x74>
		if (motor_object->DIR_pin_logic_level_inverted)		// !! ifdef											// если логический уровень направления инвертирован аппаратно
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <motor_direction_pin_set+0x34>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69d8      	ldr	r0, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8c1b      	ldrh	r3, [r3, #32]
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	f001 fc5f 	bl	8002e10 <HAL_GPIO_WritePin>
		break;
 8001552:	e01f      	b.n	8001594 <motor_direction_pin_set+0x74>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_SET);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69d8      	ldr	r0, [r3, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8c1b      	ldrh	r3, [r3, #32]
 800155c:	2201      	movs	r2, #1
 800155e:	4619      	mov	r1, r3
 8001560:	f001 fc56 	bl	8002e10 <HAL_GPIO_WritePin>
		break;
 8001564:	e016      	b.n	8001594 <motor_direction_pin_set+0x74>
		if (motor_object->DIR_pin_logic_level_inverted)															// если логический уровень направления инвертирован аппаратно
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <motor_direction_pin_set+0x62>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_SET);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69d8      	ldr	r0, [r3, #28]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	8c1b      	ldrh	r3, [r3, #32]
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	f001 fc48 	bl	8002e10 <HAL_GPIO_WritePin>
		break;
 8001580:	e007      	b.n	8001592 <motor_direction_pin_set+0x72>
			HAL_GPIO_WritePin(motor_object->motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.DIR_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69d8      	ldr	r0, [r3, #28]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	8c1b      	ldrh	r3, [r3, #32]
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	f001 fc3f 	bl	8002e10 <HAL_GPIO_WritePin>
		break;
 8001592:	bf00      	nop
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <check_limit_switch_and_make_step>:

/*
 * проверяем состояние концевика и совершаем шаг
 */
void check_limit_switch_and_make_step(MotorObject_StructTypeDef* motor_object)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	/*
//	 * если направление движения к начальному положению, и концевик не активен, и не пройдено аварийное количество шагов к начальному положению
	 */
	if ((motor_object->motor_movement_direction == MOVE_TO_COORD_ORIGIN) && \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11b      	bne.n	80015e6 <check_limit_switch_and_make_step+0x4a>
		(!(limit_switch_return_state(motor_object))) && \
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f91a 	bl	80017e8 <limit_switch_return_state>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f083 0301 	eor.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
	if ((motor_object->motor_movement_direction == MOVE_TO_COORD_ORIGIN) && \
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d012      	beq.n	80015e6 <check_limit_switch_and_make_step+0x4a>
		(motor_object->limit_emergency_counter < motor_object->emergency_step_impulses_to_limit))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		(!(limit_switch_return_state(motor_object))) && \
 80015c8:	429a      	cmp	r2, r3
 80015ca:	da0c      	bge.n	80015e6 <check_limit_switch_and_make_step+0x4a>
	{
		step_toggle(motor_object);																				// совершаем шаг
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f935 	bl	800183c <step_toggle>
		motor_object->step_impulses_distance_from_limit_switch = motor_object->step_impulses_distance_from_limit_switch - 1;		// декрементируем счётчик расстояния от начального положения
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	1e5a      	subs	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	641a      	str	r2, [r3, #64]	; 0x40
		motor_object->limit_emergency_counter = motor_object->limit_emergency_counter + 1;							// инкрементируем аварийный счётчик шагов
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	if (motor_object->motor_movement_direction == MOVE_TO_COORD_END)											// если направлениение движения от начального положения
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d10a      	bne.n	8001606 <check_limit_switch_and_make_step+0x6a>
	{
		step_toggle(motor_object);																				// совершаем шаг
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f923 	bl	800183c <step_toggle>
		motor_object->step_impulses_distance_from_limit_switch = motor_object->step_impulses_distance_from_limit_switch + 1;		// инкрементируем счётчик расстояния от начального положения
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
		motor_object->limit_emergency_counter = 0;															// обнуляем аварийный счётчик шагов
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	; 0x44
	}
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <calculate_ticks_per_next_step>:

void calculate_ticks_per_next_step(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 800160e:	b590      	push	{r4, r7, lr}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	switch (movement_profile->acceleration_type)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10e      	bne.n	800163e <calculate_ticks_per_next_step+0x30>
	{
	case (NO_ACCELERATION):
	{
		motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/movement_profile->max_speed_step_per_ms;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	ed93 7a04 	vldr	s14, [r3, #16]
 800162c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001634:	ee17 2a90 	vmov	r2, s15
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	64da      	str	r2, [r3, #76]	; 0x4c
		break;
 800163c:	e05e      	b.n	80016fc <calculate_ticks_per_next_step+0xee>
	}
	default:
	{
		// если оставшееся количество шагов больше количества шагов для ускорения/замедления, мы либо ускоряемся, либо движемся с макс. скоростью
		if ((movement_profile->far_distance_step_impulses - motor_object->step_impulses_since_start_movement_counter) > motor_object->step_impulses_for_acceleration_counter)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	1ad2      	subs	r2, r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800164c:	429a      	cmp	r2, r3
 800164e:	d93a      	bls.n	80016c6 <calculate_ticks_per_next_step+0xb8>
		{
			// если мы не достигли максимальной скорости, ускоряемся
			if (motor_object->current_speed_step_per_ms < movement_profile->max_speed_step_per_ms)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	edd3 7a04 	vldr	s15, [r3, #16]
 800165c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	d520      	bpl.n	80016a8 <calculate_ticks_per_next_step+0x9a>
			{
				motor_object->current_speed_step_per_ms = movement_time_function(motor_object->ticks_since_start_movement_counter, motor_object, movement_profile);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 f849 	bl	8001708 <movement_time_function>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
				motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/motor_object->current_speed_step_per_ms;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800168c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001694:	ee17 2a90 	vmov	r2, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	64da      	str	r2, [r3, #76]	; 0x4c
				motor_object->step_impulses_for_acceleration_counter = motor_object->step_impulses_for_acceleration_counter + 1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	665a      	str	r2, [r3, #100]	; 0x64
		else
		{
			motor_object->current_speed_step_per_ms = movement_time_function(motor_object->ticks_for_acceleration_counter, motor_object, movement_profile);
			motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/motor_object->current_speed_step_per_ms;
		}
		break;
 80016a6:	e028      	b.n	80016fa <calculate_ticks_per_next_step+0xec>
				motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/movement_profile->max_speed_step_per_ms;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80016b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016bc:	ee17 2a90 	vmov	r2, s15
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	64da      	str	r2, [r3, #76]	; 0x4c
		break;
 80016c4:	e019      	b.n	80016fa <calculate_ticks_per_next_step+0xec>
			motor_object->current_speed_step_per_ms = movement_time_function(motor_object->ticks_for_acceleration_counter, motor_object, movement_profile);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f81a 	bl	8001708 <movement_time_function>
 80016d4:	eef0 7a40 	vmov.f32	s15, s0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			motor_object->ticks_before_next_step_counter = motor_object->motor_timer_ticks_per_ms/motor_object->current_speed_step_per_ms;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80016ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f2:	ee17 2a90 	vmov	r2, s15
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	64da      	str	r2, [r3, #76]	; 0x4c
		break;
 80016fa:	bf00      	nop
	}
	}
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	0000      	movs	r0, r0
	...

08001708 <movement_time_function>:


float movement_time_function(uint32_t ticks_value, MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	float calculated_speed_step_per_ms = 0;
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
	switch (movement_profile->acceleration_type)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d002      	beq.n	8001728 <movement_time_function+0x20>
 8001722:	2b02      	cmp	r3, #2
 8001724:	d017      	beq.n	8001756 <movement_time_function+0x4e>
		break;
	}
	default:
	{

		break;
 8001726:	e053      	b.n	80017d0 <movement_time_function+0xc8>
		calculated_speed_step_per_ms = ((ticks_value/motor_object->motor_timer_ticks_per_ms) * movement_profile->linear_acceleration_coefficient) + (movement_profile->min_speed_step_per_ms);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edd3 7a03 	vldr	s15, [r3, #12]
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8001754:	e03c      	b.n	80017d0 <movement_time_function+0xc8>
		calculated_speed_step_per_ms = (pow((ticks_value/motor_object->motor_timer_ticks_per_ms), 2) * movement_profile->linear_acceleration_coefficient) + (movement_profile->min_speed_step_per_ms);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001766:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800176a:	ee16 0a90 	vmov	r0, s13
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4603      	mov	r3, r0
 8001774:	460c      	mov	r4, r1
 8001776:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80017e0 <movement_time_function+0xd8>
 800177a:	ec44 3b10 	vmov	d0, r3, r4
 800177e:	f003 f899 	bl	80048b4 <pow>
 8001782:	ec56 5b10 	vmov	r5, r6, d0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fea8 	bl	80004e0 <__aeabi_f2d>
 8001790:	4603      	mov	r3, r0
 8001792:	460c      	mov	r4, r1
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	4628      	mov	r0, r5
 800179a:	4631      	mov	r1, r6
 800179c:	f7fe fef8 	bl	8000590 <__aeabi_dmul>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	4625      	mov	r5, r4
 80017a6:	461c      	mov	r4, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe97 	bl	80004e0 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd33 	bl	8000224 <__adddf3>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	4618      	mov	r0, r3
 80017c4:	4621      	mov	r1, r4
 80017c6:	f7ff f9b3 	bl	8000b30 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	617b      	str	r3, [r7, #20]
		break;
 80017ce:	bf00      	nop
	}
	}
	return calculated_speed_step_per_ms;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	ee07 3a90 	vmov	s15, r3
}
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40000000 	.word	0x40000000

080017e8 <limit_switch_return_state>:

/*
 * опрашиваем и возрващаем состояние концевика
 */
_Bool limit_switch_return_state(MotorObject_StructTypeDef* motor_object)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	_Bool current_state;																			// флаг состояния концевика
	check_input_signal_state(&motor_object->limit_switch.limit_switch_IN_signal);					// опрашиваем состояние пина концевика
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fcea 	bl	80011cc <check_input_signal_state>
	if (motor_object->limit_switch.limit_switch_logic_inverted)										// если логический уровень концевика инвертирован аппаратно
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7b1b      	ldrb	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00c      	beq.n	800181a <limit_switch_return_state+0x32>
	{
		if (motor_object->limit_switch.limit_switch_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)			// если на пине концевика "0"
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7a1b      	ldrb	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <limit_switch_return_state+0x2c>
		{
			current_state = 1;																		// выставляем флаг концевика в "1"
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
			motor_object->step_impulses_distance_from_limit_switch = 0;										// обнуляем счётчик расстояния до концевика
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
 8001812:	e00e      	b.n	8001832 <limit_switch_return_state+0x4a>
		}
		else
		{
			current_state = 0;																		// иначе выставляем флаг концевика в "0"
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e00b      	b.n	8001832 <limit_switch_return_state+0x4a>
		}
	}
	else
	{
		if (motor_object->limit_switch.limit_switch_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)			// иначе если на пине концевика "0"
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7a1b      	ldrb	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <limit_switch_return_state+0x40>
		{
			current_state = 0;																		// выставляем флаг концевика в "0"
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
 8001826:	e004      	b.n	8001832 <limit_switch_return_state+0x4a>
		}
		else
		{
			current_state = 1;																		// иначе выставляем флаг концевика в "1"
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
			motor_object->step_impulses_distance_from_limit_switch = 0;												// обнуляем счётчик расстояния до концевика
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	return current_state;																			// возвращаем флаг состояния концевика
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <step_toggle>:

/*
 * совершаем шаг
 */
void step_toggle(MotorObject_StructTypeDef* motor_object)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	switch (motor_object->step_pin_current_phase)															// если текущее логическое состояние на пине шага
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <step_toggle+0x18>
 800184e:	2b01      	cmp	r3, #1
 8001850:	d00d      	beq.n	800186e <step_toggle+0x32>
		HAL_GPIO_WritePin(motor_object->motor_signals.STEP_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.STEP_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
		motor_object->step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
		break;
	}
	}
}
 8001852:	e019      	b.n	8001888 <step_toggle+0x4c>
		HAL_GPIO_WritePin(motor_object->motor_signals.STEP_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.STEP_OUT_signal.signal_pin.pin_number, GPIO_PIN_SET);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6918      	ldr	r0, [r3, #16]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	8a9b      	ldrh	r3, [r3, #20]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f001 fad6 	bl	8002e10 <HAL_GPIO_WritePin>
		motor_object->step_pin_current_phase = STEP_HIGH_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "1"
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		break;
 800186c:	e00c      	b.n	8001888 <step_toggle+0x4c>
		HAL_GPIO_WritePin(motor_object->motor_signals.STEP_OUT_signal.signal_pin.GPIO_port_pointer, motor_object->motor_signals.STEP_OUT_signal.signal_pin.pin_number, GPIO_PIN_RESET);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6918      	ldr	r0, [r3, #16]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	8a9b      	ldrh	r3, [r3, #20]
 8001876:	2200      	movs	r2, #0
 8001878:	4619      	mov	r1, r3
 800187a:	f001 fac9 	bl	8002e10 <HAL_GPIO_WritePin>
		motor_object->step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		break;
 8001886:	bf00      	nop
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <convert_ms_to_ticks>:

uint32_t convert_ms_to_ticks(uint32_t seconds, uint32_t ticks_per_sec)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	uint32_t ticks_per_time;
	ticks_per_time = seconds*ticks_per_sec;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	60fb      	str	r3, [r7, #12]
	return ticks_per_time;
 80018a4:	68fb      	ldr	r3, [r7, #12]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <device_init>:
/*
 * Инициализация устройства
 */

void device_init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	device_current_state = DEVICE_STARTS;						// выставляем состояние устройства: устройство стартует
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <device_init+0x44>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
	input_pins_init();												// инициализируем сигналы (указываем пины и порты, инициализируем единый массив сигналов)
 80018be:	f000 f82b 	bl	8001918 <input_pins_init>
	output_signals_state_init(LOGIC_LEVEL_HIGH);				// выставляем состояние выходных сигналов
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 fa16 	bl	8001cf4 <output_signals_state_init>
	input_signals_state_update();								// считываем состояние входных сигналов
 80018c8:	f000 f9de 	bl	8001c88 <input_signals_state_update>
	device_modules_init();										// инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1, DIP-переключатели)
 80018cc:	f000 f89a 	bl	8001a04 <device_modules_init>
	buttons_state_update();										// обновляем состояние кнопок
 80018d0:	f000 fa60 	bl	8001d94 <buttons_state_update>
	set_grid_out_signal();										// выставляем светодиоды датчика типа растра
 80018d4:	f000 fc0c 	bl	80020f0 <set_grid_out_signal>
	buckybreak_laser_disable();									// выключаем сигнал buckybreak и лазер
 80018d8:	f000 fc44 	bl	8002164 <buckybreak_laser_disable>
	dip_switch_state_update();									// проверка направления и скорости движения
 80018dc:	f000 f974 	bl	8001bc8 <dip_switch_state_update>
	bucky_ready_dsable();
 80018e0:	f000 fcba 	bl	8002258 <bucky_ready_dsable>
	enable_pin_set();											// навсегда выставляем "1" на входе ШД "Enable"
 80018e4:	f000 f80c 	bl	8001900 <enable_pin_set>
	error_code = NO_ERROR;										// выставляем отсутствие ошибки
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <device_init+0x48>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
	signals_check_timer_interrupts_start();						// запускаем таймер считывания состояний сигналов
 80018ee:	f000 fa41 	bl	8001d74 <signals_check_timer_interrupts_start>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000180 	.word	0x20000180
 80018fc:	20000304 	.word	0x20000304

08001900 <enable_pin_set>:

/*
 *
 */
void enable_pin_set(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	if (ENABLE_PIN_LOGIC_LEVEL_INVERTED)
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_LOW);
 8001904:	2200      	movs	r2, #0
 8001906:	2120      	movs	r1, #32
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <enable_pin_set+0x14>)
 800190a:	f7ff fc43 	bl	8001194 <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_HIGH);
	}
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	48000400 	.word	0x48000400

08001918 <input_pins_init>:

/*
 * Определяем входные пины, исходя из инициализации, созданной конфигуратором пинов
 */
void input_pins_init(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <input_pins_init+0xc8>)
 800191e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001922:	60da      	str	r2, [r3, #12]
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.pin_number = GRID_180_DETECT_Pin;					// пин датчика Холла (растр типа 180)
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <input_pins_init+0xc8>)
 8001926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192a:	821a      	strh	r2, [r3, #16]

	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <input_pins_init+0xc8>)
 800192e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001932:	601a      	str	r2, [r3, #0]
	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.pin_number = GRID_120_DETECT_Pin;					// пин датчика Холла (растр типа 120)
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <input_pins_init+0xc8>)
 8001936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193a:	809a      	strh	r2, [r3, #4]

	grid_supply_button.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <input_pins_init+0xcc>)
 800193e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001942:	601a      	str	r2, [r3, #0]
	grid_supply_button.button_signal.signal_pin.pin_number = GRID_BUTTON_Pin;							// пин кнопки подачи растра
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <input_pins_init+0xcc>)
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	809a      	strh	r2, [r3, #4]

	ON_TOMO_IN_signal.signal_pin.GPIO_port_pointer = ON_TOMO_GPIO_Port;
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <input_pins_init+0xd0>)
 800194c:	4a27      	ldr	r2, [pc, #156]	; (80019ec <input_pins_init+0xd4>)
 800194e:	601a      	str	r2, [r3, #0]
	ON_TOMO_IN_signal.signal_pin.pin_number = ON_TOMO_Pin;												// пин сигнала ON_TOMO
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <input_pins_init+0xd0>)
 8001952:	2202      	movs	r2, #2
 8001954:	809a      	strh	r2, [r3, #4]

	BUCKY_CALL_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <input_pins_init+0xd8>)
 8001958:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800195c:	601a      	str	r2, [r3, #0]
	BUCKY_CALL_IN_signal.signal_pin.pin_number = BUCKY_CALL_Pin;										// пин сигнала BUCKYCALL
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <input_pins_init+0xd8>)
 8001960:	2240      	movs	r2, #64	; 0x40
 8001962:	809a      	strh	r2, [r3, #4]

	pushbutton_buckybrake.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <input_pins_init+0xdc>)
 8001966:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800196a:	601a      	str	r2, [r3, #0]
	pushbutton_buckybrake.button_signal.signal_pin.pin_number = PUSHBUTTON_BUCKYBRAKE_Pin;				// пин кнопки тормоза кассетоприёмника
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <input_pins_init+0xdc>)
 800196e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001972:	809a      	strh	r2, [r3, #4]

	motor_instance_1.limit_switch.limit_switch_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <input_pins_init+0xe0>)
 8001976:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800197a:	601a      	str	r2, [r3, #0]
	motor_instance_1.limit_switch.limit_switch_IN_signal.signal_pin.pin_number = GRID_END_POINT_Pin;					// пин концевика
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <input_pins_init+0xe0>)
 800197e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001982:	809a      	strh	r2, [r3, #4]
	motor_instance_1.motor_signals.STEP_OUT_signal.signal_pin.GPIO_port_pointer = GPIOB;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <input_pins_init+0xe0>)
 8001986:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <input_pins_init+0xe4>)
 8001988:	611a      	str	r2, [r3, #16]
	motor_instance_1.motor_signals.STEP_OUT_signal.signal_pin.pin_number = STEP_Pin;
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <input_pins_init+0xe0>)
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	829a      	strh	r2, [r3, #20]
	motor_instance_1.motor_signals.DIR_OUT_signal.signal_pin.GPIO_port_pointer = GPIOB;
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <input_pins_init+0xe0>)
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <input_pins_init+0xe4>)
 8001994:	61da      	str	r2, [r3, #28]
	motor_instance_1.motor_signals.DIR_OUT_signal.signal_pin.pin_number = DIR_Pin;
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <input_pins_init+0xe0>)
 8001998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199c:	841a      	strh	r2, [r3, #32]
	motor_instance_1.motor_signals.ENABLE_OUT_signal.signal_pin.GPIO_port_pointer = GPIOB;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <input_pins_init+0xe0>)
 80019a0:	4a16      	ldr	r2, [pc, #88]	; (80019fc <input_pins_init+0xe4>)
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
	motor_instance_1.motor_signals.ENABLE_OUT_signal.signal_pin.pin_number = ENABLE_Pin;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <input_pins_init+0xe0>)
 80019a6:	2220      	movs	r2, #32
 80019a8:	859a      	strh	r2, [r3, #44]	; 0x2c

	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <input_pins_init+0xe8>)
 80019ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019b0:	601a      	str	r2, [r3, #0]
	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.pin_number = CONFIG_1_Pin;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <input_pins_init+0xe8>)
 80019b4:	2204      	movs	r2, #4
 80019b6:	809a      	strh	r2, [r3, #4]

	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <input_pins_init+0xe8>)
 80019ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019be:	60da      	str	r2, [r3, #12]
	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.pin_number = CONFIG_2_Pin;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <input_pins_init+0xe8>)
 80019c2:	2202      	movs	r2, #2
 80019c4:	821a      	strh	r2, [r3, #16]

	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <input_pins_init+0xe8>)
 80019c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019cc:	619a      	str	r2, [r3, #24]
	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.pin_number = CONFIG_3_Pin;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <input_pins_init+0xe8>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	839a      	strh	r2, [r3, #28]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000260 	.word	0x20000260
 80019e4:	20000160 	.word	0x20000160
 80019e8:	20000308 	.word	0x20000308
 80019ec:	48001400 	.word	0x48001400
 80019f0:	20000184 	.word	0x20000184
 80019f4:	200001dc 	.word	0x200001dc
 80019f8:	200000a0 	.word	0x200000a0
 80019fc:	48000400 	.word	0x48000400
 8001a00:	200001b4 	.word	0x200001b4

08001a04 <device_modules_init>:

/*
 * Инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1)
 */
void device_modules_init(void)
{
 8001a04:	b490      	push	{r4, r7}
 8001a06:	af00      	add	r7, sp, #0
	motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;					// даём двигателю задание занять начальное положение
 8001a08:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <device_modules_init+0x164>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;							// выставляем флаг, что мотор находится в движении
 8001a0e:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <device_modules_init+0x168>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
	exposition_movement_direction = EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION;	// задаём начальное направление циклического движения при экспозиции
 8001a14:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <device_modules_init+0x16c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	grid_supply_button.button_released_default_signal_level = LOGIC_LEVEL_LOW;			// выставляем флаг, что при отпущенной кнопке на пине "1"
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <device_modules_init+0x170>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	731a      	strb	r2, [r3, #12]
	grid_supply_button.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 8001a20:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <device_modules_init+0x170>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
	grid_supply_button.button_bounce_filter_counts = BUTTON_BOUNCE_FILTER_COUNTS;
 8001a26:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <device_modules_init+0x170>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
	grid_supply_button.button_long_press_ms = BUTTON_LONG_PRESS_DURATION_SEC;
 8001a2c:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <device_modules_init+0x170>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	615a      	str	r2, [r3, #20]
	ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;											// выставляем флаг, что сигнала ON_TOMO не было
 8001a32:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <device_modules_init+0x174>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
	bucky_ready_delay_counter = 0;														// обнуляем счётчик шагов, после которых выставляем BUCKY_READY в "1"
 8001a38:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <device_modules_init+0x178>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
	pushbutton_buckybrake.button_released_default_signal_level = LOGIC_LEVEL_LOW;		// выставляем флаг, что при отпущенной кнопке на пине "1"
 8001a3e:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <device_modules_init+0x17c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	731a      	strb	r2, [r3, #12]
	pushbutton_buckybrake.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 8001a44:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <device_modules_init+0x17c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
	pushbutton_buckybrake.button_bounce_filter_counts = BUTTON_BOUNCE_FILTER_COUNTS;
 8001a4a:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <device_modules_init+0x17c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
	pushbutton_buckybrake.button_long_press_ms = BUTTON_LONG_PRESS_DURATION_SEC;
 8001a50:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <device_modules_init+0x17c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	615a      	str	r2, [r3, #20]

	motor_instance_1.limit_switch.limit_switch_logic_inverted = LIMIT_SWITCH_LOGIC_LEVEL_INVERTED;
 8001a56:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <device_modules_init+0x180>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	731a      	strb	r2, [r3, #12]
	motor_instance_1.emergency_step_impulses_to_limit = EMERGENCY_STEP_IMPULSES_TO_LIMIT;
 8001a5c:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <device_modules_init+0x180>)
 8001a5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
	motor_instance_1.DIR_pin_logic_level_inverted = DIR_PIN_LOGIC_LEVEL_INVERTED;
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <device_modules_init+0x180>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	motor_instance_1.motor_timer_ticks_per_ms = MOTOR_TIMER_TICKS_PER_MS;
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <device_modules_init+0x180>)
 8001a6e:	4a46      	ldr	r2, [pc, #280]	; (8001b88 <device_modules_init+0x184>)
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c
	motor_instance_1.step_impulses_distance_from_limit_switch = STEP_IMPULSES_DISTANCE_INITIAL;
 8001a72:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <device_modules_init+0x180>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
	motor_instance_1.limit_emergency_counter = 0;
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <device_modules_init+0x180>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
	motor_instance_1.motor_movement_direction = MOVE_TO_COORD_END;
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <device_modules_init+0x180>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	motor_instance_1.step_pin_current_phase = STEP_LOW_PHASE;
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <device_modules_init+0x180>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	motor_instance_1.ticks_before_next_step_counter = 0;
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <device_modules_init+0x180>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	64da      	str	r2, [r3, #76]	; 0x4c
	motor_instance_1.ticks_since_start_movement_counter = 0;
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <device_modules_init+0x180>)
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	f04f 0400 	mov.w	r4, #0
 8001a9e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	motor_instance_1.step_impulses_since_start_movement_counter = 0;
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <device_modules_init+0x180>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58
	motor_instance_1.current_speed_step_per_ms = 0;
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <device_modules_init+0x180>)
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	65da      	str	r2, [r3, #92]	; 0x5c
	motor_instance_1.ticks_for_acceleration_counter = 0;
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <device_modules_init+0x180>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60
	motor_instance_1.step_impulses_for_acceleration_counter = 0;
 8001ab6:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <device_modules_init+0x180>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	665a      	str	r2, [r3, #100]	; 0x64
	motor_instance_1.cyclic_movement_direction = MOVE_TO_COORD_END;
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <device_modules_init+0x180>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	movement_profile_1_default.acceleration_type = NO_ACCELERATION;
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <device_modules_init+0x188>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
	movement_profile_1_default.short_distance_step_impulses = SHORT_DISTANCE_STEP_IMPULSES;
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <device_modules_init+0x188>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]
	movement_profile_1_default.far_distance_step_impulses = FAR_DISTANCE_STEP_IMPULSES;
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <device_modules_init+0x188>)
 8001ad2:	f240 7222 	movw	r2, #1826	; 0x722
 8001ad6:	609a      	str	r2, [r3, #8]
	movement_profile_1_default.min_speed_step_per_ms = CONSTANT_SPEED_STEP_PER_MS;
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <device_modules_init+0x188>)
 8001ada:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <device_modules_init+0x18c>)
 8001adc:	60da      	str	r2, [r3, #12]
	movement_profile_1_default.max_speed_step_per_ms = CONSTANT_SPEED_STEP_PER_MS;
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <device_modules_init+0x188>)
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <device_modules_init+0x18c>)
 8001ae2:	611a      	str	r2, [r3, #16]
	movement_profile_1_default.linear_acceleration_coefficient = LINEAR_ACCELERATION_COEFFICIENT_INITIAL;
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <device_modules_init+0x188>)
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
	movement_profile_1_default.quadratic_acceleration_coefficient = QUADRATIC_ACCELERATION_COEFFICIENT_INITIAL;
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <device_modules_init+0x188>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
	movement_profile_1_default.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_00;
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <device_modules_init+0x188>)
 8001af4:	2228      	movs	r2, #40	; 0x28
 8001af6:	61da      	str	r2, [r3, #28]

	movement_profile_2_exposition.acceleration_type = LINEAR_ACCELERATION;
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <device_modules_init+0x190>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
	movement_profile_2_exposition.short_distance_step_impulses = SHORT_DISTANCE_STEP_IMPULSES;
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <device_modules_init+0x190>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
	movement_profile_2_exposition.far_distance_step_impulses = FAR_DISTANCE_STEP_IMPULSES;
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <device_modules_init+0x190>)
 8001b06:	f240 7222 	movw	r2, #1826	; 0x722
 8001b0a:	609a      	str	r2, [r3, #8]
	movement_profile_2_exposition.min_speed_step_per_ms = MIN_SPEED_STEP_PER_MS_ALL_MODES;
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <device_modules_init+0x190>)
 8001b0e:	4a22      	ldr	r2, [pc, #136]	; (8001b98 <device_modules_init+0x194>)
 8001b10:	60da      	str	r2, [r3, #12]
	movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_00;
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <device_modules_init+0x190>)
 8001b14:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <device_modules_init+0x198>)
 8001b16:	611a      	str	r2, [r3, #16]
	movement_profile_2_exposition.linear_acceleration_coefficient = LINEAR_ACCELERATION_COEFFICIENT_INITIAL;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <device_modules_init+0x190>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
	movement_profile_2_exposition.quadratic_acceleration_coefficient = QUADRATIC_ACCELERATION_COEFFICIENT_INITIAL;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <device_modules_init+0x190>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
	movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_00;
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <device_modules_init+0x190>)
 8001b28:	2228      	movs	r2, #40	; 0x28
 8001b2a:	61da      	str	r2, [r3, #28]

	movement_profile_3_supply.acceleration_type = NO_ACCELERATION;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <device_modules_init+0x19c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
	movement_profile_3_supply.short_distance_step_impulses = SHORT_DISTANCE_STEP_IMPULSES;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <device_modules_init+0x19c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
	movement_profile_3_supply.far_distance_step_impulses = RASTER_SUPPLY_DISTANCE_STEP_IMPULSES;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <device_modules_init+0x19c>)
 8001b3a:	f240 7291 	movw	r2, #1937	; 0x791
 8001b3e:	609a      	str	r2, [r3, #8]
	movement_profile_3_supply.min_speed_step_per_ms = RASTER_SUPPLY_SPEED_STEP_PER_MS;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <device_modules_init+0x19c>)
 8001b42:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <device_modules_init+0x1a0>)
 8001b44:	60da      	str	r2, [r3, #12]
	movement_profile_3_supply.max_speed_step_per_ms = RASTER_SUPPLY_SPEED_STEP_PER_MS;
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <device_modules_init+0x19c>)
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <device_modules_init+0x1a0>)
 8001b4a:	611a      	str	r2, [r3, #16]
	movement_profile_3_supply.linear_acceleration_coefficient = LINEAR_ACCELERATION_COEFFICIENT_INITIAL;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <device_modules_init+0x19c>)
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
	movement_profile_3_supply.quadratic_acceleration_coefficient = QUADRATIC_ACCELERATION_COEFFICIENT_INITIAL;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <device_modules_init+0x19c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
	movement_profile_3_supply.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_00;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <device_modules_init+0x19c>)
 8001b5c:	2228      	movs	r2, #40	; 0x28
 8001b5e:	61da      	str	r2, [r3, #28]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc90      	pop	{r4, r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000190 	.word	0x20000190
 8001b6c:	20000099 	.word	0x20000099
 8001b70:	20000098 	.word	0x20000098
 8001b74:	20000160 	.word	0x20000160
 8001b78:	200001d8 	.word	0x200001d8
 8001b7c:	20000110 	.word	0x20000110
 8001b80:	200001dc 	.word	0x200001dc
 8001b84:	200000a0 	.word	0x200000a0
 8001b88:	43480000 	.word	0x43480000
 8001b8c:	20000194 	.word	0x20000194
 8001b90:	4029999a 	.word	0x4029999a
 8001b94:	200002c4 	.word	0x200002c4
 8001b98:	4048d4fe 	.word	0x4048d4fe
 8001b9c:	41111eb8 	.word	0x41111eb8
 8001ba0:	200002e4 	.word	0x200002e4
 8001ba4:	407e147b 	.word	0x407e147b

08001ba8 <check_input_signals>:

/*
 * Обновляем состояние входных сигналов и аппаратных модулей
 */
void check_input_signals(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	input_signals_state_update();					// считываем состояние входов, обновляем их состояние в объекте устройства
 8001bac:	f000 f86c 	bl	8001c88 <input_signals_state_update>
	buttons_state_update();							// обновляем состояние аппаратных модулей
 8001bb0:	f000 f8f0 	bl	8001d94 <buttons_state_update>
	device_error_check(&motor_instance_1);			// проверяем текущее состояние устройства на наличие ошибок
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <check_input_signals+0x1c>)
 8001bb6:	f000 f8fd 	bl	8001db4 <device_error_check>
	read_input_signals_and_set_device_state();		// изменяем состояние устройства в зависимости от входных сигналов
 8001bba:	f000 f99b 	bl	8001ef4 <read_input_signals_and_set_device_state>
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200000a0 	.word	0x200000a0

08001bc8 <dip_switch_state_update>:

void dip_switch_state_update(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001bce:	7a1b      	ldrb	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d109      	bne.n	8001be8 <dip_switch_state_update+0x20>
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001bd6:	7d1b      	ldrb	r3, [r3, #20]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <dip_switch_state_update+0x20>
	{
		movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_00;
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <dip_switch_state_update+0xa8>)
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <dip_switch_state_update+0xac>)
 8001be0:	611a      	str	r2, [r3, #16]
		movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_00;
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <dip_switch_state_update+0xa8>)
 8001be4:	2228      	movs	r2, #40	; 0x28
 8001be6:	61da      	str	r2, [r3, #28]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001bea:	7a1b      	ldrb	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d109      	bne.n	8001c04 <dip_switch_state_update+0x3c>
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001bf2:	7d1b      	ldrb	r3, [r3, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <dip_switch_state_update+0x3c>
	{
		movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_01;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <dip_switch_state_update+0xa8>)
 8001bfa:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <dip_switch_state_update+0xb0>)
 8001bfc:	611a      	str	r2, [r3, #16]
		movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_01;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <dip_switch_state_update+0xa8>)
 8001c00:	2220      	movs	r2, #32
 8001c02:	61da      	str	r2, [r3, #28]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001c06:	7a1b      	ldrb	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <dip_switch_state_update+0x58>
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001c0e:	7d1b      	ldrb	r3, [r3, #20]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <dip_switch_state_update+0x58>
	{
		movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_10;
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <dip_switch_state_update+0xa8>)
 8001c16:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <dip_switch_state_update+0xb4>)
 8001c18:	611a      	str	r2, [r3, #16]
		movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_10;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <dip_switch_state_update+0xa8>)
 8001c1c:	222b      	movs	r2, #43	; 0x2b
 8001c1e:	61da      	str	r2, [r3, #28]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001c22:	7a1b      	ldrb	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <dip_switch_state_update+0x74>
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001c2a:	7d1b      	ldrb	r3, [r3, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <dip_switch_state_update+0x74>
	{
		movement_profile_2_exposition.max_speed_step_per_ms = MAX_SPEED_STEP_PER_MS_MODE_11;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <dip_switch_state_update+0xa8>)
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <dip_switch_state_update+0xb8>)
 8001c34:	611a      	str	r2, [r3, #16]
		movement_profile_2_exposition.acceleration_duration_ms = ACCELERATION_DURATION_MS_MODE_11;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <dip_switch_state_update+0xa8>)
 8001c38:	2234      	movs	r2, #52	; 0x34
 8001c3a:	61da      	str	r2, [r3, #28]
	}
	switch (DIP_switch.DIP_SWITCH_3_IN_signal.signal_logic_level)
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <dip_switch_state_update+0xa4>)
 8001c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <dip_switch_state_update+0x84>
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d005      	beq.n	8001c56 <dip_switch_state_update+0x8e>
	{
		motor_instance_1.DIR_pin_logic_level_inverted = 0;
		break;
	}
	}
}
 8001c4a:	e009      	b.n	8001c60 <dip_switch_state_update+0x98>
		motor_instance_1.DIR_pin_logic_level_inverted = 1;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <dip_switch_state_update+0xbc>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 8001c54:	e004      	b.n	8001c60 <dip_switch_state_update+0x98>
		motor_instance_1.DIR_pin_logic_level_inverted = 0;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <dip_switch_state_update+0xbc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 8001c5e:	bf00      	nop
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	200001b4 	.word	0x200001b4
 8001c70:	200002c4 	.word	0x200002c4
 8001c74:	41111eb8 	.word	0x41111eb8
 8001c78:	40fe0419 	.word	0x40fe0419
 8001c7c:	41201893 	.word	0x41201893
 8001c80:	416420c5 	.word	0x416420c5
 8001c84:	200000a0 	.word	0x200000a0

08001c88 <input_signals_state_update>:
/*
 * Опрашиваем состояние входных сигналов
 */

void input_signals_state_update(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	check_input_signal_state(&grid_sensor.GRID_180_DETECT_IN_signal);
 8001c8c:	480f      	ldr	r0, [pc, #60]	; (8001ccc <input_signals_state_update+0x44>)
 8001c8e:	f7ff fa9d 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&grid_sensor.GRID_120_DETECT_IN_signal);
 8001c92:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <input_signals_state_update+0x48>)
 8001c94:	f7ff fa9a 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&grid_supply_button.button_signal);
 8001c98:	480e      	ldr	r0, [pc, #56]	; (8001cd4 <input_signals_state_update+0x4c>)
 8001c9a:	f7ff fa97 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&ON_TOMO_IN_signal);
 8001c9e:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <input_signals_state_update+0x50>)
 8001ca0:	f7ff fa94 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&BUCKY_CALL_IN_signal);
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <input_signals_state_update+0x54>)
 8001ca6:	f7ff fa91 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&pushbutton_buckybrake.button_signal);
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <input_signals_state_update+0x58>)
 8001cac:	f7ff fa8e 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&motor_instance_1.limit_switch.limit_switch_IN_signal);
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <input_signals_state_update+0x5c>)
 8001cb2:	f7ff fa8b 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_1_IN_signal);
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <input_signals_state_update+0x60>)
 8001cb8:	f7ff fa88 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_2_IN_signal);
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <input_signals_state_update+0x64>)
 8001cbe:	f7ff fa85 	bl	80011cc <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_3_IN_signal);
 8001cc2:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <input_signals_state_update+0x68>)
 8001cc4:	f7ff fa82 	bl	80011cc <check_input_signal_state>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2000026c 	.word	0x2000026c
 8001cd0:	20000260 	.word	0x20000260
 8001cd4:	20000160 	.word	0x20000160
 8001cd8:	20000308 	.word	0x20000308
 8001cdc:	20000184 	.word	0x20000184
 8001ce0:	200001dc 	.word	0x200001dc
 8001ce4:	200000a0 	.word	0x200000a0
 8001ce8:	200001b4 	.word	0x200001b4
 8001cec:	200001c0 	.word	0x200001c0
 8001cf0:	200001cc 	.word	0x200001cc

08001cf4 <output_signals_state_init>:
/*
 * Выставляем одно состояние на всех выходных пинах
 */

void output_signals_state_init(SignalLogicLevel_EnumTypeDef signal_level_to_set)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, signal_level_to_set);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	461a      	mov	r2, r3
 8001d02:	2120      	movs	r1, #32
 8001d04:	481a      	ldr	r0, [pc, #104]	; (8001d70 <output_signals_state_init+0x7c>)
 8001d06:	f7ff fa45 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, signal_level_to_set);
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	4817      	ldr	r0, [pc, #92]	; (8001d70 <output_signals_state_init+0x7c>)
 8001d12:	f7ff fa3f 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, signal_level_to_set);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d1e:	4814      	ldr	r0, [pc, #80]	; (8001d70 <output_signals_state_init+0x7c>)
 8001d20:	f7ff fa38 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, signal_level_to_set);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	461a      	mov	r2, r3
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4811      	ldr	r0, [pc, #68]	; (8001d70 <output_signals_state_init+0x7c>)
 8001d2c:	f7ff fa32 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, signal_level_to_set);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	461a      	mov	r2, r3
 8001d34:	2108      	movs	r1, #8
 8001d36:	480e      	ldr	r0, [pc, #56]	; (8001d70 <output_signals_state_init+0x7c>)
 8001d38:	f7ff fa2c 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, signal_level_to_set);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2120      	movs	r1, #32
 8001d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d46:	f7ff fa25 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, signal_level_to_set);
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2108      	movs	r1, #8
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f7ff fa1e 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, signal_level_to_set);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d62:	f7ff fa17 	bl	8001194 <set_output_signal_state>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	48000400 	.word	0x48000400

08001d74 <signals_check_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым будем опрашивать состояние входных сигналов
 */
void signals_check_timer_interrupts_start(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(SIGNALS_CHECK_TIMER_POINTER);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <signals_check_timer_interrupts_start+0x10>)
 8001d7a:	f002 f859 	bl	8003e30 <HAL_TIM_Base_Start_IT>
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000278 	.word	0x20000278

08001d88 <signals_check_timer_interrupt_handler>:

/*
 * ОБработчик прерываний таймера, отвечающего за опрос входных сигналов
 */
void signals_check_timer_interrupt_handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	check_input_signals();
 8001d8c:	f7ff ff0c 	bl	8001ba8 <check_input_signals>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <buttons_state_update>:

/*
 * Обновляем состояние кнопок
 */
void buttons_state_update(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	check_and_update_button_state(&grid_supply_button, SIGNALS_CHECK_TIMER_TICKS_PER_SEC);
 8001d98:	210a      	movs	r1, #10
 8001d9a:	4804      	ldr	r0, [pc, #16]	; (8001dac <buttons_state_update+0x18>)
 8001d9c:	f7ff fa36 	bl	800120c <check_and_update_button_state>
	check_and_update_button_state(&pushbutton_buckybrake, SIGNALS_CHECK_TIMER_TICKS_PER_SEC);
 8001da0:	210a      	movs	r1, #10
 8001da2:	4803      	ldr	r0, [pc, #12]	; (8001db0 <buttons_state_update+0x1c>)
 8001da4:	f7ff fa32 	bl	800120c <check_and_update_button_state>
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000160 	.word	0x20000160
 8001db0:	200001dc 	.word	0x200001dc

08001db4 <device_error_check>:
/*
 * Проверка текущего состояния устройства на наличие ошибок
 */

void device_error_check(MotorObject_StructTypeDef* motor_object)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	/*
	 * если определён тип растра 120 и 180 одновременно
	 */
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <device_error_check+0x50>)
 8001dbe:	7a1b      	ldrb	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d109      	bne.n	8001dd8 <device_error_check+0x24>
		(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <device_error_check+0x50>)
 8001dc6:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <device_error_check+0x24>
	{
		error_code = GRID_TYPE_ERROR;									// выставляем флаг ошибки типа растра
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <device_error_check+0x54>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_STANDBY;							// переключаем устройство в режим ожидания
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <device_error_check+0x58>)
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	701a      	strb	r2, [r3, #0]
	}
	if (motor_object->limit_emergency_counter >= motor_object->emergency_step_impulses_to_limit)		// если прошагали критическое количество шагов в сторону концевика
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	429a      	cmp	r2, r3
 8001de2:	db09      	blt.n	8001df8 <device_error_check+0x44>
	{
		motor_object->limit_emergency_counter = EMERGENCY_STEP_IMPULSES_TO_LIMIT;		// удерживаем аварийный счётчик шагов от дальнейшего увеличения
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dea:	645a      	str	r2, [r3, #68]	; 0x44
		error_code = LIMIT_SWITCH_ERROR;								// выставляем ошибку концевика (решаем, что концевик неисправен)
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <device_error_check+0x54>)
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_ERROR;							// переключаем устройство в состояние ошибки
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <device_error_check+0x58>)
 8001df4:	2208      	movs	r2, #8
 8001df6:	701a      	strb	r2, [r3, #0]
	}
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	20000260 	.word	0x20000260
 8001e08:	20000304 	.word	0x20000304
 8001e0c:	20000180 	.word	0x20000180

08001e10 <device_error_handler>:

/*
 * Обработчик ошибок
 */
void device_error_handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	switch (error_code)					// если код ошибки
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <device_error_handler+0xc4>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d858      	bhi.n	8001ece <device_error_handler+0xbe>
 8001e1c:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <device_error_handler+0x14>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e39 	.word	0x08001e39
 8001e28:	08001e41 	.word	0x08001e41
 8001e2c:	08001ec1 	.word	0x08001ec1
 8001e30:	08001e89 	.word	0x08001e89
 8001e34:	08001ea1 	.word	0x08001ea1
	{
	case NO_ERROR:						// если нет ошибки
	{
		device_current_state = DEVICE_STANDBY;	// возвращаемся в состояние ожидания
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <device_error_handler+0xc8>)
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	701a      	strb	r2, [r3, #0]
		break;
 8001e3e:	e046      	b.n	8001ece <device_error_handler+0xbe>
	}
	case GRID_TYPE_ERROR:				// если ошибка типа растра
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_120_OUT_PIN
 8001e40:	2201      	movs	r2, #1
 8001e42:	2108      	movs	r1, #8
 8001e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e48:	f7ff f9a4 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_180_OUT_PIN
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2110      	movs	r1, #16
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e54:	f7ff f99e 	bl	8001194 <set_output_signal_state>

		/*
		 * если отсутствует растр типа 120 и типа 180
		 */
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <device_error_handler+0xcc>)
 8001e5a:	7a1b      	ldrb	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d131      	bne.n	8001ec4 <device_error_handler+0xb4>
				(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <device_error_handler+0xcc>)
 8001e62:	7d1b      	ldrb	r3, [r3, #20]
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d12d      	bne.n	8001ec4 <device_error_handler+0xb4>
		{
			set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_120_OUT_PIN
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f7ff f990 	bl	8001194 <set_output_signal_state>
			set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_180_OUT_PIN
 8001e74:	2200      	movs	r2, #0
 8001e76:	2110      	movs	r1, #16
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7c:	f7ff f98a 	bl	8001194 <set_output_signal_state>
			error_code = NO_ERROR;																	// выставляем флаг отсутствия ошибки
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <device_error_handler+0xc4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e86:	e01d      	b.n	8001ec4 <device_error_handler+0xb4>
	case STANDBY_MOVEMENT_ERROR:		// если ошибка движения в режиме ожидания
	{
		/*
		 * если была нажата какая-либо кнопка, выходим из состояния ошибки
		 */
		if ((grid_supply_button.button_current_state != BUTTON_RELEASED) || \
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <device_error_handler+0xd0>)
 8001e8a:	7e1b      	ldrb	r3, [r3, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d103      	bne.n	8001e98 <device_error_handler+0x88>
				(pushbutton_buckybrake.button_current_state != BUTTON_RELEASED))
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <device_error_handler+0xd4>)
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
		if ((grid_supply_button.button_current_state != BUTTON_RELEASED) || \
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d017      	beq.n	8001ec8 <device_error_handler+0xb8>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <device_error_handler+0xc4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e9e:	e013      	b.n	8001ec8 <device_error_handler+0xb8>
	case ON_TOMO_BUCKY_CALL_ERROR:		// если ошибка сигнала ON_TOMO
	{
		/*
		 * если сигнал ON_TOMO в "0", и сигнал BUCKY_CALL в "0", и мотор завершил движение
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <device_error_handler+0xd8>)
 8001ea2:	7a1b      	ldrb	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d111      	bne.n	8001ecc <device_error_handler+0xbc>
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <device_error_handler+0xdc>)
 8001eaa:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d10d      	bne.n	8001ecc <device_error_handler+0xbc>
			(motor_movement_status == MOTOR_MOVEMENT_COMPLETED))
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <device_error_handler+0xe0>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d109      	bne.n	8001ecc <device_error_handler+0xbc>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <device_error_handler+0xc4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001ebe:	e005      	b.n	8001ecc <device_error_handler+0xbc>
		break;							// остаёмся в этом состоянии до перезагрузки
 8001ec0:	bf00      	nop
 8001ec2:	e004      	b.n	8001ece <device_error_handler+0xbe>
		break;
 8001ec4:	bf00      	nop
 8001ec6:	e002      	b.n	8001ece <device_error_handler+0xbe>
		break;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <device_error_handler+0xbe>
		break;
 8001ecc:	bf00      	nop
	}
	}
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000304 	.word	0x20000304
 8001ed8:	20000180 	.word	0x20000180
 8001edc:	20000260 	.word	0x20000260
 8001ee0:	20000160 	.word	0x20000160
 8001ee4:	200001dc 	.word	0x200001dc
 8001ee8:	20000308 	.word	0x20000308
 8001eec:	20000184 	.word	0x20000184
 8001ef0:	20000099 	.word	0x20000099

08001ef4 <read_input_signals_and_set_device_state>:

/*
 * Изменяем состояние устройства в зависимости от входных сигналов
 */
void read_input_signals_and_set_device_state(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	switch (device_current_state)													// если состояние устройства
 8001ef8:	4b70      	ldr	r3, [pc, #448]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	f200 80ce 	bhi.w	800209e <read_input_signals_and_set_device_state+0x1aa>
 8001f02:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <read_input_signals_and_set_device_state+0x14>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f2d 	.word	0x08001f2d
 8001f0c:	0800209f 	.word	0x0800209f
 8001f10:	08001f63 	.word	0x08001f63
 8001f14:	0800209f 	.word	0x0800209f
 8001f18:	0800208b 	.word	0x0800208b
 8001f1c:	0800209f 	.word	0x0800209f
 8001f20:	0800209f 	.word	0x0800209f
 8001f24:	0800209f 	.word	0x0800209f
 8001f28:	08001f57 	.word	0x08001f57
	{
	case DEVICE_STARTS:																// если устройство стартует
	{
		device_current_state = DEVICE_INITIAL_MOVEMENT;
 8001f2c:	4b63      	ldr	r3, [pc, #396]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
		if (limit_switch_return_state(&motor_instance_1))
 8001f32:	4863      	ldr	r0, [pc, #396]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8001f34:	f7ff fc58 	bl	80017e8 <limit_switch_return_state>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <read_input_signals_and_set_device_state+0x52>
		{
			motor_movement_purpose = MOTOR_PURPOSE_INITIAL_MOVEMENT;			// назначение движения: возврат в начальное положение
 8001f3e:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <read_input_signals_and_set_device_state+0x1d0>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e002      	b.n	8001f4c <read_input_signals_and_set_device_state+0x58>
		}
		else
		{
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <read_input_signals_and_set_device_state+0x1d0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
		}
		motor_movement_start(&motor_instance_1, &movement_profile_1_default);
 8001f4c:	495e      	ldr	r1, [pc, #376]	; (80020c8 <read_input_signals_and_set_device_state+0x1d4>)
 8001f4e:	485c      	ldr	r0, [pc, #368]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8001f50:	f000 f92c 	bl	80021ac <motor_movement_start>
		break;
 8001f54:	e0b0      	b.n	80020b8 <read_input_signals_and_set_device_state+0x1c4>
	}
	case DEVICE_ERROR:																// если возникла ошибка
	{
		motor_movement_purpose = MOTOR_PURPOSE_INSTANT_STOP;					// останавливаем мотор
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <read_input_signals_and_set_device_state+0x1d0>)
 8001f58:	2206      	movs	r2, #6
 8001f5a:	701a      	strb	r2, [r3, #0]
		device_error_handler();														// вызываем обработчик ошибок
 8001f5c:	f7ff ff58 	bl	8001e10 <device_error_handler>
		break;
 8001f60:	e0aa      	b.n	80020b8 <read_input_signals_and_set_device_state+0x1c4>
	}
	case DEVICE_STANDBY:															// если устройство в режиме ожидания
	{
		set_grid_out_signal();
 8001f62:	f000 f8c5 	bl	80020f0 <set_grid_out_signal>
		/*
		 * если сигнал ON_TOMO не активен и сигнал ON_TOMO был активен ранее
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001f66:	4b59      	ldr	r3, [pc, #356]	; (80020cc <read_input_signals_and_set_device_state+0x1d8>)
 8001f68:	7a1b      	ldrb	r3, [r3, #8]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <read_input_signals_and_set_device_state+0x8a>
			(ON_TOMO_IN_flag != ON_TOMO_WAS_NOT_ENABLED))
 8001f6e:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <read_input_signals_and_set_device_state+0x1dc>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <read_input_signals_and_set_device_state+0x8a>
		{
			ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;								// выставляем флаг: сигнал ON_TOMO не был активен
 8001f76:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <read_input_signals_and_set_device_state+0x1dc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e084      	b.n	8002088 <read_input_signals_and_set_device_state+0x194>
		}
		/*
		 * иначе если кнопка подачи растра нажата долго и наличие/отсутствие растра определено
		 */
		else if (grid_supply_button.button_current_state == BUTTON_LONG_PRESS)
 8001f7e:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <read_input_signals_and_set_device_state+0x1e0>)
 8001f80:	7e1b      	ldrb	r3, [r3, #24]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d127      	bne.n	8001fd6 <read_input_signals_and_set_device_state+0xe2>
		{
			device_current_state = DEVICE_GRID_SUPPLY;								// выставляем состояние устройства: подача растра
 8001f86:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 8001f88:	2203      	movs	r2, #3
 8001f8a:	701a      	strb	r2, [r3, #0]

			/*
			 * если растр был извлечён и кнопка подачи растра нажата долго
			 */
			if (motor_instance_1.step_impulses_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8001f94:	dd06      	ble.n	8001fa4 <read_input_signals_and_set_device_state+0xb0>
			{
				motor_movement_purpose = MOTOR_PURPOSE_GRID_INSERTION;						// назначение движения: вставить растр
 8001f96:	4b4b      	ldr	r3, [pc, #300]	; (80020c4 <read_input_signals_and_set_device_state+0x1d0>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
				motor_movement_start(&motor_instance_1, &movement_profile_3_supply);																// начинаем движение
 8001f9c:	494e      	ldr	r1, [pc, #312]	; (80020d8 <read_input_signals_and_set_device_state+0x1e4>)
 8001f9e:	4848      	ldr	r0, [pc, #288]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8001fa0:	f000 f904 	bl	80021ac <motor_movement_start>
			}
			/*
			 * если растр был вставлен и кнопка подачи растра нажата долго
			 */
			if (motor_instance_1.step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)
 8001fa4:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8001fac:	dc7f      	bgt.n	80020ae <read_input_signals_and_set_device_state+0x1ba>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2108      	movs	r1, #8
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f7ff f8ed 	bl	8001194 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc2:	f7ff f8e7 	bl	8001194 <set_output_signal_state>
				motor_movement_purpose = MOTOR_PURPOSE_GRID_EXTRACTION;						// назначение движения: извлечь растр
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <read_input_signals_and_set_device_state+0x1d0>)
 8001fc8:	2203      	movs	r2, #3
 8001fca:	701a      	strb	r2, [r3, #0]
				motor_movement_start(&motor_instance_1, &movement_profile_3_supply);																// начинаем движение
 8001fcc:	4942      	ldr	r1, [pc, #264]	; (80020d8 <read_input_signals_and_set_device_state+0x1e4>)
 8001fce:	483c      	ldr	r0, [pc, #240]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8001fd0:	f000 f8ec 	bl	80021ac <motor_movement_start>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника

			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
		}
		break;
 8001fd4:	e06b      	b.n	80020ae <read_input_signals_and_set_device_state+0x1ba>
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <read_input_signals_and_set_device_state+0x1e8>)
 8001fd8:	7a1b      	ldrb	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d113      	bne.n	8002006 <read_input_signals_and_set_device_state+0x112>
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <read_input_signals_and_set_device_state+0x1d8>)
 8001fe0:	7a1b      	ldrb	r3, [r3, #8]
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10f      	bne.n	8002006 <read_input_signals_and_set_device_state+0x112>
				(motor_instance_1.step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES))
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001fea:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8001fee:	dc0a      	bgt.n	8002006 <read_input_signals_and_set_device_state+0x112>
			device_current_state = DEVICE_SCANING_TOMO_OFF;											// выставляем состояние устройства: экспозиция без ON_TOMO
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	701a      	strb	r2, [r3, #0]
			motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_OFF;						// назначение движения: экспозиция без ON_TOMO
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <read_input_signals_and_set_device_state+0x1d0>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	701a      	strb	r2, [r3, #0]
			motor_movement_start(&motor_instance_1, &movement_profile_2_exposition);																	// начинаем движение
 8001ffc:	4938      	ldr	r1, [pc, #224]	; (80020e0 <read_input_signals_and_set_device_state+0x1ec>)
 8001ffe:	4830      	ldr	r0, [pc, #192]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8002000:	f000 f8d4 	bl	80021ac <motor_movement_start>
 8002004:	e040      	b.n	8002088 <read_input_signals_and_set_device_state+0x194>
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <read_input_signals_and_set_device_state+0x1d8>)
 8002008:	7a1b      	ldrb	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d111      	bne.n	8002032 <read_input_signals_and_set_device_state+0x13e>
				(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <read_input_signals_and_set_device_state+0x1e8>)
 8002010:	7a1b      	ldrb	r3, [r3, #8]
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <read_input_signals_and_set_device_state+0x13e>
			ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED;
 8002016:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <read_input_signals_and_set_device_state+0x1dc>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
			device_current_state = DEVICE_SCANING_TOMO_ON;											// выставляем состояние устройства: экспозиция с ON_TOMO
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 800201e:	2206      	movs	r2, #6
 8002020:	701a      	strb	r2, [r3, #0]
			motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_ON;						// назначние движения: экспозиция с ON_TOMO
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <read_input_signals_and_set_device_state+0x1d0>)
 8002024:	2205      	movs	r2, #5
 8002026:	701a      	strb	r2, [r3, #0]
			motor_movement_start(&motor_instance_1, &movement_profile_2_exposition);																	// начинаем движение
 8002028:	492d      	ldr	r1, [pc, #180]	; (80020e0 <read_input_signals_and_set_device_state+0x1ec>)
 800202a:	4825      	ldr	r0, [pc, #148]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 800202c:	f000 f8be 	bl	80021ac <motor_movement_start>
 8002030:	e02a      	b.n	8002088 <read_input_signals_and_set_device_state+0x194>
		else if ((!(limit_switch_return_state(&motor_instance_1))) && \
 8002032:	4823      	ldr	r0, [pc, #140]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8002034:	f7ff fbd8 	bl	80017e8 <limit_switch_return_state>
 8002038:	4603      	mov	r3, r0
 800203a:	f083 0301 	eor.w	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00f      	beq.n	8002064 <read_input_signals_and_set_device_state+0x170>
				(!(motor_instance_1.step_impulses_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)))
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		else if ((!(limit_switch_return_state(&motor_instance_1))) && \
 8002048:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 800204c:	dc0a      	bgt.n	8002064 <read_input_signals_and_set_device_state+0x170>
			device_current_state = DEVICE_RETURN_TO_INITIAL_STATE;									// выставляем состояние устройства: возврат в начальное положение
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 8002050:	2207      	movs	r2, #7
 8002052:	701a      	strb	r2, [r3, #0]
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;						// назначение движения: возврат в начальное положение
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <read_input_signals_and_set_device_state+0x1d0>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
			motor_movement_start(&motor_instance_1, &movement_profile_1_default);																	// начинаем движение
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <read_input_signals_and_set_device_state+0x1d4>)
 800205c:	4818      	ldr	r0, [pc, #96]	; (80020c0 <read_input_signals_and_set_device_state+0x1cc>)
 800205e:	f000 f8a5 	bl	80021ac <motor_movement_start>
 8002062:	e011      	b.n	8002088 <read_input_signals_and_set_device_state+0x194>
		else if (pushbutton_buckybrake.button_current_state != BUTTON_RELEASED)
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <read_input_signals_and_set_device_state+0x1f0>)
 8002066:	7e1b      	ldrb	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <read_input_signals_and_set_device_state+0x1ba>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 800206e:	2204      	movs	r2, #4
 8002070:	701a      	strb	r2, [r3, #0]
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
 8002072:	2201      	movs	r2, #1
 8002074:	2101      	movs	r1, #1
 8002076:	481c      	ldr	r0, [pc, #112]	; (80020e8 <read_input_signals_and_set_device_state+0x1f4>)
 8002078:	f7ff f88c 	bl	8001194 <set_output_signal_state>
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
 800207c:	2201      	movs	r2, #1
 800207e:	2108      	movs	r1, #8
 8002080:	4819      	ldr	r0, [pc, #100]	; (80020e8 <read_input_signals_and_set_device_state+0x1f4>)
 8002082:	f7ff f887 	bl	8001194 <set_output_signal_state>
		break;
 8002086:	e012      	b.n	80020ae <read_input_signals_and_set_device_state+0x1ba>
 8002088:	e011      	b.n	80020ae <read_input_signals_and_set_device_state+0x1ba>
	case DEVICE_BUCKYBRAKE:																			// если устройство в состоянии "отпустить тормоз кассетоприёмника"
	{
		/*
		 *	если кнопка тормоза кассетоприёмника отпущена
		 */
		if (pushbutton_buckybrake.button_current_state == BUTTON_RELEASED)
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <read_input_signals_and_set_device_state+0x1f0>)
 800208c:	7e1b      	ldrb	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10f      	bne.n	80020b2 <read_input_signals_and_set_device_state+0x1be>
		{
			buckybreak_laser_disable();
 8002092:	f000 f867 	bl	8002164 <buckybreak_laser_disable>
			device_current_state = DEVICE_STANDBY;													// выставляем состояние устройства: режим ожидания
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 8002098:	2202      	movs	r2, #2
 800209a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800209c:	e009      	b.n	80020b2 <read_input_signals_and_set_device_state+0x1be>

	}
	*/
	default:
	{
		if (motor_movement_status == MOTOR_MOVEMENT_COMPLETED)			// если статус мотора "движение завершено"
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <read_input_signals_and_set_device_state+0x1f8>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <read_input_signals_and_set_device_state+0x1c2>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <read_input_signals_and_set_device_state+0x1c8>)
 80020a8:	2202      	movs	r2, #2
 80020aa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020ac:	e003      	b.n	80020b6 <read_input_signals_and_set_device_state+0x1c2>
		break;
 80020ae:	bf00      	nop
 80020b0:	e002      	b.n	80020b8 <read_input_signals_and_set_device_state+0x1c4>
		break;
 80020b2:	bf00      	nop
 80020b4:	e000      	b.n	80020b8 <read_input_signals_and_set_device_state+0x1c4>
		break;
 80020b6:	bf00      	nop
	}
	}
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000180 	.word	0x20000180
 80020c0:	200000a0 	.word	0x200000a0
 80020c4:	20000190 	.word	0x20000190
 80020c8:	20000194 	.word	0x20000194
 80020cc:	20000308 	.word	0x20000308
 80020d0:	200001d8 	.word	0x200001d8
 80020d4:	20000160 	.word	0x20000160
 80020d8:	200002e4 	.word	0x200002e4
 80020dc:	20000184 	.word	0x20000184
 80020e0:	200002c4 	.word	0x200002c4
 80020e4:	200001dc 	.word	0x200001dc
 80020e8:	48000400 	.word	0x48000400
 80020ec:	20000099 	.word	0x20000099

080020f0 <set_grid_out_signal>:

void set_grid_out_signal(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	/*
	 * если растр не представлен
	 */
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <set_grid_out_signal+0x70>)
 80020f6:	7a1b      	ldrb	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <set_grid_out_signal+0x2c>
			(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <set_grid_out_signal+0x70>)
 80020fe:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <set_grid_out_signal+0x2c>
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8002104:	2200      	movs	r2, #0
 8002106:	2108      	movs	r1, #8
 8002108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210c:	f7ff f842 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8002110:	2200      	movs	r2, #0
 8002112:	2110      	movs	r1, #16
 8002114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002118:	f7ff f83c 	bl	8001194 <set_output_signal_state>
	}
	/*
	* если тип растра 120
	*/
	if (grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <set_grid_out_signal+0x70>)
 800211e:	7a1b      	ldrb	r3, [r3, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10b      	bne.n	800213c <set_grid_out_signal+0x4c>
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_120
 8002124:	2201      	movs	r2, #1
 8002126:	2108      	movs	r1, #8
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f7ff f832 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8002130:	2200      	movs	r2, #0
 8002132:	2110      	movs	r1, #16
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f7ff f82c 	bl	8001194 <set_output_signal_state>
	}
	/*
	* если тип растра 180
	*/
	if (grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <set_grid_out_signal+0x70>)
 800213e:	7d1b      	ldrb	r3, [r3, #20]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10b      	bne.n	800215c <set_grid_out_signal+0x6c>
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8002144:	2200      	movs	r2, #0
 8002146:	2108      	movs	r1, #8
 8002148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214c:	f7ff f822 	bl	8001194 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_180
 8002150:	2201      	movs	r2, #1
 8002152:	2110      	movs	r1, #16
 8002154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002158:	f7ff f81c 	bl	8001194 <set_output_signal_state>
	}
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000260 	.word	0x20000260

08002164 <buckybreak_laser_disable>:

void buckybreak_laser_disable(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_LOW);	// выставляем в "0" выходной сигнал LASER_CENTERING
 8002168:	2200      	movs	r2, #0
 800216a:	2101      	movs	r1, #1
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <buckybreak_laser_disable+0x1c>)
 800216e:	f7ff f811 	bl	8001194 <set_output_signal_state>
	set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_LOW);
 8002172:	2200      	movs	r2, #0
 8002174:	2108      	movs	r1, #8
 8002176:	4802      	ldr	r0, [pc, #8]	; (8002180 <buckybreak_laser_disable+0x1c>)
 8002178:	f7ff f80c 	bl	8001194 <set_output_signal_state>
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	48000400 	.word	0x48000400

08002184 <motor_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_start(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(MOTOR_TIMER_POINTER);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <motor_timer_interrupts_start+0x10>)
 800218a:	f001 fe51 	bl	8003e30 <HAL_TIM_Base_Start_IT>
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000114 	.word	0x20000114

08002198 <motor_timer_interrupts_stop>:

/*
 * Останавливаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_stop(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(MOTOR_TIMER_POINTER);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <motor_timer_interrupts_stop+0x10>)
 800219e:	f001 feb1 	bl	8003f04 <HAL_TIM_Base_Stop_IT>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000114 	.word	0x20000114

080021ac <motor_movement_start>:

/*
 * Начинаем движение мотора
 */
void motor_movement_start(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
	if (device_current_state == DEVICE_STANDBY)							// если устройство в режиме ожидания
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <motor_movement_start+0x50>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d106      	bne.n	80021cc <motor_movement_start+0x20>
	{
		device_current_state = DEVICE_ERROR;
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <motor_movement_start+0x50>)
 80021c0:	2208      	movs	r2, #8
 80021c2:	701a      	strb	r2, [r3, #0]
		error_code = STANDBY_MOVEMENT_ERROR;							// выставляем ошибку (нельзя двигаться в режиме ожидания)
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <motor_movement_start+0x54>)
 80021c6:	2203      	movs	r2, #3
 80021c8:	701a      	strb	r2, [r3, #0]
		}
		motor_movement_init(motor_object, movement_profile);
		motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;					// выставляем флаг, что мотор находится в движении
		motor_timer_interrupts_start();
	}						// запускаем прерывания, по которым мотор будет шагать
}
 80021ca:	e012      	b.n	80021f2 <motor_movement_start+0x46>
		if ((motor_movement_purpose == MOTOR_PURPOSE_EXPOSITION_TOMO_OFF) || (motor_movement_purpose == MOTOR_PURPOSE_EXPOSITION_TOMO_ON))
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <motor_movement_start+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d003      	beq.n	80021dc <motor_movement_start+0x30>
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <motor_movement_start+0x58>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d101      	bne.n	80021e0 <motor_movement_start+0x34>
			dip_switch_state_update();
 80021dc:	f7ff fcf4 	bl	8001bc8 <dip_switch_state_update>
		motor_movement_init(motor_object, movement_profile);
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff f87e 	bl	80012e4 <motor_movement_init>
		motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;					// выставляем флаг, что мотор находится в движении
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <motor_movement_start+0x5c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
		motor_timer_interrupts_start();
 80021ee:	f7ff ffc9 	bl	8002184 <motor_timer_interrupts_start>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000180 	.word	0x20000180
 8002200:	20000304 	.word	0x20000304
 8002204:	20000190 	.word	0x20000190
 8002208:	20000099 	.word	0x20000099

0800220c <motor_movement_complete>:

/*
 * Прекращаем движение мотора
 */
void motor_movement_complete(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	motor_timer_interrupts_stop();										// останавливаем прерывания, по которым шагает мотор
 8002210:	f7ff ffc2 	bl	8002198 <motor_timer_interrupts_stop>
	motor_movement_status = MOTOR_MOVEMENT_COMPLETED;					// выставляем флаг, что движение завершено
 8002214:	4b02      	ldr	r3, [pc, #8]	; (8002220 <motor_movement_complete+0x14>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000099 	.word	0x20000099

08002224 <bucky_ready_delay_set>:

/*
 * Начинаем отсчёт шагов до выставления сигнала BUCKY_READY
 */
void bucky_ready_delay_set(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	if (bucky_ready_delay_counter != BUCKY_READY_DELAY_STEP_IMPULSES)
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <bucky_ready_delay_set+0x30>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d00f      	beq.n	8002250 <bucky_ready_delay_set+0x2c>
	{
		bucky_ready_delay_counter++;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <bucky_ready_delay_set+0x30>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <bucky_ready_delay_set+0x30>)
 800223a:	701a      	strb	r2, [r3, #0]
		if (bucky_ready_delay_counter == BUCKY_READY_DELAY_STEP_IMPULSES)
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <bucky_ready_delay_set+0x30>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d105      	bne.n	8002250 <bucky_ready_delay_set+0x2c>
		{
			set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_HIGH);
 8002244:	2201      	movs	r2, #1
 8002246:	2120      	movs	r1, #32
 8002248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224c:	f7fe ffa2 	bl	8001194 <set_output_signal_state>
		}
	}
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000110 	.word	0x20000110

08002258 <bucky_ready_dsable>:

void bucky_ready_dsable(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	bucky_ready_delay_counter = 0;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <bucky_ready_dsable+0x1c>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
	set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
 8002262:	2200      	movs	r2, #0
 8002264:	2120      	movs	r1, #32
 8002266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226a:	f7fe ff93 	bl	8001194 <set_output_signal_state>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000110 	.word	0x20000110

08002278 <motor_check_conditions_and_step>:

void motor_check_conditions_and_step(MotorObject_StructTypeDef* motor_object, MotorMovementProfile_StructTypeDef* movement_profile)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	switch (motor_movement_purpose)												// если назначение движения мотора
 8002282:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <motor_check_conditions_and_step+0x174>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b06      	cmp	r3, #6
 8002288:	f200 80ac 	bhi.w	80023e4 <motor_check_conditions_and_step+0x16c>
 800228c:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <motor_check_conditions_and_step+0x1c>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080023b7 	.word	0x080023b7
 8002298:	080022b7 	.word	0x080022b7
 800229c:	080022d7 	.word	0x080022d7
 80022a0:	08002307 	.word	0x08002307
 80022a4:	0800232b 	.word	0x0800232b
 80022a8:	0800234d 	.word	0x0800234d
 80022ac:	080022b1 	.word	0x080022b1
	{
	case MOTOR_PURPOSE_INSTANT_STOP:													// если назначение движения мотора - мгновенная остановка
	{
		motor_movement_complete();														// завершаем движение
 80022b0:	f7ff ffac 	bl	800220c <motor_movement_complete>
		break;
 80022b4:	e096      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
	}
	case MOTOR_PURPOSE_INITIAL_MOVEMENT:
	{
		if (motor_object->step_impulses_distance_from_limit_switch < FAR_DISTANCE_STEP_IMPULSES)				// если мы не дошли до крайнего положения
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f240 7221 	movw	r2, #1825	; 0x721
 80022be:	4293      	cmp	r3, r2
 80022c0:	dc05      	bgt.n	80022ce <motor_check_conditions_and_step+0x56>
		{
			motor_check_counter_and_make_step_to_direction(&motor_instance_1,  &movement_profile_1_default, MOVE_TO_COORD_END);							// движемся от начальной точки (наружу)
 80022c2:	2201      	movs	r2, #1
 80022c4:	494a      	ldr	r1, [pc, #296]	; (80023f0 <motor_check_conditions_and_step+0x178>)
 80022c6:	484b      	ldr	r0, [pc, #300]	; (80023f4 <motor_check_conditions_and_step+0x17c>)
 80022c8:	f7ff f8d7 	bl	800147a <motor_check_counter_and_make_step_to_direction>
		}
		else
		{
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;
		}
		break;
 80022cc:	e08a      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <motor_check_conditions_and_step+0x174>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
		break;
 80022d4:	e086      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
	}
	case MOTOR_PURPOSE_GRID_INSERTION:													// если назначение движения мотора - вставить растр
	{
		if (!(limit_switch_return_state(&motor_instance_1)))												// если концевик не активен
 80022d6:	4847      	ldr	r0, [pc, #284]	; (80023f4 <motor_check_conditions_and_step+0x17c>)
 80022d8:	f7ff fa86 	bl	80017e8 <limit_switch_return_state>
 80022dc:	4603      	mov	r3, r0
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <motor_check_conditions_and_step+0x7c>
		{
			motor_check_counter_and_make_step_to_direction(&motor_instance_1,  &movement_profile_3_supply, MOVE_TO_COORD_ORIGIN);							// двигаемся к начальной точке
 80022e8:	2200      	movs	r2, #0
 80022ea:	4943      	ldr	r1, [pc, #268]	; (80023f8 <motor_check_conditions_and_step+0x180>)
 80022ec:	4841      	ldr	r0, [pc, #260]	; (80023f4 <motor_check_conditions_and_step+0x17c>)
 80022ee:	f7ff f8c4 	bl	800147a <motor_check_counter_and_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 80022f2:	e072      	b.n	80023da <motor_check_conditions_and_step+0x162>
			set_grid_out_signal();
 80022f4:	f7ff fefc 	bl	80020f0 <set_grid_out_signal>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <motor_check_conditions_and_step+0x184>)
 80022fa:	7e1b      	ldrb	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d16c      	bne.n	80023da <motor_check_conditions_and_step+0x162>
				motor_movement_complete();												// завершаем движение
 8002300:	f7ff ff84 	bl	800220c <motor_movement_complete>
		break;
 8002304:	e069      	b.n	80023da <motor_check_conditions_and_step+0x162>
	}
	case MOTOR_PURPOSE_GRID_EXTRACTION:													// если назначение движения мотора - извлечь растр
	{
		if (motor_object->step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)		// если мы не дошли до крайнего положения
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 800230e:	dc05      	bgt.n	800231c <motor_check_conditions_and_step+0xa4>
		{
			motor_check_counter_and_make_step_to_direction(&motor_instance_1,  &movement_profile_3_supply, MOVE_TO_COORD_END);							// движемся от начальной точки (наружу)
 8002310:	2201      	movs	r2, #1
 8002312:	4939      	ldr	r1, [pc, #228]	; (80023f8 <motor_check_conditions_and_step+0x180>)
 8002314:	4837      	ldr	r0, [pc, #220]	; (80023f4 <motor_check_conditions_and_step+0x17c>)
 8002316:	f7ff f8b0 	bl	800147a <motor_check_counter_and_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 800231a:	e060      	b.n	80023de <motor_check_conditions_and_step+0x166>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <motor_check_conditions_and_step+0x184>)
 800231e:	7e1b      	ldrb	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d15c      	bne.n	80023de <motor_check_conditions_and_step+0x166>
				motor_movement_complete();												// завершаем движение
 8002324:	f7ff ff72 	bl	800220c <motor_movement_complete>
		break;
 8002328:	e059      	b.n	80023de <motor_check_conditions_and_step+0x166>
	}
	case MOTOR_PURPOSE_EXPOSITION_TOMO_OFF:												// если назначение движения - экспозиция без сигнала ON_TOMO
	{
		if (BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)					// если сигнал BUCKY_CALL в "1"
 800232a:	4b35      	ldr	r3, [pc, #212]	; (8002400 <motor_check_conditions_and_step+0x188>)
 800232c:	7a1b      	ldrb	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <motor_check_conditions_and_step+0xc8>
		{
			cyclic_movement_step(&motor_instance_1, &movement_profile_2_exposition);														// делаем шаг
 8002332:	4934      	ldr	r1, [pc, #208]	; (8002404 <motor_check_conditions_and_step+0x18c>)
 8002334:	482f      	ldr	r0, [pc, #188]	; (80023f4 <motor_check_conditions_and_step+0x17c>)
 8002336:	f7ff f833 	bl	80013a0 <cyclic_movement_step>
			bucky_ready_delay_set();
 800233a:	f7ff ff73 	bl	8002224 <bucky_ready_delay_set>
		else
		{
			bucky_ready_dsable();								// иначе выключаем сигнал BUCKY_READY
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;				// выставляем назначение движения - двигаться в начальное положение
		}
		break;
 800233e:	e051      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
			bucky_ready_dsable();								// иначе выключаем сигнал BUCKY_READY
 8002340:	f7ff ff8a 	bl	8002258 <bucky_ready_dsable>
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;				// выставляем назначение движения - двигаться в начальное положение
 8002344:	4b29      	ldr	r3, [pc, #164]	; (80023ec <motor_check_conditions_and_step+0x174>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
		break;
 800234a:	e04b      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
	}
	case MOTOR_PURPOSE_EXPOSITION_TOMO_ON:												// если назначение движения - экспозиция с сигналом ON_TOMO
	{
		if (BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)
 800234c:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <motor_check_conditions_and_step+0x188>)
 800234e:	7a1b      	ldrb	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d126      	bne.n	80023a2 <motor_check_conditions_and_step+0x12a>
		{
			cyclic_movement_step(&motor_instance_1, &movement_profile_2_exposition);
 8002354:	492b      	ldr	r1, [pc, #172]	; (8002404 <motor_check_conditions_and_step+0x18c>)
 8002356:	4827      	ldr	r0, [pc, #156]	; (80023f4 <motor_check_conditions_and_step+0x17c>)
 8002358:	f7ff f822 	bl	80013a0 <cyclic_movement_step>

			if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <motor_check_conditions_and_step+0x190>)
 800235e:	7a1b      	ldrb	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d10c      	bne.n	800237e <motor_check_conditions_and_step+0x106>
					(ON_TOMO_IN_flag != ON_TOMO_WAS_ENABLED_AND_DISABLED))				// если сигнал ON_TOMO в "0"
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <motor_check_conditions_and_step+0x194>)
 8002366:	781b      	ldrb	r3, [r3, #0]
			if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8002368:	2b02      	cmp	r3, #2
 800236a:	d008      	beq.n	800237e <motor_check_conditions_and_step+0x106>
			{
				ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED_AND_DISABLED;						// выставляем флаг, что ON_TOMO был в "1", а затем в "0"
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <motor_check_conditions_and_step+0x194>)
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
				set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_HIGH);
 8002372:	2201      	movs	r2, #1
 8002374:	2120      	movs	r1, #32
 8002376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237a:	f7fe ff0b 	bl	8001194 <set_output_signal_state>
			}
			// если сигнал ON_TOMO был включён и выключен, и сигнал ON_TOMO включён
			if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED))
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <motor_check_conditions_and_step+0x190>)
 8002380:	7a1b      	ldrb	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d12d      	bne.n	80023e2 <motor_check_conditions_and_step+0x16a>
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <motor_check_conditions_and_step+0x194>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d129      	bne.n	80023e2 <motor_check_conditions_and_step+0x16a>
			{
				ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <motor_check_conditions_and_step+0x194>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
				set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
 8002394:	2200      	movs	r2, #0
 8002396:	2120      	movs	r1, #32
 8002398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239c:	f7fe fefa 	bl	8001194 <set_output_signal_state>
		else
		{
			set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;				// выставляем назначение движения - двигаться в начальное положение
		}
		break;
 80023a0:	e01f      	b.n	80023e2 <motor_check_conditions_and_step+0x16a>
			set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2120      	movs	r1, #32
 80023a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023aa:	f7fe fef3 	bl	8001194 <set_output_signal_state>
			motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;				// выставляем назначение движения - двигаться в начальное положение
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <motor_check_conditions_and_step+0x174>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
		break;
 80023b4:	e015      	b.n	80023e2 <motor_check_conditions_and_step+0x16a>

	}
	case MOTOR_PURPOSE_TAKE_INITIAL_POSITION:											// если назначение движения - вернуться в начальную позицию
	{
		if(!(limit_switch_return_state(&motor_instance_1)))								// если концевик не активен
 80023b6:	480f      	ldr	r0, [pc, #60]	; (80023f4 <motor_check_conditions_and_step+0x17c>)
 80023b8:	f7ff fa16 	bl	80017e8 <limit_switch_return_state>
 80023bc:	4603      	mov	r3, r0
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <motor_check_conditions_and_step+0x15c>
		{
			motor_check_counter_and_make_step_to_direction(&motor_instance_1,  &movement_profile_1_default, MOVE_TO_COORD_ORIGIN);		// делаем шаг в направлении начального положения
 80023c8:	2200      	movs	r2, #0
 80023ca:	4909      	ldr	r1, [pc, #36]	; (80023f0 <motor_check_conditions_and_step+0x178>)
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <motor_check_conditions_and_step+0x17c>)
 80023ce:	f7ff f854 	bl	800147a <motor_check_counter_and_make_step_to_direction>
		}
		else
		{
			motor_movement_complete();													// иначе завершаем движение
		}
		break;
 80023d2:	e007      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
			motor_movement_complete();													// иначе завершаем движение
 80023d4:	f7ff ff1a 	bl	800220c <motor_movement_complete>
		break;
 80023d8:	e004      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
		break;
 80023da:	bf00      	nop
 80023dc:	e002      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
		break;
 80023de:	bf00      	nop
 80023e0:	e000      	b.n	80023e4 <motor_check_conditions_and_step+0x16c>
		break;
 80023e2:	bf00      	nop
	}
	}
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000190 	.word	0x20000190
 80023f0:	20000194 	.word	0x20000194
 80023f4:	200000a0 	.word	0x200000a0
 80023f8:	200002e4 	.word	0x200002e4
 80023fc:	20000160 	.word	0x20000160
 8002400:	20000184 	.word	0x20000184
 8002404:	200002c4 	.word	0x200002c4
 8002408:	20000308 	.word	0x20000308
 800240c:	200001d8 	.word	0x200001d8

08002410 <motor_timer_interrupt_handler>:

/*
 * Обработчик прерываний таймера, отвечающего за шаги мотора
 */
void motor_timer_interrupt_handler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	motor_check_conditions_and_step(&motor_instance_1,  &movement_profile_2_exposition);
 8002414:	4902      	ldr	r1, [pc, #8]	; (8002420 <motor_timer_interrupt_handler+0x10>)
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <motor_timer_interrupt_handler+0x14>)
 8002418:	f7ff ff2e 	bl	8002278 <motor_check_conditions_and_step>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200002c4 	.word	0x200002c4
 8002424:	200000a0 	.word	0x200000a0

08002428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800242a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800242c:	480d      	ldr	r0, [pc, #52]	; (8002464 <LoopForever+0x6>)
  ldr r1, =_edata
 800242e:	490e      	ldr	r1, [pc, #56]	; (8002468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002430:	4a0e      	ldr	r2, [pc, #56]	; (800246c <LoopForever+0xe>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002434:	e002      	b.n	800243c <LoopCopyDataInit>

08002436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243a:	3304      	adds	r3, #4

0800243c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800243c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002440:	d3f9      	bcc.n	8002436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002442:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002444:	4c0b      	ldr	r4, [pc, #44]	; (8002474 <LoopForever+0x16>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002448:	e001      	b.n	800244e <LoopFillZerobss>

0800244a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800244c:	3204      	adds	r2, #4

0800244e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002450:	d3fb      	bcc.n	800244a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002452:	f7fe fe89 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002456:	f002 fa01 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800245a:	f7fe fbb9 	bl	8000bd0 <main>

0800245e <LoopForever>:

LoopForever:
    b LoopForever
 800245e:	e7fe      	b.n	800245e <LoopForever>
  ldr   r0, =_estack
 8002460:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002468:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800246c:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8002470:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002474:	20000318 	.word	0x20000318

08002478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002478:	e7fe      	b.n	8002478 <ADC1_2_IRQHandler>

0800247a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002484:	2003      	movs	r0, #3
 8002486:	f000 f939 	bl	80026fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800248a:	2000      	movs	r0, #0
 800248c:	f000 f80e 	bl	80024ac <HAL_InitTick>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	e001      	b.n	80024a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800249c:	f7fe fd76 	bl	8000f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024a0:	79fb      	ldrb	r3, [r7, #7]

}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_InitTick+0x68>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d022      	beq.n	8002506 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_InitTick+0x6c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_InitTick+0x68>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f944 	bl	8002762 <HAL_SYSTICK_Config>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10f      	bne.n	8002500 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	d809      	bhi.n	80024fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e6:	2200      	movs	r2, #0
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	f04f 30ff 	mov.w	r0, #4294967295
 80024ee:	f000 f910 	bl	8002712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_InitTick+0x70>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e007      	b.n	800250a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e004      	b.n	800250a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e001      	b.n	800250a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000008 	.word	0x20000008
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_IncTick+0x1c>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_IncTick+0x20>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4413      	add	r3, r2
 800252e:	4a03      	ldr	r2, [pc, #12]	; (800253c <HAL_IncTick+0x1c>)
 8002530:	6013      	str	r3, [r2, #0]
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20000314 	.word	0x20000314
 8002540:	20000008 	.word	0x20000008

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000314 	.word	0x20000314

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4907      	ldr	r1, [pc, #28]	; (80025f8 <__NVIC_EnableIRQ+0x38>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c8:	d301      	bcc.n	80026ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00f      	b.n	80026ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <SysTick_Config+0x40>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d6:	210f      	movs	r1, #15
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	f7ff ff8e 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <SysTick_Config+0x40>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <SysTick_Config+0x40>)
 80026e8:	2207      	movs	r2, #7
 80026ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	e000e010 	.word	0xe000e010

080026fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff29 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff40 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff90 	bl	8002650 <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5f 	bl	80025fc <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff33 	bl	80025c0 <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa4 	bl	80026b8 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e147      	b.n	8002a1e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fc16 	bl	8000fd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0210 	bic.w	r2, r2, #16
 80027b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b8:	f7ff fec4 	bl	8002544 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80027be:	e012      	b.n	80027e6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80027c0:	f7ff fec0 	bl	8002544 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b0a      	cmp	r3, #10
 80027cc:	d90b      	bls.n	80027e6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e11b      	b.n	8002a1e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d0e5      	beq.n	80027c0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002804:	f7ff fe9e 	bl	8002544 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800280a:	e012      	b.n	8002832 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800280c:	f7ff fe9a 	bl	8002544 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b0a      	cmp	r3, #10
 8002818:	d90b      	bls.n	8002832 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2203      	movs	r2, #3
 800282a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0f5      	b.n	8002a1e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0e5      	beq.n	800280c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0202 	orr.w	r2, r2, #2
 800284e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a74      	ldr	r2, [pc, #464]	; (8002a28 <HAL_FDCAN_Init+0x2ac>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d103      	bne.n	8002862 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800285a:	4a74      	ldr	r2, [pc, #464]	; (8002a2c <HAL_FDCAN_Init+0x2b0>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7c1b      	ldrb	r3, [r3, #16]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d108      	bne.n	800287c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002878:	619a      	str	r2, [r3, #24]
 800287a:	e007      	b.n	800288c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7c5b      	ldrb	r3, [r3, #17]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d108      	bne.n	80028a6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a2:	619a      	str	r2, [r3, #24]
 80028a4:	e007      	b.n	80028b6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7c9b      	ldrb	r3, [r3, #18]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028cc:	619a      	str	r2, [r3, #24]
 80028ce:	e007      	b.n	80028e0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028de:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002904:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0210 	bic.w	r2, r2, #16
 8002914:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d108      	bne.n	8002930 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0204 	orr.w	r2, r2, #4
 800292c:	619a      	str	r2, [r3, #24]
 800292e:	e02c      	b.n	800298a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d028      	beq.n	800298a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d01c      	beq.n	800297a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800294e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0210 	orr.w	r2, r2, #16
 800295e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d110      	bne.n	800298a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	619a      	str	r2, [r3, #24]
 8002978:	e007      	b.n	800298a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0220 	orr.w	r2, r2, #32
 8002988:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	3b01      	subs	r3, #1
 8002990:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	3b01      	subs	r3, #1
 8002998:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800299a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029a2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80029b2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029b4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029be:	d115      	bne.n	80029ec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	3b01      	subs	r3, #1
 80029cc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80029ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	3b01      	subs	r3, #1
 80029d6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80029d8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	3b01      	subs	r3, #1
 80029e2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80029e8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80029ea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f814 	bl	8002a30 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40006400 	.word	0x40006400
 8002a2c:	40006500 	.word	0x40006500

08002a30 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002a3a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	041a      	lsls	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a70:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	061a      	lsls	r2, r3, #24
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e005      	b.n	8002abe <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3304      	adds	r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d3f3      	bcc.n	8002ab2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	4000a400 	.word	0x4000a400

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aea:	e15a      	b.n	8002da2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 814c 	beq.w	8002d9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d00b      	beq.n	8002b24 <HAL_GPIO_Init+0x48>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d007      	beq.n	8002b24 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b18:	2b11      	cmp	r3, #17
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b12      	cmp	r3, #18
 8002b22:	d130      	bne.n	8002b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f003 0201 	and.w	r2, r3, #1
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	2203      	movs	r2, #3
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0xea>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b12      	cmp	r3, #18
 8002bc4:	d123      	bne.n	8002c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	6939      	ldr	r1, [r7, #16]
 8002c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80a6 	beq.w	8002d9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c50:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	4a5a      	ldr	r2, [pc, #360]	; (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c5c:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c68:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c92:	d01f      	beq.n	8002cd4 <HAL_GPIO_Init+0x1f8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <HAL_GPIO_Init+0x2ec>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d019      	beq.n	8002cd0 <HAL_GPIO_Init+0x1f4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a4b      	ldr	r2, [pc, #300]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <HAL_GPIO_Init+0x1f0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a4a      	ldr	r2, [pc, #296]	; (8002dd0 <HAL_GPIO_Init+0x2f4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00d      	beq.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a49      	ldr	r2, [pc, #292]	; (8002dd4 <HAL_GPIO_Init+0x2f8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d007      	beq.n	8002cc4 <HAL_GPIO_Init+0x1e8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a48      	ldr	r2, [pc, #288]	; (8002dd8 <HAL_GPIO_Init+0x2fc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_GPIO_Init+0x1e4>
 8002cbc:	2305      	movs	r3, #5
 8002cbe:	e00a      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cc0:	2306      	movs	r3, #6
 8002cc2:	e008      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e006      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e004      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e002      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	f002 0203 	and.w	r2, r2, #3
 8002cdc:	0092      	lsls	r2, r2, #2
 8002cde:	4093      	lsls	r3, r2
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce6:	4937      	ldr	r1, [pc, #220]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d42:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f ae9d 	bne.w	8002aec <HAL_GPIO_Init+0x10>
  }
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	48000400 	.word	0x48000400
 8002dcc:	48000800 	.word	0x48000800
 8002dd0:	48000c00 	.word	0x48000c00
 8002dd4:	48001000 	.word	0x48001000
 8002dd8:	48001400 	.word	0x48001400
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d141      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5a:	d131      	bne.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e5c:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e62:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e74:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e7c:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2232      	movs	r2, #50	; 0x32
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	0c9b      	lsrs	r3, r3, #18
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e92:	e002      	b.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9a:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d102      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f2      	bne.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eae:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eba:	d158      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e057      	b.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec6:	4a2d      	ldr	r2, [pc, #180]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ed0:	e04d      	b.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed8:	d141      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee6:	d131      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee8:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eee:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef8:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2232      	movs	r2, #50	; 0x32
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	0c9b      	lsrs	r3, r3, #18
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1e:	e002      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d102      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f2      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f46:	d112      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e011      	b.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f5c:	e007      	b.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f66:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	20000000 	.word	0x20000000
 8002f84:	431bde83 	.word	0x431bde83

08002f88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f96:	6093      	str	r3, [r2, #8]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40007000 	.word	0x40007000

08002fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e308      	b.n	80035cc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d075      	beq.n	80030b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc6:	4ba3      	ldr	r3, [pc, #652]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd0:	4ba0      	ldr	r3, [pc, #640]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d102      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x3e>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d002      	beq.n	8002fec <HAL_RCC_OscConfig+0x44>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d10b      	bne.n	8003004 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	4b99      	ldr	r3, [pc, #612]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d05b      	beq.n	80030b0 <HAL_RCC_OscConfig+0x108>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d157      	bne.n	80030b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e2e3      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d106      	bne.n	800301c <HAL_RCC_OscConfig+0x74>
 800300e:	4b91      	ldr	r3, [pc, #580]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a90      	ldr	r2, [pc, #576]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0xb0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x98>
 8003026:	4b8b      	ldr	r3, [pc, #556]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a8a      	ldr	r2, [pc, #552]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a87      	ldr	r2, [pc, #540]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0xb0>
 8003040:	4b84      	ldr	r3, [pc, #528]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a83      	ldr	r2, [pc, #524]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b81      	ldr	r3, [pc, #516]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a80      	ldr	r2, [pc, #512]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff fa70 	bl	8002544 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7ff fa6c 	bl	8002544 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e2a8      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307a:	4b76      	ldr	r3, [pc, #472]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0xc0>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7ff fa5c 	bl	8002544 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7ff fa58 	bl	8002544 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e294      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030a2:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0xe8>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030be:	4b65      	ldr	r3, [pc, #404]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c8:	4b62      	ldr	r3, [pc, #392]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d102      	bne.n	80030de <HAL_RCC_OscConfig+0x136>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_OscConfig+0x13c>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d11f      	bne.n	8003124 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e4:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x154>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e267      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fc:	4b55      	ldr	r3, [pc, #340]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	4952      	ldr	r1, [pc, #328]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003110:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCC_OscConfig+0x2b0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f9c9 	bl	80024ac <HAL_InitTick>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d043      	beq.n	80031a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e253      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d023      	beq.n	8003174 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b49      	ldr	r3, [pc, #292]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a48      	ldr	r2, [pc, #288]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7ff fa04 	bl	8002544 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003140:	f7ff fa00 	bl	8002544 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e23c      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003152:	4b40      	ldr	r3, [pc, #256]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	4939      	ldr	r1, [pc, #228]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
 8003172:	e01a      	b.n	80031aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003174:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a36      	ldr	r2, [pc, #216]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7ff f9e0 	bl	8002544 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003188:	f7ff f9dc 	bl	8002544 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e218      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1e0>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03c      	beq.n	8003230 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031be:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c4:	4a23      	ldr	r2, [pc, #140]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7ff f9b9 	bl	8002544 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7ff f9b5 	bl	8002544 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1f1      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ef      	beq.n	80031d6 <HAL_RCC_OscConfig+0x22e>
 80031f6:	e01b      	b.n	8003230 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7ff f99c 	bl	8002544 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003210:	f7ff f998 	bl	8002544 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1d4      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ef      	bne.n	8003210 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80ab 	beq.w	8003394 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0x2b4>
 800324e:	2301      	movs	r3, #1
 8003250:	e005      	b.n	800325e <HAL_RCC_OscConfig+0x2b6>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	20000004 	.word	0x20000004
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4baf      	ldr	r3, [pc, #700]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	4aae      	ldr	r2, [pc, #696]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
 800326e:	4bac      	ldr	r3, [pc, #688]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327e:	4ba9      	ldr	r3, [pc, #676]	; (8003524 <HAL_RCC_OscConfig+0x57c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328a:	4ba6      	ldr	r3, [pc, #664]	; (8003524 <HAL_RCC_OscConfig+0x57c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4aa5      	ldr	r2, [pc, #660]	; (8003524 <HAL_RCC_OscConfig+0x57c>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7ff f955 	bl	8002544 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7ff f951 	bl	8002544 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e18d      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b0:	4b9c      	ldr	r3, [pc, #624]	; (8003524 <HAL_RCC_OscConfig+0x57c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d108      	bne.n	80032d6 <HAL_RCC_OscConfig+0x32e>
 80032c4:	4b96      	ldr	r3, [pc, #600]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	4a95      	ldr	r2, [pc, #596]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d4:	e024      	b.n	8003320 <HAL_RCC_OscConfig+0x378>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d110      	bne.n	8003300 <HAL_RCC_OscConfig+0x358>
 80032de:	4b90      	ldr	r3, [pc, #576]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	4a8e      	ldr	r2, [pc, #568]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ee:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	4a8a      	ldr	r2, [pc, #552]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fe:	e00f      	b.n	8003320 <HAL_RCC_OscConfig+0x378>
 8003300:	4b87      	ldr	r3, [pc, #540]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003306:	4a86      	ldr	r2, [pc, #536]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003310:	4b83      	ldr	r3, [pc, #524]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	4a82      	ldr	r2, [pc, #520]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d016      	beq.n	8003356 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7ff f90c 	bl	8002544 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7ff f908 	bl	8002544 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e142      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003346:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ed      	beq.n	8003330 <HAL_RCC_OscConfig+0x388>
 8003354:	e015      	b.n	8003382 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003356:	f7ff f8f5 	bl	8002544 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7ff f8f1 	bl	8002544 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	; 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e12b      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003374:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ed      	bne.n	800335e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	4a64      	ldr	r2, [pc, #400]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 800338e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03c      	beq.n	800341a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033a8:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80033aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ae:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7ff f8c4 	bl	8002544 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c0:	f7ff f8c0 	bl	8002544 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0fc      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033d2:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80033d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ef      	beq.n	80033c0 <HAL_RCC_OscConfig+0x418>
 80033e0:	e01b      	b.n	800341a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033e2:	4b4f      	ldr	r3, [pc, #316]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80033e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e8:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7ff f8a7 	bl	8002544 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033fa:	f7ff f8a3 	bl	8002544 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e0df      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800340c:	4b44      	ldr	r3, [pc, #272]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 800340e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ef      	bne.n	80033fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80d3 	beq.w	80035ca <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003424:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b0c      	cmp	r3, #12
 800342e:	f000 808d 	beq.w	800354c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d15a      	bne.n	80034f0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b39      	ldr	r3, [pc, #228]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a38      	ldr	r2, [pc, #224]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7ff f87d 	bl	8002544 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344e:	f7ff f879 	bl	8002544 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0b5      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f0      	bne.n	800344e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346c:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_RCC_OscConfig+0x580>)
 8003472:	4013      	ands	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6a11      	ldr	r1, [r2, #32]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347c:	3a01      	subs	r2, #1
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	4311      	orrs	r1, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003486:	0212      	lsls	r2, r2, #8
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800348e:	0852      	lsrs	r2, r2, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	0552      	lsls	r2, r2, #21
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800349a:	0852      	lsrs	r2, r2, #1
 800349c:	3a01      	subs	r2, #1
 800349e:	0652      	lsls	r2, r2, #25
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034a6:	06d2      	lsls	r2, r2, #27
 80034a8:	430a      	orrs	r2, r1
 80034aa:	491d      	ldr	r1, [pc, #116]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034bc:	4b18      	ldr	r3, [pc, #96]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7ff f83c 	bl	8002544 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7ff f838 	bl	8002544 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e074      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x528>
 80034ee:	e06c      	b.n	80035ca <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_RCC_OscConfig+0x578>)
 800350e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7ff f814 	bl	8002544 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351e:	e00e      	b.n	800353e <HAL_RCC_OscConfig+0x596>
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352c:	f7ff f80a 	bl	8002544 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e046      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_RCC_OscConfig+0x62c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x584>
 800354a:	e03e      	b.n	80035ca <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e039      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <HAL_RCC_OscConfig+0x62c>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	429a      	cmp	r2, r3
 800356a:	d12c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	3b01      	subs	r3, #1
 8003578:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d123      	bne.n	80035c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d11b      	bne.n	80035c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d113      	bne.n	80035c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e11e      	b.n	800382e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b91      	ldr	r3, [pc, #580]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d910      	bls.n	8003620 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b8e      	ldr	r3, [pc, #568]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 020f 	bic.w	r2, r3, #15
 8003606:	498c      	ldr	r1, [pc, #560]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b8a      	ldr	r3, [pc, #552]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e106      	b.n	800382e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d073      	beq.n	8003714 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d129      	bne.n	8003688 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003634:	4b81      	ldr	r3, [pc, #516]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0f4      	b.n	800382e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003644:	f000 f966 	bl	8003914 <RCC_GetSysClockFreqFromPLLSource>
 8003648:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4a7c      	ldr	r2, [pc, #496]	; (8003840 <HAL_RCC_ClockConfig+0x268>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d93f      	bls.n	80036d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003652:	4b7a      	ldr	r3, [pc, #488]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d033      	beq.n	80036d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800366e:	2b00      	cmp	r3, #0
 8003670:	d12f      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003672:	4b72      	ldr	r3, [pc, #456]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367a:	4a70      	ldr	r2, [pc, #448]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 800367c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003680:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e024      	b.n	80036d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0c6      	b.n	800382e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a0:	4b66      	ldr	r3, [pc, #408]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0be      	b.n	800382e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036b0:	f000 f8ce 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4a61      	ldr	r2, [pc, #388]	; (8003840 <HAL_RCC_ClockConfig+0x268>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d909      	bls.n	80036d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036be:	4b5f      	ldr	r3, [pc, #380]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c6:	4a5d      	ldr	r2, [pc, #372]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80036c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b5a      	ldr	r3, [pc, #360]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4957      	ldr	r1, [pc, #348]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fe ff2e 	bl	8002544 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fe ff2a 	bl	8002544 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e095      	b.n	800382e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b4e      	ldr	r3, [pc, #312]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d023      	beq.n	8003768 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800372c:	4b43      	ldr	r3, [pc, #268]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a42      	ldr	r2, [pc, #264]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003736:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003744:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800374c:	4a3b      	ldr	r2, [pc, #236]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 800374e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003752:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4936      	ldr	r1, [pc, #216]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
 8003766:	e008      	b.n	800377a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b80      	cmp	r3, #128	; 0x80
 800376c:	d105      	bne.n	800377a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4a32      	ldr	r2, [pc, #200]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003778:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d21d      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 020f 	bic.w	r2, r3, #15
 8003790:	4929      	ldr	r1, [pc, #164]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003798:	f7fe fed4 	bl	8002544 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fe fed0 	bl	8002544 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e03b      	b.n	800382e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1ed      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4917      	ldr	r1, [pc, #92]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490f      	ldr	r1, [pc, #60]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003802:	f000 f825 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8003806:	4601      	mov	r1, r0
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <HAL_RCC_ClockConfig+0x26c>)
 8003814:	5cd3      	ldrb	r3, [r2, r3]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	fa21 f303 	lsr.w	r3, r1, r3
 800381e:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x270>)
 8003820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x274>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fe40 	bl	80024ac <HAL_InitTick>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40022000 	.word	0x40022000
 800383c:	40021000 	.word	0x40021000
 8003840:	04c4b400 	.word	0x04c4b400
 8003844:	08005980 	.word	0x08005980
 8003848:	20000000 	.word	0x20000000
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003856:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d102      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	e047      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003868:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d102      	bne.n	800387a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	e03e      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d136      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3301      	adds	r3, #1
 800389c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d10c      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038a4:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	4a16      	ldr	r2, [pc, #88]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ae:	68d2      	ldr	r2, [r2, #12]
 80038b0:	0a12      	lsrs	r2, r2, #8
 80038b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	617b      	str	r3, [r7, #20]
      break;
 80038bc:	e00c      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	0a12      	lsrs	r2, r2, #8
 80038cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038d0:	fb02 f303 	mul.w	r3, r2, r3
 80038d4:	617b      	str	r3, [r7, #20]
      break;
 80038d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0e5b      	lsrs	r3, r3, #25
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	3301      	adds	r3, #1
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	e001      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038f8:	693b      	ldr	r3, [r7, #16]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	00f42400 	.word	0x00f42400
 8003910:	01e84800 	.word	0x01e84800

08003914 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3301      	adds	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d10c      	bne.n	8003952 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003938:	4a17      	ldr	r2, [pc, #92]	; (8003998 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	4a14      	ldr	r2, [pc, #80]	; (8003994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003942:	68d2      	ldr	r2, [r2, #12]
 8003944:	0a12      	lsrs	r2, r2, #8
 8003946:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	617b      	str	r3, [r7, #20]
    break;
 8003950:	e00c      	b.n	800396c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	0a12      	lsrs	r2, r2, #8
 8003960:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
    break;
 800396a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	0e5b      	lsrs	r3, r3, #25
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	3301      	adds	r3, #1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003986:	687b      	ldr	r3, [r7, #4]
}
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40021000 	.word	0x40021000
 8003998:	01e84800 	.word	0x01e84800
 800399c:	00f42400 	.word	0x00f42400

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039a8:	2300      	movs	r3, #0
 80039aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ac:	2300      	movs	r3, #0
 80039ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8098 	beq.w	8003aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c2:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4a3f      	ldr	r2, [pc, #252]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6593      	str	r3, [r2, #88]	; 0x58
 80039da:	4b3d      	ldr	r3, [pc, #244]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ea:	4b3a      	ldr	r3, [pc, #232]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a39      	ldr	r2, [pc, #228]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039f6:	f7fe fda5 	bl	8002544 <HAL_GetTick>
 80039fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039fc:	e009      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fe:	f7fe fda1 	bl	8002544 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d902      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a10:	e005      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a12:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ef      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d159      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a24:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01e      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d019      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a4c:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d016      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fe fd61 	bl	8002544 <HAL_GetTick>
 8003a82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a84:	e00b      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe fd5d 	bl	8002544 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d902      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a9c:	e006      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ec      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	4903      	ldr	r1, [pc, #12]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ac8:	e008      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	74bb      	strb	r3, [r7, #18]
 8003ace:	e005      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003adc:	7c7b      	ldrb	r3, [r7, #17]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae2:	4ba6      	ldr	r3, [pc, #664]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	4aa5      	ldr	r2, [pc, #660]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003afa:	4ba0      	ldr	r3, [pc, #640]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f023 0203 	bic.w	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	499c      	ldr	r1, [pc, #624]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b1c:	4b97      	ldr	r3, [pc, #604]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 020c 	bic.w	r2, r3, #12
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4994      	ldr	r1, [pc, #592]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b3e:	4b8f      	ldr	r3, [pc, #572]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	498b      	ldr	r1, [pc, #556]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b60:	4b86      	ldr	r3, [pc, #536]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	4983      	ldr	r1, [pc, #524]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b82:	4b7e      	ldr	r3, [pc, #504]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	497a      	ldr	r1, [pc, #488]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ba4:	4b75      	ldr	r3, [pc, #468]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	4972      	ldr	r1, [pc, #456]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	4969      	ldr	r1, [pc, #420]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003be8:	4b64      	ldr	r3, [pc, #400]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4961      	ldr	r1, [pc, #388]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c0a:	4b5c      	ldr	r3, [pc, #368]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	4958      	ldr	r1, [pc, #352]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c2c:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	4950      	ldr	r1, [pc, #320]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c4c:	4b4b      	ldr	r3, [pc, #300]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a4a      	ldr	r2, [pc, #296]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d015      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c64:	4b45      	ldr	r3, [pc, #276]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	4942      	ldr	r1, [pc, #264]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c82:	d105      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c84:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a3c      	ldr	r2, [pc, #240]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d015      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c9c:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	4934      	ldr	r1, [pc, #208]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cbc:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd4:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	4926      	ldr	r1, [pc, #152]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cfe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d015      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	4918      	ldr	r1, [pc, #96]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d015      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d44:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	490a      	ldr	r1, [pc, #40]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d62:	d105      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d70:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000

08003d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e049      	b.n	8003e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd f958 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 fb52 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e04a      	b.n	8003ede <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a21      	ldr	r2, [pc, #132]	; (8003eec <HAL_TIM_Base_Start_IT+0xbc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d018      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x6c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d013      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x6c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x6c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x6c>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x6c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a19      	ldr	r2, [pc, #100]	; (8003efc <HAL_TIM_Base_Start_IT+0xcc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d115      	bne.n	8003ec8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d015      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0xaa>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d011      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	e008      	b.n	8003eda <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e000      	b.n	8003edc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40013400 	.word	0x40013400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	00010007 	.word	0x00010007

08003f04 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a1a      	ldr	r2, [r3, #32]
 8003f22:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <HAL_TIM_Base_Stop_IT+0x48>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	f244 4344 	movw	r3, #17476	; 0x4444
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_TIM_Base_Stop_IT+0x48>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d122      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d11b      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f06f 0202 	mvn.w	r2, #2
 8003f8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fa41 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8003faa:	e005      	b.n	8003fb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fa33 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa44 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d122      	bne.n	8004012 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d11b      	bne.n	8004012 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f06f 0204 	mvn.w	r2, #4
 8003fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fa17 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8003ffe:	e005      	b.n	800400c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa09 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa1a 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b08      	cmp	r3, #8
 800401e:	d122      	bne.n	8004066 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b08      	cmp	r3, #8
 800402c:	d11b      	bne.n	8004066 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f06f 0208 	mvn.w	r2, #8
 8004036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2204      	movs	r2, #4
 800403c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f9ed 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8004052:	e005      	b.n	8004060 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f9df 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9f0 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b10      	cmp	r3, #16
 8004072:	d122      	bne.n	80040ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b10      	cmp	r3, #16
 8004080:	d11b      	bne.n	80040ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f06f 0210 	mvn.w	r2, #16
 800408a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2208      	movs	r2, #8
 8004090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f9c3 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 80040a6:	e005      	b.n	80040b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f9b5 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f9c6 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10e      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0201 	mvn.w	r2, #1
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f98f 	bl	8004404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b80      	cmp	r3, #128	; 0x80
 80040f2:	d10e      	bne.n	8004112 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	2b80      	cmp	r3, #128	; 0x80
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fb63 	bl	80047d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fb56 	bl	80047ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d10e      	bne.n	800416c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d107      	bne.n	800416c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f974 	bl	8004454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b20      	cmp	r3, #32
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0220 	mvn.w	r2, #32
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fb16 	bl	80047c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a6:	d10f      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fb1c 	bl	8004800 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d6:	d10f      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fb0e 	bl	8004814 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004206:	d10f      	bne.n	8004228 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fb00 	bl	8004828 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004232:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004236:	d10f      	bne.n	8004258 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 faf2 	bl	800483c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_TIM_ConfigClockSource+0x18>
 8004274:	2302      	movs	r3, #2
 8004276:	e0b9      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x18c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004296:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800429a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b70      	cmp	r3, #112	; 0x70
 80042b2:	d02e      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0xb2>
 80042b4:	2b70      	cmp	r3, #112	; 0x70
 80042b6:	d812      	bhi.n	80042de <HAL_TIM_ConfigClockSource+0x7e>
 80042b8:	2b30      	cmp	r3, #48	; 0x30
 80042ba:	f000 8084 	beq.w	80043c6 <HAL_TIM_ConfigClockSource+0x166>
 80042be:	2b30      	cmp	r3, #48	; 0x30
 80042c0:	d806      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x70>
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d07f      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x166>
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d07d      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x166>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d07b      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042ce:	e084      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80042d0:	2b50      	cmp	r3, #80	; 0x50
 80042d2:	d048      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x106>
 80042d4:	2b60      	cmp	r3, #96	; 0x60
 80042d6:	d056      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x126>
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d064      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x146>
      break;
 80042dc:	e07d      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80042de:	4a45      	ldr	r2, [pc, #276]	; (80043f4 <HAL_TIM_ConfigClockSource+0x194>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d070      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x166>
 80042e4:	4a43      	ldr	r2, [pc, #268]	; (80043f4 <HAL_TIM_ConfigClockSource+0x194>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d809      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0x9e>
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ee:	d027      	beq.n	8004340 <HAL_TIM_ConfigClockSource+0xe0>
 80042f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042f4:	d067      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x166>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d06d      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042fc:	e06d      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80042fe:	4a3e      	ldr	r2, [pc, #248]	; (80043f8 <HAL_TIM_ConfigClockSource+0x198>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d060      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x166>
 8004304:	4a3d      	ldr	r2, [pc, #244]	; (80043fc <HAL_TIM_ConfigClockSource+0x19c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d05d      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x166>
 800430a:	4a3d      	ldr	r2, [pc, #244]	; (8004400 <HAL_TIM_ConfigClockSource+0x1a0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d05a      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8004310:	e063      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6899      	ldr	r1, [r3, #8]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f000 f9ad 	bl	8004680 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004334:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	609a      	str	r2, [r3, #8]
      break;
 800433e:	e04c      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6899      	ldr	r1, [r3, #8]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f000 f996 	bl	8004680 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004362:	609a      	str	r2, [r3, #8]
      break;
 8004364:	e039      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	461a      	mov	r2, r3
 8004374:	f000 f908 	bl	8004588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2150      	movs	r1, #80	; 0x50
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f961 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004384:	e029      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	461a      	mov	r2, r3
 8004394:	f000 f927 	bl	80045e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2160      	movs	r1, #96	; 0x60
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f951 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 80043a4:	e019      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 f8e8 	bl	8004588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2140      	movs	r1, #64	; 0x40
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f941 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 80043c4:	e009      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f000 f938 	bl	8004646 <TIM_ITRx_SetConfig>
        break;
 80043d6:	e000      	b.n	80043da <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80043d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	00100020 	.word	0x00100020
 80043f8:	00100040 	.word	0x00100040
 80043fc:	00100070 	.word	0x00100070
 8004400:	00100030 	.word	0x00100030

08004404 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3c      	ldr	r2, [pc, #240]	; (800456c <TIM_Base_SetConfig+0x104>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00f      	beq.n	80044a0 <TIM_Base_SetConfig+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d00b      	beq.n	80044a0 <TIM_Base_SetConfig+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a39      	ldr	r2, [pc, #228]	; (8004570 <TIM_Base_SetConfig+0x108>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <TIM_Base_SetConfig+0x38>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a38      	ldr	r2, [pc, #224]	; (8004574 <TIM_Base_SetConfig+0x10c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_Base_SetConfig+0x38>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a37      	ldr	r2, [pc, #220]	; (8004578 <TIM_Base_SetConfig+0x110>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d108      	bne.n	80044b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2d      	ldr	r2, [pc, #180]	; (800456c <TIM_Base_SetConfig+0x104>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01b      	beq.n	80044f2 <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d017      	beq.n	80044f2 <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2a      	ldr	r2, [pc, #168]	; (8004570 <TIM_Base_SetConfig+0x108>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a29      	ldr	r2, [pc, #164]	; (8004574 <TIM_Base_SetConfig+0x10c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00f      	beq.n	80044f2 <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a28      	ldr	r2, [pc, #160]	; (8004578 <TIM_Base_SetConfig+0x110>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_Base_SetConfig+0x8a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a27      	ldr	r2, [pc, #156]	; (800457c <TIM_Base_SetConfig+0x114>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <TIM_Base_SetConfig+0x8a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a26      	ldr	r2, [pc, #152]	; (8004580 <TIM_Base_SetConfig+0x118>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_Base_SetConfig+0x8a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a25      	ldr	r2, [pc, #148]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d108      	bne.n	8004504 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <TIM_Base_SetConfig+0x104>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00f      	beq.n	8004550 <TIM_Base_SetConfig+0xe8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a11      	ldr	r2, [pc, #68]	; (8004578 <TIM_Base_SetConfig+0x110>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00b      	beq.n	8004550 <TIM_Base_SetConfig+0xe8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a10      	ldr	r2, [pc, #64]	; (800457c <TIM_Base_SetConfig+0x114>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0xe8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <TIM_Base_SetConfig+0x118>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0xe8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d103      	bne.n	8004558 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	615a      	str	r2, [r3, #20]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40013400 	.word	0x40013400
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800

08004588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0201 	bic.w	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 030a 	bic.w	r3, r3, #10
 80045c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0210 	bic.w	r2, r3, #16
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	031b      	lsls	r3, r3, #12
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	f043 0307 	orr.w	r3, r3, #7
 800466c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800469a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e065      	b.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d108      	bne.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004712:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004728:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d018      	beq.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d013      	beq.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00e      	beq.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d009      	beq.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d004      	beq.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d10c      	bne.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800477e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	4313      	orrs	r3, r2
 8004788:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40013400 	.word	0x40013400
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40014000 	.word	0x40014000

080047c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <__errno>:
 8004850:	4b01      	ldr	r3, [pc, #4]	; (8004858 <__errno+0x8>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	2000000c 	.word	0x2000000c

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4e0d      	ldr	r6, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1ba4      	subs	r4, r4, r6
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2500      	movs	r5, #0
 8004868:	42a5      	cmp	r5, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4e0b      	ldr	r6, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f001 f878 	bl	8005964 <_init>
 8004874:	1ba4      	subs	r4, r4, r6
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2500      	movs	r5, #0
 800487a:	42a5      	cmp	r5, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004884:	4798      	blx	r3
 8004886:	3501      	adds	r5, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800488e:	4798      	blx	r3
 8004890:	3501      	adds	r5, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	080059d8 	.word	0x080059d8
 8004898:	080059d8 	.word	0x080059d8
 800489c:	080059d8 	.word	0x080059d8
 80048a0:	080059dc 	.word	0x080059dc

080048a4 <memset>:
 80048a4:	4402      	add	r2, r0
 80048a6:	4603      	mov	r3, r0
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d100      	bne.n	80048ae <memset+0xa>
 80048ac:	4770      	bx	lr
 80048ae:	f803 1b01 	strb.w	r1, [r3], #1
 80048b2:	e7f9      	b.n	80048a8 <memset+0x4>

080048b4 <pow>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	ed2d 8b04 	vpush	{d8-d9}
 80048bc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004b90 <pow+0x2dc>
 80048c0:	b08d      	sub	sp, #52	; 0x34
 80048c2:	ec57 6b10 	vmov	r6, r7, d0
 80048c6:	ec55 4b11 	vmov	r4, r5, d1
 80048ca:	f000 f965 	bl	8004b98 <__ieee754_pow>
 80048ce:	f999 3000 	ldrsb.w	r3, [r9]
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	eeb0 8a40 	vmov.f32	s16, s0
 80048da:	eef0 8a60 	vmov.f32	s17, s1
 80048de:	46c8      	mov	r8, r9
 80048e0:	d05f      	beq.n	80049a2 <pow+0xee>
 80048e2:	4622      	mov	r2, r4
 80048e4:	462b      	mov	r3, r5
 80048e6:	4620      	mov	r0, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7fc f8eb 	bl	8000ac4 <__aeabi_dcmpun>
 80048ee:	4683      	mov	fp, r0
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d156      	bne.n	80049a2 <pow+0xee>
 80048f4:	4632      	mov	r2, r6
 80048f6:	463b      	mov	r3, r7
 80048f8:	4630      	mov	r0, r6
 80048fa:	4639      	mov	r1, r7
 80048fc:	f7fc f8e2 	bl	8000ac4 <__aeabi_dcmpun>
 8004900:	9001      	str	r0, [sp, #4]
 8004902:	b1e8      	cbz	r0, 8004940 <pow+0x8c>
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	4620      	mov	r0, r4
 800490a:	4629      	mov	r1, r5
 800490c:	f7fc f8a8 	bl	8000a60 <__aeabi_dcmpeq>
 8004910:	2800      	cmp	r0, #0
 8004912:	d046      	beq.n	80049a2 <pow+0xee>
 8004914:	2301      	movs	r3, #1
 8004916:	9302      	str	r3, [sp, #8]
 8004918:	4b96      	ldr	r3, [pc, #600]	; (8004b74 <pow+0x2c0>)
 800491a:	9303      	str	r3, [sp, #12]
 800491c:	4b96      	ldr	r3, [pc, #600]	; (8004b78 <pow+0x2c4>)
 800491e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004922:	2200      	movs	r2, #0
 8004924:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004928:	9b00      	ldr	r3, [sp, #0]
 800492a:	2b02      	cmp	r3, #2
 800492c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004930:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004934:	d033      	beq.n	800499e <pow+0xea>
 8004936:	a802      	add	r0, sp, #8
 8004938:	f000 fefd 	bl	8005736 <matherr>
 800493c:	bb48      	cbnz	r0, 8004992 <pow+0xde>
 800493e:	e05d      	b.n	80049fc <pow+0x148>
 8004940:	f04f 0a00 	mov.w	sl, #0
 8004944:	f04f 0b00 	mov.w	fp, #0
 8004948:	4652      	mov	r2, sl
 800494a:	465b      	mov	r3, fp
 800494c:	4630      	mov	r0, r6
 800494e:	4639      	mov	r1, r7
 8004950:	f7fc f886 	bl	8000a60 <__aeabi_dcmpeq>
 8004954:	ec4b ab19 	vmov	d9, sl, fp
 8004958:	2800      	cmp	r0, #0
 800495a:	d054      	beq.n	8004a06 <pow+0x152>
 800495c:	4652      	mov	r2, sl
 800495e:	465b      	mov	r3, fp
 8004960:	4620      	mov	r0, r4
 8004962:	4629      	mov	r1, r5
 8004964:	f7fc f87c 	bl	8000a60 <__aeabi_dcmpeq>
 8004968:	4680      	mov	r8, r0
 800496a:	b318      	cbz	r0, 80049b4 <pow+0x100>
 800496c:	2301      	movs	r3, #1
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	4b80      	ldr	r3, [pc, #512]	; (8004b74 <pow+0x2c0>)
 8004972:	9303      	str	r3, [sp, #12]
 8004974:	9b01      	ldr	r3, [sp, #4]
 8004976:	930a      	str	r3, [sp, #40]	; 0x28
 8004978:	9b00      	ldr	r3, [sp, #0]
 800497a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800497e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004982:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0d5      	beq.n	8004936 <pow+0x82>
 800498a:	4b7b      	ldr	r3, [pc, #492]	; (8004b78 <pow+0x2c4>)
 800498c:	2200      	movs	r2, #0
 800498e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004994:	b11b      	cbz	r3, 800499e <pow+0xea>
 8004996:	f7ff ff5b 	bl	8004850 <__errno>
 800499a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800499c:	6003      	str	r3, [r0, #0]
 800499e:	ed9d 8b08 	vldr	d8, [sp, #32]
 80049a2:	eeb0 0a48 	vmov.f32	s0, s16
 80049a6:	eef0 0a68 	vmov.f32	s1, s17
 80049aa:	b00d      	add	sp, #52	; 0x34
 80049ac:	ecbd 8b04 	vpop	{d8-d9}
 80049b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b4:	ec45 4b10 	vmov	d0, r4, r5
 80049b8:	f000 feb5 	bl	8005726 <finite>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d0f0      	beq.n	80049a2 <pow+0xee>
 80049c0:	4652      	mov	r2, sl
 80049c2:	465b      	mov	r3, fp
 80049c4:	4620      	mov	r0, r4
 80049c6:	4629      	mov	r1, r5
 80049c8:	f7fc f854 	bl	8000a74 <__aeabi_dcmplt>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d0e8      	beq.n	80049a2 <pow+0xee>
 80049d0:	2301      	movs	r3, #1
 80049d2:	9302      	str	r3, [sp, #8]
 80049d4:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <pow+0x2c0>)
 80049d6:	9303      	str	r3, [sp, #12]
 80049d8:	f999 3000 	ldrsb.w	r3, [r9]
 80049dc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80049e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80049e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80049e8:	b913      	cbnz	r3, 80049f0 <pow+0x13c>
 80049ea:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80049ee:	e7a2      	b.n	8004936 <pow+0x82>
 80049f0:	4962      	ldr	r1, [pc, #392]	; (8004b7c <pow+0x2c8>)
 80049f2:	2000      	movs	r0, #0
 80049f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d19c      	bne.n	8004936 <pow+0x82>
 80049fc:	f7ff ff28 	bl	8004850 <__errno>
 8004a00:	2321      	movs	r3, #33	; 0x21
 8004a02:	6003      	str	r3, [r0, #0]
 8004a04:	e7c5      	b.n	8004992 <pow+0xde>
 8004a06:	eeb0 0a48 	vmov.f32	s0, s16
 8004a0a:	eef0 0a68 	vmov.f32	s1, s17
 8004a0e:	f000 fe8a 	bl	8005726 <finite>
 8004a12:	9000      	str	r0, [sp, #0]
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 8081 	bne.w	8004b1c <pow+0x268>
 8004a1a:	ec47 6b10 	vmov	d0, r6, r7
 8004a1e:	f000 fe82 	bl	8005726 <finite>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d07a      	beq.n	8004b1c <pow+0x268>
 8004a26:	ec45 4b10 	vmov	d0, r4, r5
 8004a2a:	f000 fe7c 	bl	8005726 <finite>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d074      	beq.n	8004b1c <pow+0x268>
 8004a32:	ec53 2b18 	vmov	r2, r3, d8
 8004a36:	ee18 0a10 	vmov	r0, s16
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7fc f842 	bl	8000ac4 <__aeabi_dcmpun>
 8004a40:	f999 9000 	ldrsb.w	r9, [r9]
 8004a44:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <pow+0x2c0>)
 8004a46:	b1b0      	cbz	r0, 8004a76 <pow+0x1c2>
 8004a48:	2201      	movs	r2, #1
 8004a4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a4e:	9b00      	ldr	r3, [sp, #0]
 8004a50:	930a      	str	r3, [sp, #40]	; 0x28
 8004a52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004a5a:	f1b9 0f00 	cmp.w	r9, #0
 8004a5e:	d0c4      	beq.n	80049ea <pow+0x136>
 8004a60:	4652      	mov	r2, sl
 8004a62:	465b      	mov	r3, fp
 8004a64:	4650      	mov	r0, sl
 8004a66:	4659      	mov	r1, fp
 8004a68:	f7fb febc 	bl	80007e4 <__aeabi_ddiv>
 8004a6c:	f1b9 0f02 	cmp.w	r9, #2
 8004a70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a74:	e7c1      	b.n	80049fa <pow+0x146>
 8004a76:	2203      	movs	r2, #3
 8004a78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a7c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a7e:	4629      	mov	r1, r5
 8004a80:	4620      	mov	r0, r4
 8004a82:	2200      	movs	r2, #0
 8004a84:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <pow+0x2cc>)
 8004a86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004a8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a8e:	f7fb fd7f 	bl	8000590 <__aeabi_dmul>
 8004a92:	4604      	mov	r4, r0
 8004a94:	460d      	mov	r5, r1
 8004a96:	f1b9 0f00 	cmp.w	r9, #0
 8004a9a:	d124      	bne.n	8004ae6 <pow+0x232>
 8004a9c:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <pow+0x2d0>)
 8004a9e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004aa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	4652      	mov	r2, sl
 8004aaa:	465b      	mov	r3, fp
 8004aac:	4639      	mov	r1, r7
 8004aae:	f7fb ffe1 	bl	8000a74 <__aeabi_dcmplt>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d056      	beq.n	8004b64 <pow+0x2b0>
 8004ab6:	ec45 4b10 	vmov	d0, r4, r5
 8004aba:	f000 fe49 	bl	8005750 <rint>
 8004abe:	4622      	mov	r2, r4
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	ec51 0b10 	vmov	r0, r1, d0
 8004ac6:	f7fb ffcb 	bl	8000a60 <__aeabi_dcmpeq>
 8004aca:	b920      	cbnz	r0, 8004ad6 <pow+0x222>
 8004acc:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <pow+0x2d4>)
 8004ace:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004ad2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ad6:	f998 3000 	ldrsb.w	r3, [r8]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d142      	bne.n	8004b64 <pow+0x2b0>
 8004ade:	f7ff feb7 	bl	8004850 <__errno>
 8004ae2:	2322      	movs	r3, #34	; 0x22
 8004ae4:	e78d      	b.n	8004a02 <pow+0x14e>
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <pow+0x2d8>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004aee:	4630      	mov	r0, r6
 8004af0:	4652      	mov	r2, sl
 8004af2:	465b      	mov	r3, fp
 8004af4:	4639      	mov	r1, r7
 8004af6:	f7fb ffbd 	bl	8000a74 <__aeabi_dcmplt>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d0eb      	beq.n	8004ad6 <pow+0x222>
 8004afe:	ec45 4b10 	vmov	d0, r4, r5
 8004b02:	f000 fe25 	bl	8005750 <rint>
 8004b06:	4622      	mov	r2, r4
 8004b08:	462b      	mov	r3, r5
 8004b0a:	ec51 0b10 	vmov	r0, r1, d0
 8004b0e:	f7fb ffa7 	bl	8000a60 <__aeabi_dcmpeq>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d1df      	bne.n	8004ad6 <pow+0x222>
 8004b16:	2200      	movs	r2, #0
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <pow+0x2c8>)
 8004b1a:	e7da      	b.n	8004ad2 <pow+0x21e>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2300      	movs	r3, #0
 8004b20:	ec51 0b18 	vmov	r0, r1, d8
 8004b24:	f7fb ff9c 	bl	8000a60 <__aeabi_dcmpeq>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	f43f af3a 	beq.w	80049a2 <pow+0xee>
 8004b2e:	ec47 6b10 	vmov	d0, r6, r7
 8004b32:	f000 fdf8 	bl	8005726 <finite>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	f43f af33 	beq.w	80049a2 <pow+0xee>
 8004b3c:	ec45 4b10 	vmov	d0, r4, r5
 8004b40:	f000 fdf1 	bl	8005726 <finite>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	f43f af2c 	beq.w	80049a2 <pow+0xee>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	9302      	str	r3, [sp, #8]
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <pow+0x2c0>)
 8004b50:	9303      	str	r3, [sp, #12]
 8004b52:	2300      	movs	r3, #0
 8004b54:	930a      	str	r3, [sp, #40]	; 0x28
 8004b56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004b5e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004b62:	e7b8      	b.n	8004ad6 <pow+0x222>
 8004b64:	a802      	add	r0, sp, #8
 8004b66:	f000 fde6 	bl	8005736 <matherr>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	f47f af11 	bne.w	8004992 <pow+0xde>
 8004b70:	e7b5      	b.n	8004ade <pow+0x22a>
 8004b72:	bf00      	nop
 8004b74:	08005990 	.word	0x08005990
 8004b78:	3ff00000 	.word	0x3ff00000
 8004b7c:	fff00000 	.word	0xfff00000
 8004b80:	3fe00000 	.word	0x3fe00000
 8004b84:	47efffff 	.word	0x47efffff
 8004b88:	c7efffff 	.word	0xc7efffff
 8004b8c:	7ff00000 	.word	0x7ff00000
 8004b90:	20000070 	.word	0x20000070
 8004b94:	00000000 	.word	0x00000000

08004b98 <__ieee754_pow>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	b091      	sub	sp, #68	; 0x44
 8004b9e:	ed8d 1b00 	vstr	d1, [sp]
 8004ba2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004ba6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004baa:	ea58 0302 	orrs.w	r3, r8, r2
 8004bae:	ec57 6b10 	vmov	r6, r7, d0
 8004bb2:	f000 84be 	beq.w	8005532 <__ieee754_pow+0x99a>
 8004bb6:	4b7a      	ldr	r3, [pc, #488]	; (8004da0 <__ieee754_pow+0x208>)
 8004bb8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004bbc:	429c      	cmp	r4, r3
 8004bbe:	463d      	mov	r5, r7
 8004bc0:	ee10 aa10 	vmov	sl, s0
 8004bc4:	dc09      	bgt.n	8004bda <__ieee754_pow+0x42>
 8004bc6:	d103      	bne.n	8004bd0 <__ieee754_pow+0x38>
 8004bc8:	b93e      	cbnz	r6, 8004bda <__ieee754_pow+0x42>
 8004bca:	45a0      	cmp	r8, r4
 8004bcc:	dc0d      	bgt.n	8004bea <__ieee754_pow+0x52>
 8004bce:	e001      	b.n	8004bd4 <__ieee754_pow+0x3c>
 8004bd0:	4598      	cmp	r8, r3
 8004bd2:	dc02      	bgt.n	8004bda <__ieee754_pow+0x42>
 8004bd4:	4598      	cmp	r8, r3
 8004bd6:	d10e      	bne.n	8004bf6 <__ieee754_pow+0x5e>
 8004bd8:	b16a      	cbz	r2, 8004bf6 <__ieee754_pow+0x5e>
 8004bda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004bde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004be2:	ea54 030a 	orrs.w	r3, r4, sl
 8004be6:	f000 84a4 	beq.w	8005532 <__ieee754_pow+0x99a>
 8004bea:	486e      	ldr	r0, [pc, #440]	; (8004da4 <__ieee754_pow+0x20c>)
 8004bec:	b011      	add	sp, #68	; 0x44
 8004bee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf2:	f000 bda5 	b.w	8005740 <nan>
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	da53      	bge.n	8004ca2 <__ieee754_pow+0x10a>
 8004bfa:	4b6b      	ldr	r3, [pc, #428]	; (8004da8 <__ieee754_pow+0x210>)
 8004bfc:	4598      	cmp	r8, r3
 8004bfe:	dc4d      	bgt.n	8004c9c <__ieee754_pow+0x104>
 8004c00:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004c04:	4598      	cmp	r8, r3
 8004c06:	dd4c      	ble.n	8004ca2 <__ieee754_pow+0x10a>
 8004c08:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004c0c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c10:	2b14      	cmp	r3, #20
 8004c12:	dd26      	ble.n	8004c62 <__ieee754_pow+0xca>
 8004c14:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004c18:	fa22 f103 	lsr.w	r1, r2, r3
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d13e      	bne.n	8004ca2 <__ieee754_pow+0x10a>
 8004c24:	f001 0101 	and.w	r1, r1, #1
 8004c28:	f1c1 0b02 	rsb	fp, r1, #2
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d15b      	bne.n	8004ce8 <__ieee754_pow+0x150>
 8004c30:	4b5b      	ldr	r3, [pc, #364]	; (8004da0 <__ieee754_pow+0x208>)
 8004c32:	4598      	cmp	r8, r3
 8004c34:	d124      	bne.n	8004c80 <__ieee754_pow+0xe8>
 8004c36:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004c3a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004c3e:	ea53 030a 	orrs.w	r3, r3, sl
 8004c42:	f000 8476 	beq.w	8005532 <__ieee754_pow+0x99a>
 8004c46:	4b59      	ldr	r3, [pc, #356]	; (8004dac <__ieee754_pow+0x214>)
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	dd2d      	ble.n	8004ca8 <__ieee754_pow+0x110>
 8004c4c:	f1b9 0f00 	cmp.w	r9, #0
 8004c50:	f280 8473 	bge.w	800553a <__ieee754_pow+0x9a2>
 8004c54:	2000      	movs	r0, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	ec41 0b10 	vmov	d0, r0, r1
 8004c5c:	b011      	add	sp, #68	; 0x44
 8004c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	d13e      	bne.n	8004ce4 <__ieee754_pow+0x14c>
 8004c66:	f1c3 0314 	rsb	r3, r3, #20
 8004c6a:	fa48 f103 	asr.w	r1, r8, r3
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	4543      	cmp	r3, r8
 8004c74:	f040 8469 	bne.w	800554a <__ieee754_pow+0x9b2>
 8004c78:	f001 0101 	and.w	r1, r1, #1
 8004c7c:	f1c1 0b02 	rsb	fp, r1, #2
 8004c80:	4b4b      	ldr	r3, [pc, #300]	; (8004db0 <__ieee754_pow+0x218>)
 8004c82:	4598      	cmp	r8, r3
 8004c84:	d118      	bne.n	8004cb8 <__ieee754_pow+0x120>
 8004c86:	f1b9 0f00 	cmp.w	r9, #0
 8004c8a:	f280 845a 	bge.w	8005542 <__ieee754_pow+0x9aa>
 8004c8e:	4948      	ldr	r1, [pc, #288]	; (8004db0 <__ieee754_pow+0x218>)
 8004c90:	4632      	mov	r2, r6
 8004c92:	463b      	mov	r3, r7
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7fb fda5 	bl	80007e4 <__aeabi_ddiv>
 8004c9a:	e7dd      	b.n	8004c58 <__ieee754_pow+0xc0>
 8004c9c:	f04f 0b02 	mov.w	fp, #2
 8004ca0:	e7c4      	b.n	8004c2c <__ieee754_pow+0x94>
 8004ca2:	f04f 0b00 	mov.w	fp, #0
 8004ca6:	e7c1      	b.n	8004c2c <__ieee754_pow+0x94>
 8004ca8:	f1b9 0f00 	cmp.w	r9, #0
 8004cac:	dad2      	bge.n	8004c54 <__ieee754_pow+0xbc>
 8004cae:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004cb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004cb6:	e7cf      	b.n	8004c58 <__ieee754_pow+0xc0>
 8004cb8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004cbc:	d106      	bne.n	8004ccc <__ieee754_pow+0x134>
 8004cbe:	4632      	mov	r2, r6
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	f7fb fc63 	bl	8000590 <__aeabi_dmul>
 8004cca:	e7c5      	b.n	8004c58 <__ieee754_pow+0xc0>
 8004ccc:	4b39      	ldr	r3, [pc, #228]	; (8004db4 <__ieee754_pow+0x21c>)
 8004cce:	4599      	cmp	r9, r3
 8004cd0:	d10a      	bne.n	8004ce8 <__ieee754_pow+0x150>
 8004cd2:	2d00      	cmp	r5, #0
 8004cd4:	db08      	blt.n	8004ce8 <__ieee754_pow+0x150>
 8004cd6:	ec47 6b10 	vmov	d0, r6, r7
 8004cda:	b011      	add	sp, #68	; 0x44
 8004cdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	f000 bc68 	b.w	80055b4 <__ieee754_sqrt>
 8004ce4:	f04f 0b00 	mov.w	fp, #0
 8004ce8:	ec47 6b10 	vmov	d0, r6, r7
 8004cec:	f000 fd12 	bl	8005714 <fabs>
 8004cf0:	ec51 0b10 	vmov	r0, r1, d0
 8004cf4:	f1ba 0f00 	cmp.w	sl, #0
 8004cf8:	d127      	bne.n	8004d4a <__ieee754_pow+0x1b2>
 8004cfa:	b124      	cbz	r4, 8004d06 <__ieee754_pow+0x16e>
 8004cfc:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <__ieee754_pow+0x218>)
 8004cfe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d121      	bne.n	8004d4a <__ieee754_pow+0x1b2>
 8004d06:	f1b9 0f00 	cmp.w	r9, #0
 8004d0a:	da05      	bge.n	8004d18 <__ieee754_pow+0x180>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	2000      	movs	r0, #0
 8004d12:	4927      	ldr	r1, [pc, #156]	; (8004db0 <__ieee754_pow+0x218>)
 8004d14:	f7fb fd66 	bl	80007e4 <__aeabi_ddiv>
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	da9d      	bge.n	8004c58 <__ieee754_pow+0xc0>
 8004d1c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004d20:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004d24:	ea54 030b 	orrs.w	r3, r4, fp
 8004d28:	d108      	bne.n	8004d3c <__ieee754_pow+0x1a4>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	f7fb fa75 	bl	8000220 <__aeabi_dsub>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	e7ac      	b.n	8004c96 <__ieee754_pow+0xfe>
 8004d3c:	f1bb 0f01 	cmp.w	fp, #1
 8004d40:	d18a      	bne.n	8004c58 <__ieee754_pow+0xc0>
 8004d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d46:	4619      	mov	r1, r3
 8004d48:	e786      	b.n	8004c58 <__ieee754_pow+0xc0>
 8004d4a:	0fed      	lsrs	r5, r5, #31
 8004d4c:	1e6b      	subs	r3, r5, #1
 8004d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004d50:	ea5b 0303 	orrs.w	r3, fp, r3
 8004d54:	d102      	bne.n	8004d5c <__ieee754_pow+0x1c4>
 8004d56:	4632      	mov	r2, r6
 8004d58:	463b      	mov	r3, r7
 8004d5a:	e7e8      	b.n	8004d2e <__ieee754_pow+0x196>
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <__ieee754_pow+0x220>)
 8004d5e:	4598      	cmp	r8, r3
 8004d60:	f340 80fe 	ble.w	8004f60 <__ieee754_pow+0x3c8>
 8004d64:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004d68:	4598      	cmp	r8, r3
 8004d6a:	dd0a      	ble.n	8004d82 <__ieee754_pow+0x1ea>
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <__ieee754_pow+0x214>)
 8004d6e:	429c      	cmp	r4, r3
 8004d70:	dc0d      	bgt.n	8004d8e <__ieee754_pow+0x1f6>
 8004d72:	f1b9 0f00 	cmp.w	r9, #0
 8004d76:	f6bf af6d 	bge.w	8004c54 <__ieee754_pow+0xbc>
 8004d7a:	a307      	add	r3, pc, #28	; (adr r3, 8004d98 <__ieee754_pow+0x200>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	e79f      	b.n	8004cc2 <__ieee754_pow+0x12a>
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <__ieee754_pow+0x224>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	ddf4      	ble.n	8004d72 <__ieee754_pow+0x1da>
 8004d88:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <__ieee754_pow+0x218>)
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	dd18      	ble.n	8004dc0 <__ieee754_pow+0x228>
 8004d8e:	f1b9 0f00 	cmp.w	r9, #0
 8004d92:	dcf2      	bgt.n	8004d7a <__ieee754_pow+0x1e2>
 8004d94:	e75e      	b.n	8004c54 <__ieee754_pow+0xbc>
 8004d96:	bf00      	nop
 8004d98:	8800759c 	.word	0x8800759c
 8004d9c:	7e37e43c 	.word	0x7e37e43c
 8004da0:	7ff00000 	.word	0x7ff00000
 8004da4:	08005993 	.word	0x08005993
 8004da8:	433fffff 	.word	0x433fffff
 8004dac:	3fefffff 	.word	0x3fefffff
 8004db0:	3ff00000 	.word	0x3ff00000
 8004db4:	3fe00000 	.word	0x3fe00000
 8004db8:	41e00000 	.word	0x41e00000
 8004dbc:	3feffffe 	.word	0x3feffffe
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4b63      	ldr	r3, [pc, #396]	; (8004f50 <__ieee754_pow+0x3b8>)
 8004dc4:	f7fb fa2c 	bl	8000220 <__aeabi_dsub>
 8004dc8:	a355      	add	r3, pc, #340	; (adr r3, 8004f20 <__ieee754_pow+0x388>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	4604      	mov	r4, r0
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	f7fb fbdd 	bl	8000590 <__aeabi_dmul>
 8004dd6:	a354      	add	r3, pc, #336	; (adr r3, 8004f28 <__ieee754_pow+0x390>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	4606      	mov	r6, r0
 8004dde:	460f      	mov	r7, r1
 8004de0:	4620      	mov	r0, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	f7fb fbd4 	bl	8000590 <__aeabi_dmul>
 8004de8:	2200      	movs	r2, #0
 8004dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dee:	4b59      	ldr	r3, [pc, #356]	; (8004f54 <__ieee754_pow+0x3bc>)
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb fbcc 	bl	8000590 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	a14c      	add	r1, pc, #304	; (adr r1, 8004f30 <__ieee754_pow+0x398>)
 8004dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e02:	f7fb fa0d 	bl	8000220 <__aeabi_dsub>
 8004e06:	4622      	mov	r2, r4
 8004e08:	462b      	mov	r3, r5
 8004e0a:	f7fb fbc1 	bl	8000590 <__aeabi_dmul>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	2000      	movs	r0, #0
 8004e14:	4950      	ldr	r1, [pc, #320]	; (8004f58 <__ieee754_pow+0x3c0>)
 8004e16:	f7fb fa03 	bl	8000220 <__aeabi_dsub>
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	462b      	mov	r3, r5
 8004e1e:	4680      	mov	r8, r0
 8004e20:	4689      	mov	r9, r1
 8004e22:	4620      	mov	r0, r4
 8004e24:	4629      	mov	r1, r5
 8004e26:	f7fb fbb3 	bl	8000590 <__aeabi_dmul>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4640      	mov	r0, r8
 8004e30:	4649      	mov	r1, r9
 8004e32:	f7fb fbad 	bl	8000590 <__aeabi_dmul>
 8004e36:	a340      	add	r3, pc, #256	; (adr r3, 8004f38 <__ieee754_pow+0x3a0>)
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	f7fb fba8 	bl	8000590 <__aeabi_dmul>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e48:	f7fb f9ea 	bl	8000220 <__aeabi_dsub>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4604      	mov	r4, r0
 8004e52:	460d      	mov	r5, r1
 8004e54:	4630      	mov	r0, r6
 8004e56:	4639      	mov	r1, r7
 8004e58:	f7fb f9e4 	bl	8000224 <__adddf3>
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e62:	4632      	mov	r2, r6
 8004e64:	463b      	mov	r3, r7
 8004e66:	f7fb f9db 	bl	8000220 <__aeabi_dsub>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4620      	mov	r0, r4
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7fb f9d5 	bl	8000220 <__aeabi_dsub>
 8004e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e78:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	4606      	mov	r6, r0
 8004e80:	460f      	mov	r7, r1
 8004e82:	f040 81eb 	bne.w	800525c <__ieee754_pow+0x6c4>
 8004e86:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004f40 <__ieee754_pow+0x3a8>
 8004e8a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004e8e:	2400      	movs	r4, #0
 8004e90:	4622      	mov	r2, r4
 8004e92:	462b      	mov	r3, r5
 8004e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e9c:	f7fb f9c0 	bl	8000220 <__aeabi_dsub>
 8004ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea4:	f7fb fb74 	bl	8000590 <__aeabi_dmul>
 8004ea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eac:	4680      	mov	r8, r0
 8004eae:	4689      	mov	r9, r1
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	f7fb fb6c 	bl	8000590 <__aeabi_dmul>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	f7fb f9b0 	bl	8000224 <__adddf3>
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	4680      	mov	r8, r0
 8004eca:	4689      	mov	r9, r1
 8004ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ed0:	f7fb fb5e 	bl	8000590 <__aeabi_dmul>
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	460d      	mov	r5, r1
 8004eda:	4602      	mov	r2, r0
 8004edc:	4649      	mov	r1, r9
 8004ede:	4640      	mov	r0, r8
 8004ee0:	e9cd 4500 	strd	r4, r5, [sp]
 8004ee4:	f7fb f99e 	bl	8000224 <__adddf3>
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	; (8004f5c <__ieee754_pow+0x3c4>)
 8004eea:	4299      	cmp	r1, r3
 8004eec:	4606      	mov	r6, r0
 8004eee:	460f      	mov	r7, r1
 8004ef0:	468b      	mov	fp, r1
 8004ef2:	f340 82f7 	ble.w	80054e4 <__ieee754_pow+0x94c>
 8004ef6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004efa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004efe:	4303      	orrs	r3, r0
 8004f00:	f000 81ea 	beq.w	80052d8 <__ieee754_pow+0x740>
 8004f04:	a310      	add	r3, pc, #64	; (adr r3, 8004f48 <__ieee754_pow+0x3b0>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f0e:	f7fb fb3f 	bl	8000590 <__aeabi_dmul>
 8004f12:	a30d      	add	r3, pc, #52	; (adr r3, 8004f48 <__ieee754_pow+0x3b0>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	e6d5      	b.n	8004cc6 <__ieee754_pow+0x12e>
 8004f1a:	bf00      	nop
 8004f1c:	f3af 8000 	nop.w
 8004f20:	60000000 	.word	0x60000000
 8004f24:	3ff71547 	.word	0x3ff71547
 8004f28:	f85ddf44 	.word	0xf85ddf44
 8004f2c:	3e54ae0b 	.word	0x3e54ae0b
 8004f30:	55555555 	.word	0x55555555
 8004f34:	3fd55555 	.word	0x3fd55555
 8004f38:	652b82fe 	.word	0x652b82fe
 8004f3c:	3ff71547 	.word	0x3ff71547
 8004f40:	00000000 	.word	0x00000000
 8004f44:	bff00000 	.word	0xbff00000
 8004f48:	8800759c 	.word	0x8800759c
 8004f4c:	7e37e43c 	.word	0x7e37e43c
 8004f50:	3ff00000 	.word	0x3ff00000
 8004f54:	3fd00000 	.word	0x3fd00000
 8004f58:	3fe00000 	.word	0x3fe00000
 8004f5c:	408fffff 	.word	0x408fffff
 8004f60:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	da05      	bge.n	8004f76 <__ieee754_pow+0x3de>
 8004f6a:	4bd3      	ldr	r3, [pc, #844]	; (80052b8 <__ieee754_pow+0x720>)
 8004f6c:	f7fb fb10 	bl	8000590 <__aeabi_dmul>
 8004f70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004f74:	460c      	mov	r4, r1
 8004f76:	1523      	asrs	r3, r4, #20
 8004f78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f7c:	4413      	add	r3, r2
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	4bce      	ldr	r3, [pc, #824]	; (80052bc <__ieee754_pow+0x724>)
 8004f82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004f86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004f90:	dd08      	ble.n	8004fa4 <__ieee754_pow+0x40c>
 8004f92:	4bcb      	ldr	r3, [pc, #812]	; (80052c0 <__ieee754_pow+0x728>)
 8004f94:	429c      	cmp	r4, r3
 8004f96:	f340 815e 	ble.w	8005256 <__ieee754_pow+0x6be>
 8004f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004fa4:	f04f 0a00 	mov.w	sl, #0
 8004fa8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004fac:	930c      	str	r3, [sp, #48]	; 0x30
 8004fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fb0:	4bc4      	ldr	r3, [pc, #784]	; (80052c4 <__ieee754_pow+0x72c>)
 8004fb2:	4413      	add	r3, r2
 8004fb4:	ed93 7b00 	vldr	d7, [r3]
 8004fb8:	4629      	mov	r1, r5
 8004fba:	ec53 2b17 	vmov	r2, r3, d7
 8004fbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004fc2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fc6:	f7fb f92b 	bl	8000220 <__aeabi_dsub>
 8004fca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fce:	4606      	mov	r6, r0
 8004fd0:	460f      	mov	r7, r1
 8004fd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fd6:	f7fb f925 	bl	8000224 <__adddf3>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	2000      	movs	r0, #0
 8004fe0:	49b9      	ldr	r1, [pc, #740]	; (80052c8 <__ieee754_pow+0x730>)
 8004fe2:	f7fb fbff 	bl	80007e4 <__aeabi_ddiv>
 8004fe6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4630      	mov	r0, r6
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	f7fb facd 	bl	8000590 <__aeabi_dmul>
 8004ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ffa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ffe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005002:	2300      	movs	r3, #0
 8005004:	9302      	str	r3, [sp, #8]
 8005006:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800500a:	106d      	asrs	r5, r5, #1
 800500c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005010:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005014:	2200      	movs	r2, #0
 8005016:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800501a:	4640      	mov	r0, r8
 800501c:	4649      	mov	r1, r9
 800501e:	4614      	mov	r4, r2
 8005020:	461d      	mov	r5, r3
 8005022:	f7fb fab5 	bl	8000590 <__aeabi_dmul>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4630      	mov	r0, r6
 800502c:	4639      	mov	r1, r7
 800502e:	f7fb f8f7 	bl	8000220 <__aeabi_dsub>
 8005032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005036:	4606      	mov	r6, r0
 8005038:	460f      	mov	r7, r1
 800503a:	4620      	mov	r0, r4
 800503c:	4629      	mov	r1, r5
 800503e:	f7fb f8ef 	bl	8000220 <__aeabi_dsub>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800504a:	f7fb f8e9 	bl	8000220 <__aeabi_dsub>
 800504e:	4642      	mov	r2, r8
 8005050:	464b      	mov	r3, r9
 8005052:	f7fb fa9d 	bl	8000590 <__aeabi_dmul>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4630      	mov	r0, r6
 800505c:	4639      	mov	r1, r7
 800505e:	f7fb f8df 	bl	8000220 <__aeabi_dsub>
 8005062:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005066:	f7fb fa93 	bl	8000590 <__aeabi_dmul>
 800506a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800506e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005072:	4610      	mov	r0, r2
 8005074:	4619      	mov	r1, r3
 8005076:	f7fb fa8b 	bl	8000590 <__aeabi_dmul>
 800507a:	a37b      	add	r3, pc, #492	; (adr r3, 8005268 <__ieee754_pow+0x6d0>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	4604      	mov	r4, r0
 8005082:	460d      	mov	r5, r1
 8005084:	f7fb fa84 	bl	8000590 <__aeabi_dmul>
 8005088:	a379      	add	r3, pc, #484	; (adr r3, 8005270 <__ieee754_pow+0x6d8>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb f8c9 	bl	8000224 <__adddf3>
 8005092:	4622      	mov	r2, r4
 8005094:	462b      	mov	r3, r5
 8005096:	f7fb fa7b 	bl	8000590 <__aeabi_dmul>
 800509a:	a377      	add	r3, pc, #476	; (adr r3, 8005278 <__ieee754_pow+0x6e0>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f7fb f8c0 	bl	8000224 <__adddf3>
 80050a4:	4622      	mov	r2, r4
 80050a6:	462b      	mov	r3, r5
 80050a8:	f7fb fa72 	bl	8000590 <__aeabi_dmul>
 80050ac:	a374      	add	r3, pc, #464	; (adr r3, 8005280 <__ieee754_pow+0x6e8>)
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f7fb f8b7 	bl	8000224 <__adddf3>
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	f7fb fa69 	bl	8000590 <__aeabi_dmul>
 80050be:	a372      	add	r3, pc, #456	; (adr r3, 8005288 <__ieee754_pow+0x6f0>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f7fb f8ae 	bl	8000224 <__adddf3>
 80050c8:	4622      	mov	r2, r4
 80050ca:	462b      	mov	r3, r5
 80050cc:	f7fb fa60 	bl	8000590 <__aeabi_dmul>
 80050d0:	a36f      	add	r3, pc, #444	; (adr r3, 8005290 <__ieee754_pow+0x6f8>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f7fb f8a5 	bl	8000224 <__adddf3>
 80050da:	4622      	mov	r2, r4
 80050dc:	4606      	mov	r6, r0
 80050de:	460f      	mov	r7, r1
 80050e0:	462b      	mov	r3, r5
 80050e2:	4620      	mov	r0, r4
 80050e4:	4629      	mov	r1, r5
 80050e6:	f7fb fa53 	bl	8000590 <__aeabi_dmul>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4630      	mov	r0, r6
 80050f0:	4639      	mov	r1, r7
 80050f2:	f7fb fa4d 	bl	8000590 <__aeabi_dmul>
 80050f6:	4642      	mov	r2, r8
 80050f8:	4604      	mov	r4, r0
 80050fa:	460d      	mov	r5, r1
 80050fc:	464b      	mov	r3, r9
 80050fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005102:	f7fb f88f 	bl	8000224 <__adddf3>
 8005106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800510a:	f7fb fa41 	bl	8000590 <__aeabi_dmul>
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	f7fb f887 	bl	8000224 <__adddf3>
 8005116:	4642      	mov	r2, r8
 8005118:	4606      	mov	r6, r0
 800511a:	460f      	mov	r7, r1
 800511c:	464b      	mov	r3, r9
 800511e:	4640      	mov	r0, r8
 8005120:	4649      	mov	r1, r9
 8005122:	f7fb fa35 	bl	8000590 <__aeabi_dmul>
 8005126:	2200      	movs	r2, #0
 8005128:	4b68      	ldr	r3, [pc, #416]	; (80052cc <__ieee754_pow+0x734>)
 800512a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800512e:	f7fb f879 	bl	8000224 <__adddf3>
 8005132:	4632      	mov	r2, r6
 8005134:	463b      	mov	r3, r7
 8005136:	f7fb f875 	bl	8000224 <__adddf3>
 800513a:	9802      	ldr	r0, [sp, #8]
 800513c:	460d      	mov	r5, r1
 800513e:	4604      	mov	r4, r0
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4640      	mov	r0, r8
 8005146:	4649      	mov	r1, r9
 8005148:	f7fb fa22 	bl	8000590 <__aeabi_dmul>
 800514c:	2200      	movs	r2, #0
 800514e:	4680      	mov	r8, r0
 8005150:	4689      	mov	r9, r1
 8005152:	4b5e      	ldr	r3, [pc, #376]	; (80052cc <__ieee754_pow+0x734>)
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb f862 	bl	8000220 <__aeabi_dsub>
 800515c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005160:	f7fb f85e 	bl	8000220 <__aeabi_dsub>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4630      	mov	r0, r6
 800516a:	4639      	mov	r1, r7
 800516c:	f7fb f858 	bl	8000220 <__aeabi_dsub>
 8005170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005174:	f7fb fa0c 	bl	8000590 <__aeabi_dmul>
 8005178:	4622      	mov	r2, r4
 800517a:	4606      	mov	r6, r0
 800517c:	460f      	mov	r7, r1
 800517e:	462b      	mov	r3, r5
 8005180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005184:	f7fb fa04 	bl	8000590 <__aeabi_dmul>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4630      	mov	r0, r6
 800518e:	4639      	mov	r1, r7
 8005190:	f7fb f848 	bl	8000224 <__adddf3>
 8005194:	4606      	mov	r6, r0
 8005196:	460f      	mov	r7, r1
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4640      	mov	r0, r8
 800519e:	4649      	mov	r1, r9
 80051a0:	f7fb f840 	bl	8000224 <__adddf3>
 80051a4:	9802      	ldr	r0, [sp, #8]
 80051a6:	a33c      	add	r3, pc, #240	; (adr r3, 8005298 <__ieee754_pow+0x700>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	4604      	mov	r4, r0
 80051ae:	460d      	mov	r5, r1
 80051b0:	f7fb f9ee 	bl	8000590 <__aeabi_dmul>
 80051b4:	4642      	mov	r2, r8
 80051b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80051ba:	464b      	mov	r3, r9
 80051bc:	4620      	mov	r0, r4
 80051be:	4629      	mov	r1, r5
 80051c0:	f7fb f82e 	bl	8000220 <__aeabi_dsub>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4630      	mov	r0, r6
 80051ca:	4639      	mov	r1, r7
 80051cc:	f7fb f828 	bl	8000220 <__aeabi_dsub>
 80051d0:	a333      	add	r3, pc, #204	; (adr r3, 80052a0 <__ieee754_pow+0x708>)
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f7fb f9db 	bl	8000590 <__aeabi_dmul>
 80051da:	a333      	add	r3, pc, #204	; (adr r3, 80052a8 <__ieee754_pow+0x710>)
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	4606      	mov	r6, r0
 80051e2:	460f      	mov	r7, r1
 80051e4:	4620      	mov	r0, r4
 80051e6:	4629      	mov	r1, r5
 80051e8:	f7fb f9d2 	bl	8000590 <__aeabi_dmul>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4630      	mov	r0, r6
 80051f2:	4639      	mov	r1, r7
 80051f4:	f7fb f816 	bl	8000224 <__adddf3>
 80051f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051fa:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <__ieee754_pow+0x738>)
 80051fc:	4413      	add	r3, r2
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f7fb f80f 	bl	8000224 <__adddf3>
 8005206:	4604      	mov	r4, r0
 8005208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800520a:	460d      	mov	r5, r1
 800520c:	f7fb f956 	bl	80004bc <__aeabi_i2d>
 8005210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005212:	4b30      	ldr	r3, [pc, #192]	; (80052d4 <__ieee754_pow+0x73c>)
 8005214:	4413      	add	r3, r2
 8005216:	e9d3 8900 	ldrd	r8, r9, [r3]
 800521a:	4606      	mov	r6, r0
 800521c:	460f      	mov	r7, r1
 800521e:	4622      	mov	r2, r4
 8005220:	462b      	mov	r3, r5
 8005222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005226:	f7fa fffd 	bl	8000224 <__adddf3>
 800522a:	4642      	mov	r2, r8
 800522c:	464b      	mov	r3, r9
 800522e:	f7fa fff9 	bl	8000224 <__adddf3>
 8005232:	4632      	mov	r2, r6
 8005234:	463b      	mov	r3, r7
 8005236:	f7fa fff5 	bl	8000224 <__adddf3>
 800523a:	9802      	ldr	r0, [sp, #8]
 800523c:	4632      	mov	r2, r6
 800523e:	463b      	mov	r3, r7
 8005240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005244:	f7fa ffec 	bl	8000220 <__aeabi_dsub>
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	f7fa ffe8 	bl	8000220 <__aeabi_dsub>
 8005250:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005254:	e607      	b.n	8004e66 <__ieee754_pow+0x2ce>
 8005256:	f04f 0a01 	mov.w	sl, #1
 800525a:	e6a5      	b.n	8004fa8 <__ieee754_pow+0x410>
 800525c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80052b0 <__ieee754_pow+0x718>
 8005260:	e613      	b.n	8004e8a <__ieee754_pow+0x2f2>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
 8005268:	4a454eef 	.word	0x4a454eef
 800526c:	3fca7e28 	.word	0x3fca7e28
 8005270:	93c9db65 	.word	0x93c9db65
 8005274:	3fcd864a 	.word	0x3fcd864a
 8005278:	a91d4101 	.word	0xa91d4101
 800527c:	3fd17460 	.word	0x3fd17460
 8005280:	518f264d 	.word	0x518f264d
 8005284:	3fd55555 	.word	0x3fd55555
 8005288:	db6fabff 	.word	0xdb6fabff
 800528c:	3fdb6db6 	.word	0x3fdb6db6
 8005290:	33333303 	.word	0x33333303
 8005294:	3fe33333 	.word	0x3fe33333
 8005298:	e0000000 	.word	0xe0000000
 800529c:	3feec709 	.word	0x3feec709
 80052a0:	dc3a03fd 	.word	0xdc3a03fd
 80052a4:	3feec709 	.word	0x3feec709
 80052a8:	145b01f5 	.word	0x145b01f5
 80052ac:	be3e2fe0 	.word	0xbe3e2fe0
 80052b0:	00000000 	.word	0x00000000
 80052b4:	3ff00000 	.word	0x3ff00000
 80052b8:	43400000 	.word	0x43400000
 80052bc:	0003988e 	.word	0x0003988e
 80052c0:	000bb679 	.word	0x000bb679
 80052c4:	08005998 	.word	0x08005998
 80052c8:	3ff00000 	.word	0x3ff00000
 80052cc:	40080000 	.word	0x40080000
 80052d0:	080059b8 	.word	0x080059b8
 80052d4:	080059a8 	.word	0x080059a8
 80052d8:	a3b4      	add	r3, pc, #720	; (adr r3, 80055ac <__ieee754_pow+0xa14>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	4640      	mov	r0, r8
 80052e0:	4649      	mov	r1, r9
 80052e2:	f7fa ff9f 	bl	8000224 <__adddf3>
 80052e6:	4622      	mov	r2, r4
 80052e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052ec:	462b      	mov	r3, r5
 80052ee:	4630      	mov	r0, r6
 80052f0:	4639      	mov	r1, r7
 80052f2:	f7fa ff95 	bl	8000220 <__aeabi_dsub>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052fe:	f7fb fbd7 	bl	8000ab0 <__aeabi_dcmpgt>
 8005302:	2800      	cmp	r0, #0
 8005304:	f47f adfe 	bne.w	8004f04 <__ieee754_pow+0x36c>
 8005308:	4aa3      	ldr	r2, [pc, #652]	; (8005598 <__ieee754_pow+0xa00>)
 800530a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800530e:	4293      	cmp	r3, r2
 8005310:	f340 810a 	ble.w	8005528 <__ieee754_pow+0x990>
 8005314:	151b      	asrs	r3, r3, #20
 8005316:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800531a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800531e:	fa4a f303 	asr.w	r3, sl, r3
 8005322:	445b      	add	r3, fp
 8005324:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005328:	4e9c      	ldr	r6, [pc, #624]	; (800559c <__ieee754_pow+0xa04>)
 800532a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800532e:	4116      	asrs	r6, r2
 8005330:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005334:	2000      	movs	r0, #0
 8005336:	ea23 0106 	bic.w	r1, r3, r6
 800533a:	f1c2 0214 	rsb	r2, r2, #20
 800533e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005342:	fa4a fa02 	asr.w	sl, sl, r2
 8005346:	f1bb 0f00 	cmp.w	fp, #0
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4620      	mov	r0, r4
 8005350:	4629      	mov	r1, r5
 8005352:	bfb8      	it	lt
 8005354:	f1ca 0a00 	rsblt	sl, sl, #0
 8005358:	f7fa ff62 	bl	8000220 <__aeabi_dsub>
 800535c:	e9cd 0100 	strd	r0, r1, [sp]
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005368:	f7fa ff5c 	bl	8000224 <__adddf3>
 800536c:	2000      	movs	r0, #0
 800536e:	a378      	add	r3, pc, #480	; (adr r3, 8005550 <__ieee754_pow+0x9b8>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	4604      	mov	r4, r0
 8005376:	460d      	mov	r5, r1
 8005378:	f7fb f90a 	bl	8000590 <__aeabi_dmul>
 800537c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005380:	4606      	mov	r6, r0
 8005382:	460f      	mov	r7, r1
 8005384:	4620      	mov	r0, r4
 8005386:	4629      	mov	r1, r5
 8005388:	f7fa ff4a 	bl	8000220 <__aeabi_dsub>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4640      	mov	r0, r8
 8005392:	4649      	mov	r1, r9
 8005394:	f7fa ff44 	bl	8000220 <__aeabi_dsub>
 8005398:	a36f      	add	r3, pc, #444	; (adr r3, 8005558 <__ieee754_pow+0x9c0>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fb f8f7 	bl	8000590 <__aeabi_dmul>
 80053a2:	a36f      	add	r3, pc, #444	; (adr r3, 8005560 <__ieee754_pow+0x9c8>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	4680      	mov	r8, r0
 80053aa:	4689      	mov	r9, r1
 80053ac:	4620      	mov	r0, r4
 80053ae:	4629      	mov	r1, r5
 80053b0:	f7fb f8ee 	bl	8000590 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4640      	mov	r0, r8
 80053ba:	4649      	mov	r1, r9
 80053bc:	f7fa ff32 	bl	8000224 <__adddf3>
 80053c0:	4604      	mov	r4, r0
 80053c2:	460d      	mov	r5, r1
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fa ff2a 	bl	8000224 <__adddf3>
 80053d0:	4632      	mov	r2, r6
 80053d2:	463b      	mov	r3, r7
 80053d4:	4680      	mov	r8, r0
 80053d6:	4689      	mov	r9, r1
 80053d8:	f7fa ff22 	bl	8000220 <__aeabi_dsub>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4620      	mov	r0, r4
 80053e2:	4629      	mov	r1, r5
 80053e4:	f7fa ff1c 	bl	8000220 <__aeabi_dsub>
 80053e8:	4642      	mov	r2, r8
 80053ea:	4606      	mov	r6, r0
 80053ec:	460f      	mov	r7, r1
 80053ee:	464b      	mov	r3, r9
 80053f0:	4640      	mov	r0, r8
 80053f2:	4649      	mov	r1, r9
 80053f4:	f7fb f8cc 	bl	8000590 <__aeabi_dmul>
 80053f8:	a35b      	add	r3, pc, #364	; (adr r3, 8005568 <__ieee754_pow+0x9d0>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	4604      	mov	r4, r0
 8005400:	460d      	mov	r5, r1
 8005402:	f7fb f8c5 	bl	8000590 <__aeabi_dmul>
 8005406:	a35a      	add	r3, pc, #360	; (adr r3, 8005570 <__ieee754_pow+0x9d8>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fa ff08 	bl	8000220 <__aeabi_dsub>
 8005410:	4622      	mov	r2, r4
 8005412:	462b      	mov	r3, r5
 8005414:	f7fb f8bc 	bl	8000590 <__aeabi_dmul>
 8005418:	a357      	add	r3, pc, #348	; (adr r3, 8005578 <__ieee754_pow+0x9e0>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fa ff01 	bl	8000224 <__adddf3>
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	f7fb f8b3 	bl	8000590 <__aeabi_dmul>
 800542a:	a355      	add	r3, pc, #340	; (adr r3, 8005580 <__ieee754_pow+0x9e8>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fa fef6 	bl	8000220 <__aeabi_dsub>
 8005434:	4622      	mov	r2, r4
 8005436:	462b      	mov	r3, r5
 8005438:	f7fb f8aa 	bl	8000590 <__aeabi_dmul>
 800543c:	a352      	add	r3, pc, #328	; (adr r3, 8005588 <__ieee754_pow+0x9f0>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fa feef 	bl	8000224 <__adddf3>
 8005446:	4622      	mov	r2, r4
 8005448:	462b      	mov	r3, r5
 800544a:	f7fb f8a1 	bl	8000590 <__aeabi_dmul>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fa fee3 	bl	8000220 <__aeabi_dsub>
 800545a:	4604      	mov	r4, r0
 800545c:	460d      	mov	r5, r1
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4640      	mov	r0, r8
 8005464:	4649      	mov	r1, r9
 8005466:	f7fb f893 	bl	8000590 <__aeabi_dmul>
 800546a:	2200      	movs	r2, #0
 800546c:	e9cd 0100 	strd	r0, r1, [sp]
 8005470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005474:	4620      	mov	r0, r4
 8005476:	4629      	mov	r1, r5
 8005478:	f7fa fed2 	bl	8000220 <__aeabi_dsub>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005484:	f7fb f9ae 	bl	80007e4 <__aeabi_ddiv>
 8005488:	4632      	mov	r2, r6
 800548a:	4604      	mov	r4, r0
 800548c:	460d      	mov	r5, r1
 800548e:	463b      	mov	r3, r7
 8005490:	4640      	mov	r0, r8
 8005492:	4649      	mov	r1, r9
 8005494:	f7fb f87c 	bl	8000590 <__aeabi_dmul>
 8005498:	4632      	mov	r2, r6
 800549a:	463b      	mov	r3, r7
 800549c:	f7fa fec2 	bl	8000224 <__adddf3>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f7fa feba 	bl	8000220 <__aeabi_dsub>
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	f7fa feb6 	bl	8000220 <__aeabi_dsub>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	2000      	movs	r0, #0
 80054ba:	4939      	ldr	r1, [pc, #228]	; (80055a0 <__ieee754_pow+0xa08>)
 80054bc:	f7fa feb0 	bl	8000220 <__aeabi_dsub>
 80054c0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80054c4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	da2f      	bge.n	800552e <__ieee754_pow+0x996>
 80054ce:	4650      	mov	r0, sl
 80054d0:	ec43 2b10 	vmov	d0, r2, r3
 80054d4:	f000 f9c0 	bl	8005858 <scalbn>
 80054d8:	ec51 0b10 	vmov	r0, r1, d0
 80054dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054e0:	f7ff bbf1 	b.w	8004cc6 <__ieee754_pow+0x12e>
 80054e4:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <__ieee754_pow+0xa0c>)
 80054e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80054ea:	429e      	cmp	r6, r3
 80054ec:	f77f af0c 	ble.w	8005308 <__ieee754_pow+0x770>
 80054f0:	4b2d      	ldr	r3, [pc, #180]	; (80055a8 <__ieee754_pow+0xa10>)
 80054f2:	440b      	add	r3, r1
 80054f4:	4303      	orrs	r3, r0
 80054f6:	d00b      	beq.n	8005510 <__ieee754_pow+0x978>
 80054f8:	a325      	add	r3, pc, #148	; (adr r3, 8005590 <__ieee754_pow+0x9f8>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005502:	f7fb f845 	bl	8000590 <__aeabi_dmul>
 8005506:	a322      	add	r3, pc, #136	; (adr r3, 8005590 <__ieee754_pow+0x9f8>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f7ff bbdb 	b.w	8004cc6 <__ieee754_pow+0x12e>
 8005510:	4622      	mov	r2, r4
 8005512:	462b      	mov	r3, r5
 8005514:	f7fa fe84 	bl	8000220 <__aeabi_dsub>
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	f7fb fabe 	bl	8000a9c <__aeabi_dcmpge>
 8005520:	2800      	cmp	r0, #0
 8005522:	f43f aef1 	beq.w	8005308 <__ieee754_pow+0x770>
 8005526:	e7e7      	b.n	80054f8 <__ieee754_pow+0x960>
 8005528:	f04f 0a00 	mov.w	sl, #0
 800552c:	e718      	b.n	8005360 <__ieee754_pow+0x7c8>
 800552e:	4621      	mov	r1, r4
 8005530:	e7d4      	b.n	80054dc <__ieee754_pow+0x944>
 8005532:	2000      	movs	r0, #0
 8005534:	491a      	ldr	r1, [pc, #104]	; (80055a0 <__ieee754_pow+0xa08>)
 8005536:	f7ff bb8f 	b.w	8004c58 <__ieee754_pow+0xc0>
 800553a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800553e:	f7ff bb8b 	b.w	8004c58 <__ieee754_pow+0xc0>
 8005542:	4630      	mov	r0, r6
 8005544:	4639      	mov	r1, r7
 8005546:	f7ff bb87 	b.w	8004c58 <__ieee754_pow+0xc0>
 800554a:	4693      	mov	fp, r2
 800554c:	f7ff bb98 	b.w	8004c80 <__ieee754_pow+0xe8>
 8005550:	00000000 	.word	0x00000000
 8005554:	3fe62e43 	.word	0x3fe62e43
 8005558:	fefa39ef 	.word	0xfefa39ef
 800555c:	3fe62e42 	.word	0x3fe62e42
 8005560:	0ca86c39 	.word	0x0ca86c39
 8005564:	be205c61 	.word	0xbe205c61
 8005568:	72bea4d0 	.word	0x72bea4d0
 800556c:	3e663769 	.word	0x3e663769
 8005570:	c5d26bf1 	.word	0xc5d26bf1
 8005574:	3ebbbd41 	.word	0x3ebbbd41
 8005578:	af25de2c 	.word	0xaf25de2c
 800557c:	3f11566a 	.word	0x3f11566a
 8005580:	16bebd93 	.word	0x16bebd93
 8005584:	3f66c16c 	.word	0x3f66c16c
 8005588:	5555553e 	.word	0x5555553e
 800558c:	3fc55555 	.word	0x3fc55555
 8005590:	c2f8f359 	.word	0xc2f8f359
 8005594:	01a56e1f 	.word	0x01a56e1f
 8005598:	3fe00000 	.word	0x3fe00000
 800559c:	000fffff 	.word	0x000fffff
 80055a0:	3ff00000 	.word	0x3ff00000
 80055a4:	4090cbff 	.word	0x4090cbff
 80055a8:	3f6f3400 	.word	0x3f6f3400
 80055ac:	652b82fe 	.word	0x652b82fe
 80055b0:	3c971547 	.word	0x3c971547

080055b4 <__ieee754_sqrt>:
 80055b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b8:	4955      	ldr	r1, [pc, #340]	; (8005710 <__ieee754_sqrt+0x15c>)
 80055ba:	ec55 4b10 	vmov	r4, r5, d0
 80055be:	43a9      	bics	r1, r5
 80055c0:	462b      	mov	r3, r5
 80055c2:	462a      	mov	r2, r5
 80055c4:	d112      	bne.n	80055ec <__ieee754_sqrt+0x38>
 80055c6:	ee10 2a10 	vmov	r2, s0
 80055ca:	ee10 0a10 	vmov	r0, s0
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7fa ffde 	bl	8000590 <__aeabi_dmul>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4620      	mov	r0, r4
 80055da:	4629      	mov	r1, r5
 80055dc:	f7fa fe22 	bl	8000224 <__adddf3>
 80055e0:	4604      	mov	r4, r0
 80055e2:	460d      	mov	r5, r1
 80055e4:	ec45 4b10 	vmov	d0, r4, r5
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	ee10 0a10 	vmov	r0, s0
 80055f2:	4621      	mov	r1, r4
 80055f4:	dc0f      	bgt.n	8005616 <__ieee754_sqrt+0x62>
 80055f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80055fa:	4330      	orrs	r0, r6
 80055fc:	d0f2      	beq.n	80055e4 <__ieee754_sqrt+0x30>
 80055fe:	b155      	cbz	r5, 8005616 <__ieee754_sqrt+0x62>
 8005600:	ee10 2a10 	vmov	r2, s0
 8005604:	4620      	mov	r0, r4
 8005606:	4629      	mov	r1, r5
 8005608:	f7fa fe0a 	bl	8000220 <__aeabi_dsub>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	f7fb f8e8 	bl	80007e4 <__aeabi_ddiv>
 8005614:	e7e4      	b.n	80055e0 <__ieee754_sqrt+0x2c>
 8005616:	151b      	asrs	r3, r3, #20
 8005618:	d073      	beq.n	8005702 <__ieee754_sqrt+0x14e>
 800561a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800561e:	07dd      	lsls	r5, r3, #31
 8005620:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005624:	bf48      	it	mi
 8005626:	0fc8      	lsrmi	r0, r1, #31
 8005628:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800562c:	bf44      	itt	mi
 800562e:	0049      	lslmi	r1, r1, #1
 8005630:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8005634:	2500      	movs	r5, #0
 8005636:	1058      	asrs	r0, r3, #1
 8005638:	0fcb      	lsrs	r3, r1, #31
 800563a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800563e:	0049      	lsls	r1, r1, #1
 8005640:	2316      	movs	r3, #22
 8005642:	462c      	mov	r4, r5
 8005644:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005648:	19a7      	adds	r7, r4, r6
 800564a:	4297      	cmp	r7, r2
 800564c:	bfde      	ittt	le
 800564e:	19bc      	addle	r4, r7, r6
 8005650:	1bd2      	suble	r2, r2, r7
 8005652:	19ad      	addle	r5, r5, r6
 8005654:	0fcf      	lsrs	r7, r1, #31
 8005656:	3b01      	subs	r3, #1
 8005658:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800565c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005660:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005664:	d1f0      	bne.n	8005648 <__ieee754_sqrt+0x94>
 8005666:	f04f 0c20 	mov.w	ip, #32
 800566a:	469e      	mov	lr, r3
 800566c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005670:	42a2      	cmp	r2, r4
 8005672:	eb06 070e 	add.w	r7, r6, lr
 8005676:	dc02      	bgt.n	800567e <__ieee754_sqrt+0xca>
 8005678:	d112      	bne.n	80056a0 <__ieee754_sqrt+0xec>
 800567a:	428f      	cmp	r7, r1
 800567c:	d810      	bhi.n	80056a0 <__ieee754_sqrt+0xec>
 800567e:	2f00      	cmp	r7, #0
 8005680:	eb07 0e06 	add.w	lr, r7, r6
 8005684:	da42      	bge.n	800570c <__ieee754_sqrt+0x158>
 8005686:	f1be 0f00 	cmp.w	lr, #0
 800568a:	db3f      	blt.n	800570c <__ieee754_sqrt+0x158>
 800568c:	f104 0801 	add.w	r8, r4, #1
 8005690:	1b12      	subs	r2, r2, r4
 8005692:	428f      	cmp	r7, r1
 8005694:	bf88      	it	hi
 8005696:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800569a:	1bc9      	subs	r1, r1, r7
 800569c:	4433      	add	r3, r6
 800569e:	4644      	mov	r4, r8
 80056a0:	0052      	lsls	r2, r2, #1
 80056a2:	f1bc 0c01 	subs.w	ip, ip, #1
 80056a6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80056aa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80056ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80056b2:	d1dd      	bne.n	8005670 <__ieee754_sqrt+0xbc>
 80056b4:	430a      	orrs	r2, r1
 80056b6:	d006      	beq.n	80056c6 <__ieee754_sqrt+0x112>
 80056b8:	1c5c      	adds	r4, r3, #1
 80056ba:	bf13      	iteet	ne
 80056bc:	3301      	addne	r3, #1
 80056be:	3501      	addeq	r5, #1
 80056c0:	4663      	moveq	r3, ip
 80056c2:	f023 0301 	bicne.w	r3, r3, #1
 80056c6:	106a      	asrs	r2, r5, #1
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	07e9      	lsls	r1, r5, #31
 80056cc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80056d0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80056d4:	bf48      	it	mi
 80056d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80056da:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80056de:	461c      	mov	r4, r3
 80056e0:	e780      	b.n	80055e4 <__ieee754_sqrt+0x30>
 80056e2:	0aca      	lsrs	r2, r1, #11
 80056e4:	3815      	subs	r0, #21
 80056e6:	0549      	lsls	r1, r1, #21
 80056e8:	2a00      	cmp	r2, #0
 80056ea:	d0fa      	beq.n	80056e2 <__ieee754_sqrt+0x12e>
 80056ec:	02d6      	lsls	r6, r2, #11
 80056ee:	d50a      	bpl.n	8005706 <__ieee754_sqrt+0x152>
 80056f0:	f1c3 0420 	rsb	r4, r3, #32
 80056f4:	fa21 f404 	lsr.w	r4, r1, r4
 80056f8:	1e5d      	subs	r5, r3, #1
 80056fa:	4099      	lsls	r1, r3
 80056fc:	4322      	orrs	r2, r4
 80056fe:	1b43      	subs	r3, r0, r5
 8005700:	e78b      	b.n	800561a <__ieee754_sqrt+0x66>
 8005702:	4618      	mov	r0, r3
 8005704:	e7f0      	b.n	80056e8 <__ieee754_sqrt+0x134>
 8005706:	0052      	lsls	r2, r2, #1
 8005708:	3301      	adds	r3, #1
 800570a:	e7ef      	b.n	80056ec <__ieee754_sqrt+0x138>
 800570c:	46a0      	mov	r8, r4
 800570e:	e7bf      	b.n	8005690 <__ieee754_sqrt+0xdc>
 8005710:	7ff00000 	.word	0x7ff00000

08005714 <fabs>:
 8005714:	ec51 0b10 	vmov	r0, r1, d0
 8005718:	ee10 2a10 	vmov	r2, s0
 800571c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005720:	ec43 2b10 	vmov	d0, r2, r3
 8005724:	4770      	bx	lr

08005726 <finite>:
 8005726:	ee10 3a90 	vmov	r3, s1
 800572a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800572e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005732:	0fc0      	lsrs	r0, r0, #31
 8005734:	4770      	bx	lr

08005736 <matherr>:
 8005736:	2000      	movs	r0, #0
 8005738:	4770      	bx	lr
 800573a:	0000      	movs	r0, r0
 800573c:	0000      	movs	r0, r0
	...

08005740 <nan>:
 8005740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005748 <nan+0x8>
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	00000000 	.word	0x00000000
 800574c:	7ff80000 	.word	0x7ff80000

08005750 <rint>:
 8005750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005752:	ec51 0b10 	vmov	r0, r1, d0
 8005756:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800575a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800575e:	2e13      	cmp	r6, #19
 8005760:	460b      	mov	r3, r1
 8005762:	ee10 4a10 	vmov	r4, s0
 8005766:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800576a:	dc56      	bgt.n	800581a <rint+0xca>
 800576c:	2e00      	cmp	r6, #0
 800576e:	da2b      	bge.n	80057c8 <rint+0x78>
 8005770:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005774:	4302      	orrs	r2, r0
 8005776:	d023      	beq.n	80057c0 <rint+0x70>
 8005778:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800577c:	4302      	orrs	r2, r0
 800577e:	4254      	negs	r4, r2
 8005780:	4314      	orrs	r4, r2
 8005782:	0c4b      	lsrs	r3, r1, #17
 8005784:	0b24      	lsrs	r4, r4, #12
 8005786:	045b      	lsls	r3, r3, #17
 8005788:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800578c:	ea44 0103 	orr.w	r1, r4, r3
 8005790:	460b      	mov	r3, r1
 8005792:	492f      	ldr	r1, [pc, #188]	; (8005850 <rint+0x100>)
 8005794:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005798:	e9d1 6700 	ldrd	r6, r7, [r1]
 800579c:	4602      	mov	r2, r0
 800579e:	4639      	mov	r1, r7
 80057a0:	4630      	mov	r0, r6
 80057a2:	f7fa fd3f 	bl	8000224 <__adddf3>
 80057a6:	e9cd 0100 	strd	r0, r1, [sp]
 80057aa:	463b      	mov	r3, r7
 80057ac:	4632      	mov	r2, r6
 80057ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057b2:	f7fa fd35 	bl	8000220 <__aeabi_dsub>
 80057b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80057ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80057be:	4639      	mov	r1, r7
 80057c0:	ec41 0b10 	vmov	d0, r0, r1
 80057c4:	b003      	add	sp, #12
 80057c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <rint+0x104>)
 80057ca:	4132      	asrs	r2, r6
 80057cc:	ea01 0702 	and.w	r7, r1, r2
 80057d0:	4307      	orrs	r7, r0
 80057d2:	d0f5      	beq.n	80057c0 <rint+0x70>
 80057d4:	0852      	lsrs	r2, r2, #1
 80057d6:	4011      	ands	r1, r2
 80057d8:	430c      	orrs	r4, r1
 80057da:	d00b      	beq.n	80057f4 <rint+0xa4>
 80057dc:	ea23 0202 	bic.w	r2, r3, r2
 80057e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057e4:	2e13      	cmp	r6, #19
 80057e6:	fa43 f306 	asr.w	r3, r3, r6
 80057ea:	bf0c      	ite	eq
 80057ec:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80057f0:	2400      	movne	r4, #0
 80057f2:	4313      	orrs	r3, r2
 80057f4:	4916      	ldr	r1, [pc, #88]	; (8005850 <rint+0x100>)
 80057f6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80057fa:	4622      	mov	r2, r4
 80057fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005800:	4620      	mov	r0, r4
 8005802:	4629      	mov	r1, r5
 8005804:	f7fa fd0e 	bl	8000224 <__adddf3>
 8005808:	e9cd 0100 	strd	r0, r1, [sp]
 800580c:	4622      	mov	r2, r4
 800580e:	462b      	mov	r3, r5
 8005810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005814:	f7fa fd04 	bl	8000220 <__aeabi_dsub>
 8005818:	e7d2      	b.n	80057c0 <rint+0x70>
 800581a:	2e33      	cmp	r6, #51	; 0x33
 800581c:	dd07      	ble.n	800582e <rint+0xde>
 800581e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005822:	d1cd      	bne.n	80057c0 <rint+0x70>
 8005824:	ee10 2a10 	vmov	r2, s0
 8005828:	f7fa fcfc 	bl	8000224 <__adddf3>
 800582c:	e7c8      	b.n	80057c0 <rint+0x70>
 800582e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8005832:	f04f 32ff 	mov.w	r2, #4294967295
 8005836:	40f2      	lsrs	r2, r6
 8005838:	4210      	tst	r0, r2
 800583a:	d0c1      	beq.n	80057c0 <rint+0x70>
 800583c:	0852      	lsrs	r2, r2, #1
 800583e:	4210      	tst	r0, r2
 8005840:	bf1f      	itttt	ne
 8005842:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005846:	ea20 0202 	bicne.w	r2, r0, r2
 800584a:	4134      	asrne	r4, r6
 800584c:	4314      	orrne	r4, r2
 800584e:	e7d1      	b.n	80057f4 <rint+0xa4>
 8005850:	080059c8 	.word	0x080059c8
 8005854:	000fffff 	.word	0x000fffff

08005858 <scalbn>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	ec55 4b10 	vmov	r4, r5, d0
 800585e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005862:	4606      	mov	r6, r0
 8005864:	462b      	mov	r3, r5
 8005866:	b9aa      	cbnz	r2, 8005894 <scalbn+0x3c>
 8005868:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800586c:	4323      	orrs	r3, r4
 800586e:	d03b      	beq.n	80058e8 <scalbn+0x90>
 8005870:	4b31      	ldr	r3, [pc, #196]	; (8005938 <scalbn+0xe0>)
 8005872:	4629      	mov	r1, r5
 8005874:	2200      	movs	r2, #0
 8005876:	ee10 0a10 	vmov	r0, s0
 800587a:	f7fa fe89 	bl	8000590 <__aeabi_dmul>
 800587e:	4b2f      	ldr	r3, [pc, #188]	; (800593c <scalbn+0xe4>)
 8005880:	429e      	cmp	r6, r3
 8005882:	4604      	mov	r4, r0
 8005884:	460d      	mov	r5, r1
 8005886:	da12      	bge.n	80058ae <scalbn+0x56>
 8005888:	a327      	add	r3, pc, #156	; (adr r3, 8005928 <scalbn+0xd0>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f7fa fe7f 	bl	8000590 <__aeabi_dmul>
 8005892:	e009      	b.n	80058a8 <scalbn+0x50>
 8005894:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005898:	428a      	cmp	r2, r1
 800589a:	d10c      	bne.n	80058b6 <scalbn+0x5e>
 800589c:	ee10 2a10 	vmov	r2, s0
 80058a0:	4620      	mov	r0, r4
 80058a2:	4629      	mov	r1, r5
 80058a4:	f7fa fcbe 	bl	8000224 <__adddf3>
 80058a8:	4604      	mov	r4, r0
 80058aa:	460d      	mov	r5, r1
 80058ac:	e01c      	b.n	80058e8 <scalbn+0x90>
 80058ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80058b2:	460b      	mov	r3, r1
 80058b4:	3a36      	subs	r2, #54	; 0x36
 80058b6:	4432      	add	r2, r6
 80058b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80058bc:	428a      	cmp	r2, r1
 80058be:	dd0b      	ble.n	80058d8 <scalbn+0x80>
 80058c0:	ec45 4b11 	vmov	d1, r4, r5
 80058c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005930 <scalbn+0xd8>
 80058c8:	f000 f83c 	bl	8005944 <copysign>
 80058cc:	a318      	add	r3, pc, #96	; (adr r3, 8005930 <scalbn+0xd8>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	ec51 0b10 	vmov	r0, r1, d0
 80058d6:	e7da      	b.n	800588e <scalbn+0x36>
 80058d8:	2a00      	cmp	r2, #0
 80058da:	dd08      	ble.n	80058ee <scalbn+0x96>
 80058dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80058e8:	ec45 4b10 	vmov	d0, r4, r5
 80058ec:	bd70      	pop	{r4, r5, r6, pc}
 80058ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80058f2:	da0d      	bge.n	8005910 <scalbn+0xb8>
 80058f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80058f8:	429e      	cmp	r6, r3
 80058fa:	ec45 4b11 	vmov	d1, r4, r5
 80058fe:	dce1      	bgt.n	80058c4 <scalbn+0x6c>
 8005900:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005928 <scalbn+0xd0>
 8005904:	f000 f81e 	bl	8005944 <copysign>
 8005908:	a307      	add	r3, pc, #28	; (adr r3, 8005928 <scalbn+0xd0>)
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	e7e0      	b.n	80058d2 <scalbn+0x7a>
 8005910:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005914:	3236      	adds	r2, #54	; 0x36
 8005916:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800591a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800591e:	4620      	mov	r0, r4
 8005920:	4629      	mov	r1, r5
 8005922:	2200      	movs	r2, #0
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <scalbn+0xe8>)
 8005926:	e7b2      	b.n	800588e <scalbn+0x36>
 8005928:	c2f8f359 	.word	0xc2f8f359
 800592c:	01a56e1f 	.word	0x01a56e1f
 8005930:	8800759c 	.word	0x8800759c
 8005934:	7e37e43c 	.word	0x7e37e43c
 8005938:	43500000 	.word	0x43500000
 800593c:	ffff3cb0 	.word	0xffff3cb0
 8005940:	3c900000 	.word	0x3c900000

08005944 <copysign>:
 8005944:	ec51 0b10 	vmov	r0, r1, d0
 8005948:	ee11 0a90 	vmov	r0, s3
 800594c:	ee10 2a10 	vmov	r2, s0
 8005950:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005954:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005958:	ea41 0300 	orr.w	r3, r1, r0
 800595c:	ec43 2b10 	vmov	d0, r2, r3
 8005960:	4770      	bx	lr
	...

08005964 <_init>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr

08005970 <_fini>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr
