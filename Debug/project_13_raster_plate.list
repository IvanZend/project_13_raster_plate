
project_13_raster_plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d94  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f7c  08003f7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f84  08003f84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000010  08003f98  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08003f98  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e03  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d95  00000000  00000000  00030e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  00032bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00033bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001daa8  00000000  00000000  00034aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b4dd  00000000  00000000  00052548  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5b11  00000000  00000000  0005da25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  001235b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003f54 	.word	0x08003f54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003f54 	.word	0x08003f54

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 fb03 	bl	8001b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f80b 	bl	800053a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f950 	bl	80007c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000528:	f000 f8b2 	bl	8000690 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 f8fe 	bl	800072c <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000530:	f000 f868 	bl	8000604 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  device_init();
 8000534:	f000 fad2 	bl	8000adc <device_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x20>

0800053a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b0a4      	sub	sp, #144	; 0x90
 800053e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000544:	2238      	movs	r2, #56	; 0x38
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f003 fcfb 	bl	8003f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055e:	463b      	mov	r3, r7
 8000560:	2244      	movs	r2, #68	; 0x44
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f003 fced 	bl	8003f44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800056a:	2000      	movs	r0, #0
 800056c:	f001 ffbe 	bl	80024ec <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000574:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000578:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	2303      	movs	r3, #3
 8000580:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000586:	2314      	movs	r3, #20
 8000588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 f856 	bl	8002654 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005ae:	f000 f989 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fb59 	bl	8002c84 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d8:	f000 f974 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fd2e 	bl	800304c <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f6:	f000 f965 	bl	80008c4 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3790      	adds	r7, #144	; 0x90
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_FDCAN1_Init+0x84>)
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <MX_FDCAN1_Init+0x88>)
 800060c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_FDCAN1_Init+0x84>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000622:	2200      	movs	r2, #0
 8000624:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000628:	2200      	movs	r2, #0
 800062a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_FDCAN1_Init+0x84>)
 800062e:	2200      	movs	r2, #0
 8000630:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000634:	2201      	movs	r2, #1
 8000636:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_FDCAN1_Init+0x84>)
 800063a:	2201      	movs	r2, #1
 800063c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000640:	2202      	movs	r2, #2
 8000642:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000646:	2202      	movs	r2, #2
 8000648:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_FDCAN1_Init+0x84>)
 800064c:	2201      	movs	r2, #1
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000652:	2201      	movs	r2, #1
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000658:	2201      	movs	r2, #1
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_FDCAN1_Init+0x84>)
 800065e:	2201      	movs	r2, #1
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_FDCAN1_Init+0x84>)
 800066a:	2200      	movs	r2, #0
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_FDCAN1_Init+0x84>)
 8000676:	f001 fbd7 	bl	8001e28 <HAL_FDCAN_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000680:	f000 f920 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000010c 	.word	0x2000010c
 800068c:	40006400 	.word	0x40006400

08000690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_TIM2_Init+0x94>)
 80006b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_TIM2_Init+0x94>)
 80006b8:	229f      	movs	r2, #159	; 0x9f
 80006ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_TIM2_Init+0x94>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_TIM2_Init+0x94>)
 80006c4:	4a18      	ldr	r2, [pc, #96]	; (8000728 <MX_TIM2_Init+0x98>)
 80006c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_TIM2_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_TIM2_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_TIM2_Init+0x94>)
 80006d6:	f002 fea9 	bl	800342c <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006e0:	f000 f8f0 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_TIM2_Init+0x94>)
 80006f2:	f003 f90b 	bl	800390c <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 f8e2 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000700:	2320      	movs	r3, #32
 8000702:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM2_Init+0x94>)
 800070e:	f003 fb2d 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000718:	f000 f8d4 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000194 	.word	0x20000194
 8000728:	0001869f 	.word	0x0001869f

0800072c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_TIM3_Init+0x94>)
 800074c:	4a1d      	ldr	r2, [pc, #116]	; (80007c4 <MX_TIM3_Init+0x98>)
 800074e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_TIM3_Init+0x94>)
 8000752:	2207      	movs	r2, #7
 8000754:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_TIM3_Init+0x94>)
 8000758:	2210      	movs	r2, #16
 800075a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_TIM3_Init+0x94>)
 800075e:	2263      	movs	r2, #99	; 0x63
 8000760:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_TIM3_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_TIM3_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800076e:	4814      	ldr	r0, [pc, #80]	; (80007c0 <MX_TIM3_Init+0x94>)
 8000770:	f002 fe5c 	bl	800342c <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f8a3 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_TIM3_Init+0x94>)
 800078c:	f003 f8be 	bl	800390c <HAL_TIM_ConfigClockSource>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f895 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800079a:	2320      	movs	r3, #32
 800079c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_TIM3_Init+0x94>)
 80007a8:	f003 fae0 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007b2:	f000 f887 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000048 	.word	0x20000048
 80007c4:	40000400 	.word	0x40000400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007de:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a35      	ldr	r2, [pc, #212]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0320 	and.w	r3, r3, #32
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a2f      	ldr	r2, [pc, #188]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xf0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2138      	movs	r1, #56	; 0x38
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f001 fe45 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 8000832:	2200      	movs	r2, #0
 8000834:	f240 11f9 	movw	r1, #505	; 0x1f9
 8000838:	4820      	ldr	r0, [pc, #128]	; (80008bc <MX_GPIO_Init+0xf4>)
 800083a:	f001 fe3f 	bl	80024bc <HAL_GPIO_WritePin>
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ON_TOMO_Pin */
  GPIO_InitStruct.Pin = ON_TOMO_Pin;
 800083e:	2302      	movs	r3, #2
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ON_TOMO_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	481b      	ldr	r0, [pc, #108]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000852:	f001 fc99 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONFIG_3_Pin CONFIG_2_Pin CONFIG_1_Pin BUCKY_CALL_Pin
                           GRID_BUTTON_Pin GRID_END_POINT_Pin GRID_120_DETECT_Pin GRID_180_DETECT_Pin
                           PUSHBUTTON_BUCKYBRAKE_Pin */
  GPIO_InitStruct.Pin = CONFIG_3_Pin|CONFIG_2_Pin|CONFIG_1_Pin|BUCKY_CALL_Pin
 8000856:	f248 73c7 	movw	r3, #34759	; 0x87c7
 800085a:	60fb      	str	r3, [r7, #12]
                          |GRID_BUTTON_Pin|GRID_END_POINT_Pin|GRID_120_DETECT_Pin|GRID_180_DETECT_Pin
                          |PUSHBUTTON_BUCKYBRAKE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f001 fc8b 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRID_120_Pin GRID_180_Pin BUCKY_READY_Pin */
  GPIO_InitStruct.Pin = GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin;
 8000872:	2338      	movs	r3, #56	; 0x38
 8000874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 fc7c 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_CENTERING_Pin BUCKY_BRAKE_Pin RESET_Pin ENABLE_Pin
                           CURRENT_WIND_Pin STEP_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 8000890:	f240 13f9 	movw	r3, #505	; 0x1f9
 8000894:	60fb      	str	r3, [r7, #12]
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xf4>)
 80008aa:	f001 fc6d 	bl	8002188 <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3720      	adds	r7, #32
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000400 	.word	0x48000400
 80008c0:	48001400 	.word	0x48001400

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090a:	f001 fe93 	bl	8002634 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a18      	ldr	r2, [pc, #96]	; (800099c <HAL_FDCAN_MspInit+0x80>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d129      	bne.n	8000992 <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_FDCAN_MspInit+0x84>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_FDCAN_MspInit+0x84>)
 8000944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_FDCAN_MspInit+0x84>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_FDCAN_MspInit+0x84>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_FDCAN_MspInit+0x84>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_FDCAN_MspInit+0x84>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800096e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000980:	2309      	movs	r3, #9
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f001 fbfb 	bl	8002188 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40006400 	.word	0x40006400
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b4:	d114      	bne.n	80009e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_TIM_Base_MspInit+0x78>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_TIM_Base_MspInit+0x78>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_TIM_Base_MspInit+0x78>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2102      	movs	r1, #2
 80009d2:	201c      	movs	r0, #28
 80009d4:	f001 f9f3 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009d8:	201c      	movs	r0, #28
 80009da:	f001 fa0a 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009de:	e018      	b.n	8000a12 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_TIM_Base_MspInit+0x7c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d113      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_TIM_Base_MspInit+0x78>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <HAL_TIM_Base_MspInit+0x78>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6593      	str	r3, [r2, #88]	; 0x58
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_TIM_Base_MspInit+0x78>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2101      	movs	r1, #1
 8000a06:	201d      	movs	r0, #29
 8000a08:	f001 f9d9 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a0c:	201d      	movs	r0, #29
 8000a0e:	f001 f9f0 	bl	8001df2 <HAL_NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40000400 	.word	0x40000400

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f001 f8a8 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <TIM2_IRQHandler+0x14>)
 8000a86:	f002 fdc2 	bl	800360e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  signals_check_timer_interrupt_handler();
 8000a8a:	f000 f9fd 	bl	8000e88 <signals_check_timer_interrupt_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000194 	.word	0x20000194

08000a98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <TIM3_IRQHandler+0x14>)
 8000a9e:	f002 fdb6 	bl	800360e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  motor_timer_interrupt_handler();
 8000aa2:	f000 fefd 	bl	80018a0 <motor_timer_interrupt_handler>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000048 	.word	0x20000048

08000ab0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <SystemInit+0x28>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <SystemInit+0x28>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SystemInit+0x28>)
 8000ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aca:	609a      	str	r2, [r3, #8]
#endif
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <device_init>:
/*
 * Инициализация устройства
 */

void device_init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	device_current_state = DEVICE_STARTS;										// выставляем состояние устройства: устройство стартует
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <device_init+0x34>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	pins_init();																// инициализируем сигналы (указываем пины и порты, инициализируем единый массив сигналов)
 8000ae6:	f000 f823 	bl	8000b30 <pins_init>
	output_signals_state_init(LOGIC_LEVEL_LOW);									// выставляем состояние выходных сигналов
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f982 	bl	8000df4 <output_signals_state_init>
	input_signals_state_update();												// считываем состояние входных сигналов
 8000af0:	f000 f94a 	bl	8000d88 <input_signals_state_update>
	device_modules_init();														// инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1, DIP-переключатели)
 8000af4:	f000 f87c 	bl	8000bf0 <device_modules_init>
	buttons_state_update();														// обновляем состояние аппаратных модулей
 8000af8:	f000 f9cc 	bl	8000e94 <buttons_state_update>
	enable_pin_set();															// навсегда выставляем "1" на входе ШД "Enable"
 8000afc:	f000 f80c 	bl	8000b18 <enable_pin_set>
	error_code = NO_ERROR;														// выставляем отсутствие ошибки
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <device_init+0x38>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	signals_check_timer_interrupts_start();										// запускаем таймер считывания состояний сигналов
 8000b06:	f000 f9b5 	bl	8000e74 <signals_check_timer_interrupts_start>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000a8 	.word	0x200000a8
 8000b14:	200001f8 	.word	0x200001f8

08000b18 <enable_pin_set>:

void enable_pin_set(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	if (ENABLE_PIN_LOGIC_LEVEL_INVERTED)
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_LOW);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <enable_pin_set+0x14>)
 8000b22:	f000 f9e5 	bl	8000ef0 <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_HIGH);
	}
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	48000400 	.word	0x48000400

08000b30 <pins_init>:

/*
 * Определяем входные пины, исходя из инициализации, созданной конфигуратором пинов
 */
void pins_init(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <pins_init+0xa0>)
 8000b36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b3a:	60da      	str	r2, [r3, #12]
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.pin_number = GRID_180_DETECT_Pin;					// пин датчика Холла (растр типа 180)
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <pins_init+0xa0>)
 8000b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b42:	821a      	strh	r2, [r3, #16]

	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <pins_init+0xa0>)
 8000b46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b4a:	601a      	str	r2, [r3, #0]
	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.pin_number = GRID_120_DETECT_Pin;					// пин датчика Холла (растр типа 120)
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <pins_init+0xa0>)
 8000b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b52:	809a      	strh	r2, [r3, #4]

	grid_supply_button.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <pins_init+0xa4>)
 8000b56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b5a:	601a      	str	r2, [r3, #0]
	grid_supply_button.button_signal.signal_pin.pin_number = GRID_BUTTON_Pin;							// пин кнопки подачи растра
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <pins_init+0xa4>)
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	809a      	strh	r2, [r3, #4]

	ON_TOMO_IN_signal.signal_pin.GPIO_port_pointer = ON_TOMO_GPIO_Port;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <pins_init+0xa8>)
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <pins_init+0xac>)
 8000b66:	601a      	str	r2, [r3, #0]
	ON_TOMO_IN_signal.signal_pin.pin_number = ON_TOMO_Pin;												// пин сигнала ON_TOMO
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <pins_init+0xa8>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	809a      	strh	r2, [r3, #4]

	BUCKY_CALL_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <pins_init+0xb0>)
 8000b70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b74:	601a      	str	r2, [r3, #0]
	BUCKY_CALL_IN_signal.signal_pin.pin_number = BUCKY_CALL_Pin;										// пин сигнала BUCKYCALL
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <pins_init+0xb0>)
 8000b78:	2240      	movs	r2, #64	; 0x40
 8000b7a:	809a      	strh	r2, [r3, #4]

	pushbutton_buckybrake.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <pins_init+0xb4>)
 8000b7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b82:	601a      	str	r2, [r3, #0]
	pushbutton_buckybrake.button_signal.signal_pin.pin_number = PUSHBUTTON_BUCKYBRAKE_Pin;				// пин кнопки тормоза кассетоприёмника
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <pins_init+0xb4>)
 8000b86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b8a:	809a      	strh	r2, [r3, #4]

	limit_switch.GRID_END_POINT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <pins_init+0xb8>)
 8000b8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b92:	601a      	str	r2, [r3, #0]
	limit_switch.GRID_END_POINT_IN_signal.signal_pin.pin_number = GRID_END_POINT_Pin;					// пин концевика
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <pins_init+0xb8>)
 8000b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9a:	809a      	strh	r2, [r3, #4]

	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <pins_init+0xbc>)
 8000b9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ba2:	601a      	str	r2, [r3, #0]
	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.pin_number = CONFIG_1_Pin;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <pins_init+0xbc>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	809a      	strh	r2, [r3, #4]

	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <pins_init+0xbc>)
 8000bac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bb0:	60da      	str	r2, [r3, #12]
	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.pin_number = CONFIG_2_Pin;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <pins_init+0xbc>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	821a      	strh	r2, [r3, #16]

	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <pins_init+0xbc>)
 8000bba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bbe:	619a      	str	r2, [r3, #24]
	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.pin_number = CONFIG_3_Pin;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <pins_init+0xbc>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	839a      	strh	r2, [r3, #28]
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	20000170 	.word	0x20000170
 8000bd4:	20000094 	.word	0x20000094
 8000bd8:	200001fc 	.word	0x200001fc
 8000bdc:	48001400 	.word	0x48001400
 8000be0:	200000b8 	.word	0x200000b8
 8000be4:	200000f8 	.word	0x200000f8
 8000be8:	200000c4 	.word	0x200000c4
 8000bec:	200000d0 	.word	0x200000d0

08000bf0 <device_modules_init>:

/*
 * Инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1)
 */
void device_modules_init(void)
{
 8000bf0:	b490      	push	{r4, r7}
 8000bf2:	af00      	add	r7, sp, #0
	motor.step_impulses_distance_from_limit_switch = STEP_DISTANCE_INIT_VALUE;			// Задаём условное начальное расстояние от концевика, отличное от нуля. Чтобы мотор доехал до концевика и начал отсчёт.
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <device_modules_init+0xb8>)
 8000bf6:	220a      	movs	r2, #10
 8000bf8:	601a      	str	r2, [r3, #0]
	motor.limit_emergency_counter = 0;													// обнуляем аварийный счётчик шагов
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <device_modules_init+0xb8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
	motor.motor_move_direction = MOVE_TO_COORD_END;										// задаём направление движения: двигаться ОТ начального положения
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <device_modules_init+0xb8>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	721a      	strb	r2, [r3, #8]
	motor.step_pin_current_phase = STEP_LOW_PHASE;										// задаём фазу сигнала STEP
 8000c06:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <device_modules_init+0xb8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	725a      	strb	r2, [r3, #9]
	motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;					// даём двигателю задание занять начальное положение
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <device_modules_init+0xb8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	729a      	strb	r2, [r3, #10]
	motor.motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;							// выставляем флаг, что мотор находится в движении
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <device_modules_init+0xb8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	72da      	strb	r2, [r3, #11]
	motor.exposition_movement_direction = EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION;	// задаём начальное направление циклического движения при экспозиции
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <device_modules_init+0xb8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	731a      	strb	r2, [r3, #12]
	max_speed_mks_per_step_impulse = MAX_SPEED_MKS_PER_STEP_IMPULSE_MODE_00;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <device_modules_init+0xbc>)
 8000c20:	226b      	movs	r2, #107	; 0x6b
 8000c22:	601a      	str	r2, [r3, #0]
	acceleration_time_ms = ACCELERATION_TIME_MS_MODE_00;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <device_modules_init+0xc0>)
 8000c26:	2228      	movs	r2, #40	; 0x28
 8000c28:	601a      	str	r2, [r3, #0]
	grid_supply_button.button_released_default_signal_level = LOGIC_LEVEL_LOW;			// выставляем флаг, что при отпущенной кнопке на пине "1"
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <device_modules_init+0xc4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	731a      	strb	r2, [r3, #12]
	grid_supply_button.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <device_modules_init+0xc4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
	ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;											// выставляем флаг, что сигнала ON_TOMO не было
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <device_modules_init+0xc8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	bucky_ready_delay_counter = 0;														// обнуляем счётчик шагов, после которых выставляем BUCKY_READY в "1"
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <device_modules_init+0xcc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
	pushbutton_buckybrake.button_released_default_signal_level = LOGIC_LEVEL_LOW;		// выставляем флаг, что при отпущенной кнопке на пине "1"
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <device_modules_init+0xd0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	731a      	strb	r2, [r3, #12]
	pushbutton_buckybrake.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <device_modules_init+0xd0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
	ticks_before_next_step_counter = 0;
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <device_modules_init+0xd4>)
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	f04f 0400 	mov.w	r4, #0
 8000c58:	e9c2 3400 	strd	r3, r4, [r2]
	ticks_since_start_movement_counter = 0;
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <device_modules_init+0xd8>)
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	f04f 0400 	mov.w	r4, #0
 8000c66:	e9c2 3400 	strd	r3, r4, [r2]
	step_impulses_for_acceleration_counter = 0;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <device_modules_init+0xdc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
	step_impulses_since_start_movement_counter = 0;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <device_modules_init+0xe0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
	ticks_for_acceleration_counter = 0;
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <device_modules_init+0xe4>)
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	f04f 0400 	mov.w	r4, #0
 8000c80:	e9c2 3400 	strd	r3, r4, [r2]
	speed_mks_per_step_impulse = 0;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <device_modules_init+0xe8>)
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	f04f 0400 	mov.w	r4, #0
 8000c8e:	e9c2 3400 	strd	r3, r4, [r2]
	linear_acceleration_coefficient = 0;
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <device_modules_init+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
	quadratic_acceleration_coefficient = 0;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <device_modules_init+0xf0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc90      	pop	{r4, r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200001e0 	.word	0x200001e0
 8000cac:	200000b0 	.word	0x200000b0
 8000cb0:	200000b4 	.word	0x200000b4
 8000cb4:	20000094 	.word	0x20000094
 8000cb8:	200000f4 	.word	0x200000f4
 8000cbc:	20000040 	.word	0x20000040
 8000cc0:	200000f8 	.word	0x200000f8
 8000cc4:	20000188 	.word	0x20000188
 8000cc8:	20000038 	.word	0x20000038
 8000ccc:	20000044 	.word	0x20000044
 8000cd0:	20000030 	.word	0x20000030
 8000cd4:	200001f0 	.word	0x200001f0
 8000cd8:	20000208 	.word	0x20000208
 8000cdc:	200000ac 	.word	0x200000ac
 8000ce0:	20000190 	.word	0x20000190

08000ce4 <check_input_signals>:

/*
 * Обновляем состояние входных сигналов и аппаратных модулей
 */
void check_input_signals(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	input_signals_state_update();					// считываем состояние входов, обновляем их состояние в объекте устройства
 8000ce8:	f000 f84e 	bl	8000d88 <input_signals_state_update>
	buttons_state_update();							// обновляем состояние аппаратных модулей
 8000cec:	f000 f8d2 	bl	8000e94 <buttons_state_update>
	device_error_check();							// проверяем текущее состояние устройства на наличие ошибок
 8000cf0:	f000 f974 	bl	8000fdc <device_error_check>
	read_input_signals_and_set_device_state();		// изменяем состояние устройства в зависимости от входных сигналов
 8000cf4:	f000 fa12 	bl	800111c <read_input_signals_and_set_device_state>
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <dip_switch_state_update>:

void dip_switch_state_update(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <dip_switch_state_update+0x80>)
 8000d02:	7a1b      	ldrb	r3, [r3, #8]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d109      	bne.n	8000d1c <dip_switch_state_update+0x20>
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <dip_switch_state_update+0x80>)
 8000d0a:	7d1b      	ldrb	r3, [r3, #20]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <dip_switch_state_update+0x20>
	{
		max_speed_mks_per_step_impulse = MAX_SPEED_MKS_PER_STEP_IMPULSE_MODE_00;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <dip_switch_state_update+0x84>)
 8000d12:	226b      	movs	r2, #107	; 0x6b
 8000d14:	601a      	str	r2, [r3, #0]
		acceleration_time_ms = ACCELERATION_TIME_MS_MODE_00;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <dip_switch_state_update+0x88>)
 8000d18:	2228      	movs	r2, #40	; 0x28
 8000d1a:	601a      	str	r2, [r3, #0]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <dip_switch_state_update+0x80>)
 8000d1e:	7a1b      	ldrb	r3, [r3, #8]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d109      	bne.n	8000d38 <dip_switch_state_update+0x3c>
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <dip_switch_state_update+0x80>)
 8000d26:	7d1b      	ldrb	r3, [r3, #20]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d105      	bne.n	8000d38 <dip_switch_state_update+0x3c>
	{
		max_speed_mks_per_step_impulse = MAX_SPEED_MKS_PER_STEP_IMPULSE_MODE_01;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <dip_switch_state_update+0x84>)
 8000d2e:	227e      	movs	r2, #126	; 0x7e
 8000d30:	601a      	str	r2, [r3, #0]
		acceleration_time_ms = ACCELERATION_TIME_MS_MODE_01;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <dip_switch_state_update+0x88>)
 8000d34:	2220      	movs	r2, #32
 8000d36:	601a      	str	r2, [r3, #0]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <dip_switch_state_update+0x80>)
 8000d3a:	7a1b      	ldrb	r3, [r3, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d109      	bne.n	8000d54 <dip_switch_state_update+0x58>
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <dip_switch_state_update+0x80>)
 8000d42:	7d1b      	ldrb	r3, [r3, #20]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d105      	bne.n	8000d54 <dip_switch_state_update+0x58>
	{
		max_speed_mks_per_step_impulse = MAX_SPEED_MKS_PER_STEP_IMPULSE_MODE_10;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <dip_switch_state_update+0x84>)
 8000d4a:	225e      	movs	r2, #94	; 0x5e
 8000d4c:	601a      	str	r2, [r3, #0]
		acceleration_time_ms = ACCELERATION_TIME_MS_MODE_10;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <dip_switch_state_update+0x88>)
 8000d50:	222a      	movs	r2, #42	; 0x2a
 8000d52:	601a      	str	r2, [r3, #0]
	}
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <dip_switch_state_update+0x80>)
 8000d56:	7a1b      	ldrb	r3, [r3, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <dip_switch_state_update+0x74>
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <dip_switch_state_update+0x80>)
 8000d5e:	7d1b      	ldrb	r3, [r3, #20]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d105      	bne.n	8000d70 <dip_switch_state_update+0x74>
	{
		max_speed_mks_per_step_impulse = MAX_SPEED_MKS_PER_STEP_IMPULSE_MODE_11;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <dip_switch_state_update+0x84>)
 8000d66:	223f      	movs	r2, #63	; 0x3f
 8000d68:	601a      	str	r2, [r3, #0]
		acceleration_time_ms = ACCELERATION_TIME_MS_MODE_11;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <dip_switch_state_update+0x88>)
 8000d6c:	2232      	movs	r2, #50	; 0x32
 8000d6e:	601a      	str	r2, [r3, #0]
	}
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000d0 	.word	0x200000d0
 8000d80:	200000b0 	.word	0x200000b0
 8000d84:	200000b4 	.word	0x200000b4

08000d88 <input_signals_state_update>:
/*
 * Опрашиваем состояние входных сигналов
 */

void input_signals_state_update(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	check_input_signal_state(&grid_sensor.GRID_180_DETECT_IN_signal);
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <input_signals_state_update+0x44>)
 8000d8e:	f000 f88f 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&grid_sensor.GRID_120_DETECT_IN_signal);
 8000d92:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <input_signals_state_update+0x48>)
 8000d94:	f000 f88c 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&grid_supply_button.button_signal);
 8000d98:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <input_signals_state_update+0x4c>)
 8000d9a:	f000 f889 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&ON_TOMO_IN_signal);
 8000d9e:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <input_signals_state_update+0x50>)
 8000da0:	f000 f886 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&BUCKY_CALL_IN_signal);
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <input_signals_state_update+0x54>)
 8000da6:	f000 f883 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&pushbutton_buckybrake.button_signal);
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <input_signals_state_update+0x58>)
 8000dac:	f000 f880 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&limit_switch.GRID_END_POINT_IN_signal);
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <input_signals_state_update+0x5c>)
 8000db2:	f000 f87d 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_1_IN_signal);
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <input_signals_state_update+0x60>)
 8000db8:	f000 f87a 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_2_IN_signal);
 8000dbc:	480b      	ldr	r0, [pc, #44]	; (8000dec <input_signals_state_update+0x64>)
 8000dbe:	f000 f877 	bl	8000eb0 <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_3_IN_signal);
 8000dc2:	480b      	ldr	r0, [pc, #44]	; (8000df0 <input_signals_state_update+0x68>)
 8000dc4:	f000 f874 	bl	8000eb0 <check_input_signal_state>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000017c 	.word	0x2000017c
 8000dd0:	20000170 	.word	0x20000170
 8000dd4:	20000094 	.word	0x20000094
 8000dd8:	200001fc 	.word	0x200001fc
 8000ddc:	200000b8 	.word	0x200000b8
 8000de0:	200000f8 	.word	0x200000f8
 8000de4:	200000c4 	.word	0x200000c4
 8000de8:	200000d0 	.word	0x200000d0
 8000dec:	200000dc 	.word	0x200000dc
 8000df0:	200000e8 	.word	0x200000e8

08000df4 <output_signals_state_init>:
/*
 * Выставляем одно состояние на всех выходных пинах
 */

void output_signals_state_init(SignalLogicLevel_EnumTypeDef signal_level_to_set)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, signal_level_to_set);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	461a      	mov	r2, r3
 8000e02:	2120      	movs	r1, #32
 8000e04:	481a      	ldr	r0, [pc, #104]	; (8000e70 <output_signals_state_init+0x7c>)
 8000e06:	f000 f873 	bl	8000ef0 <set_output_signal_state>
	set_output_signal_state(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, signal_level_to_set);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4817      	ldr	r0, [pc, #92]	; (8000e70 <output_signals_state_init+0x7c>)
 8000e12:	f000 f86d 	bl	8000ef0 <set_output_signal_state>
	set_output_signal_state(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, signal_level_to_set);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <output_signals_state_init+0x7c>)
 8000e20:	f000 f866 	bl	8000ef0 <set_output_signal_state>
	set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, signal_level_to_set);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	461a      	mov	r2, r3
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4811      	ldr	r0, [pc, #68]	; (8000e70 <output_signals_state_init+0x7c>)
 8000e2c:	f000 f860 	bl	8000ef0 <set_output_signal_state>
	set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, signal_level_to_set);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	461a      	mov	r2, r3
 8000e34:	2108      	movs	r1, #8
 8000e36:	480e      	ldr	r0, [pc, #56]	; (8000e70 <output_signals_state_init+0x7c>)
 8000e38:	f000 f85a 	bl	8000ef0 <set_output_signal_state>
	set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, signal_level_to_set);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2120      	movs	r1, #32
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f000 f853 	bl	8000ef0 <set_output_signal_state>
	set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, signal_level_to_set);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	2108      	movs	r1, #8
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f000 f84c 	bl	8000ef0 <set_output_signal_state>
	set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, signal_level_to_set);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 f845 	bl	8000ef0 <set_output_signal_state>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	48000400 	.word	0x48000400

08000e74 <signals_check_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым будем опрашивать состояние входных сигналов
 */
void signals_check_timer_interrupts_start(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(SIGNALS_CHECK_TIMER_POINTER);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <signals_check_timer_interrupts_start+0x10>)
 8000e7a:	f002 fb2f 	bl	80034dc <HAL_TIM_Base_Start_IT>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000194 	.word	0x20000194

08000e88 <signals_check_timer_interrupt_handler>:

/*
 * ОБработчик прерываний таймера, отвечающего за опрос входных сигналов
 */
void signals_check_timer_interrupt_handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN);
	check_input_signals();
 8000e8c:	f7ff ff2a 	bl	8000ce4 <check_input_signals>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <buttons_state_update>:

/*
 * Обновляем состояние кнопок
 */
void buttons_state_update(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	check_and_update_button_state(&grid_supply_button);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <buttons_state_update+0x14>)
 8000e9a:	f000 f845 	bl	8000f28 <check_and_update_button_state>
	check_and_update_button_state(&pushbutton_buckybrake);
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <buttons_state_update+0x18>)
 8000ea0:	f000 f842 	bl	8000f28 <check_and_update_button_state>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000094 	.word	0x20000094
 8000eac:	200000f8 	.word	0x200000f8

08000eb0 <check_input_signal_state>:

/*
 * Считывание и запись состояния входного пина
 */
void check_input_signal_state(InSignalAttributes_TypeDef* signal_to_check)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	GPIO_PinState current_logic_state = HAL_GPIO_ReadPin(signal_to_check->signal_pin.GPIO_port_pointer, signal_to_check->signal_pin.pin_number);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	889b      	ldrh	r3, [r3, #4]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	f001 fae2 	bl	800248c <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	73fb      	strb	r3, [r7, #15]

	switch (current_logic_state)
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <check_input_signal_state+0x30>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d000      	beq.n	8000ed8 <check_input_signal_state+0x28>
	{
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
		break;
	}
	}
}
 8000ed6:	e007      	b.n	8000ee8 <check_input_signal_state+0x38>
		signal_to_check->signal_logic_level = LOGIC_LEVEL_HIGH;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	721a      	strb	r2, [r3, #8]
		break;
 8000ede:	e003      	b.n	8000ee8 <check_input_signal_state+0x38>
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	721a      	strb	r2, [r3, #8]
		break;
 8000ee6:	bf00      	nop
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <set_output_signal_state>:

/*
 * Выставляем логическое состояние на выходном пине
 */
void set_output_signal_state(GPIO_TypeDef* GPIO_port_pointer, uint16_t pin_number, SignalLogicLevel_EnumTypeDef requied_logic_level)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
	if (requied_logic_level == LOGIC_LEVEL_LOW)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d106      	bne.n	8000f14 <set_output_signal_state+0x24>
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_RESET);
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f001 fad5 	bl	80024bc <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
	}
}
 8000f12:	e005      	b.n	8000f20 <set_output_signal_state+0x30>
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f001 face 	bl	80024bc <HAL_GPIO_WritePin>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <check_and_update_button_state>:

/*
 * Проверяем состояние кнопки
 */
void check_and_update_button_state(ButtonAttributes_TypeDef* button_to_check)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if (button_to_check->button_released_default_signal_level == LOGIC_LEVEL_LOW)						// если при отпущенной кнопке логическое состояние пина "0"
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7b1b      	ldrb	r3, [r3, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d125      	bne.n	8000f84 <check_and_update_button_state+0x5c>
	{
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7a1b      	ldrb	r3, [r3, #8]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d11a      	bne.n	8000f76 <check_and_update_button_state+0x4e>
		{
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7b5b      	ldrb	r3, [r3, #13]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d006      	beq.n	8000f56 <check_and_update_button_state+0x2e>
			{
				if (button_to_check->button_pressing_duration_counter >= BUTTON_BOUNCE_FILTER_COUNTS)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d902      	bls.n	8000f56 <check_and_update_button_state+0x2e>
				{
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	735a      	strb	r2, [r3, #13]
				}
			}
			if (button_to_check->button_pressing_duration_counter >= BUTTON_LONG_PRESS_COUNTS)			// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b13      	cmp	r3, #19
 8000f5c:	d905      	bls.n	8000f6a <check_and_update_button_state+0x42>
			{
				button_to_check->button_pressing_duration_counter = BUTTON_LONG_PRESS_COUNTS;			// удерживаем счётчик от дальнейшего увеличения
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2214      	movs	r2, #20
 8000f62:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2202      	movs	r2, #2
 8000f68:	735a      	strb	r2, [r3, #13]
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
		}
	}
}
 8000f74:	e02b      	b.n	8000fce <check_and_update_button_state+0xa6>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	735a      	strb	r2, [r3, #13]
}
 8000f82:	e024      	b.n	8000fce <check_and_update_button_state+0xa6>
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7a1b      	ldrb	r3, [r3, #8]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d106      	bne.n	8000f9a <check_and_update_button_state+0x72>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	735a      	strb	r2, [r3, #13]
}
 8000f98:	e019      	b.n	8000fce <check_and_update_button_state+0xa6>
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7b5b      	ldrb	r3, [r3, #13]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d006      	beq.n	8000fb0 <check_and_update_button_state+0x88>
				if (button_to_check->button_pressing_duration_counter >= BUTTON_BOUNCE_FILTER_COUNTS)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d902      	bls.n	8000fb0 <check_and_update_button_state+0x88>
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	735a      	strb	r2, [r3, #13]
			if (button_to_check->button_pressing_duration_counter >= BUTTON_LONG_PRESS_COUNTS)			// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	2b13      	cmp	r3, #19
 8000fb6:	d905      	bls.n	8000fc4 <check_and_update_button_state+0x9c>
				button_to_check->button_pressing_duration_counter = BUTTON_LONG_PRESS_COUNTS;			// удерживаем счётчик от дальнейшего увеличения
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2214      	movs	r2, #20
 8000fbc:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	735a      	strb	r2, [r3, #13]
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	611a      	str	r2, [r3, #16]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <device_error_check>:
/*
 * Проверка текущего состояния устройства на наличие ошибок
 */

void device_error_check(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	/*
	 * если определён тип растра 120 и 180 одновременно
	 */
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <device_error_check+0x4c>)
 8000fe2:	7a1b      	ldrb	r3, [r3, #8]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d109      	bne.n	8000ffc <device_error_check+0x20>
		(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <device_error_check+0x4c>)
 8000fea:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d105      	bne.n	8000ffc <device_error_check+0x20>
	{
		error_code = GRID_TYPE_ERROR;									// выставляем флаг ошибки типа растра
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <device_error_check+0x50>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_STANDBY;							// переключаем устройство в режим ожидания
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <device_error_check+0x54>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
	}
	if (motor.limit_emergency_counter >= EMERGENCY_STEP_IMPULSES_TO_LIMIT)		// если прошагали критическое количество шагов в сторону концевика
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <device_error_check+0x58>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f242 720f 	movw	r2, #9999	; 0x270f
 8001004:	4293      	cmp	r3, r2
 8001006:	dd09      	ble.n	800101c <device_error_check+0x40>
	{
		motor.limit_emergency_counter = EMERGENCY_STEP_IMPULSES_TO_LIMIT;		// удерживаем аварийный счётчик шагов от дальнейшего увеличения
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <device_error_check+0x58>)
 800100a:	f242 7210 	movw	r2, #10000	; 0x2710
 800100e:	605a      	str	r2, [r3, #4]
		error_code = LIMIT_SWITCH_ERROR;								// выставляем ошибку концевика (решаем, что концевик неисправен)
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <device_error_check+0x50>)
 8001012:	2202      	movs	r2, #2
 8001014:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_ERROR;							// переключаем устройство в состояние ошибки
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <device_error_check+0x54>)
 8001018:	2207      	movs	r2, #7
 800101a:	701a      	strb	r2, [r3, #0]
	}
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000170 	.word	0x20000170
 800102c:	200001f8 	.word	0x200001f8
 8001030:	200000a8 	.word	0x200000a8
 8001034:	200001e0 	.word	0x200001e0

08001038 <device_error_handler>:

/*
 * Обработчик ошибок
 */
void device_error_handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	switch (error_code)					// если код ошибки
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <device_error_handler+0xc4>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b04      	cmp	r3, #4
 8001042:	d858      	bhi.n	80010f6 <device_error_handler+0xbe>
 8001044:	a201      	add	r2, pc, #4	; (adr r2, 800104c <device_error_handler+0x14>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	08001061 	.word	0x08001061
 8001050:	08001069 	.word	0x08001069
 8001054:	080010e9 	.word	0x080010e9
 8001058:	080010b1 	.word	0x080010b1
 800105c:	080010c9 	.word	0x080010c9
	{
	case NO_ERROR:						// если нет ошибки
	{
		device_current_state = DEVICE_STANDBY;	// возвращаемся в состояние ожидания
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <device_error_handler+0xc8>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
		break;
 8001066:	e046      	b.n	80010f6 <device_error_handler+0xbe>
	}
	case GRID_TYPE_ERROR:				// если ошибка типа растра
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_120_OUT_PIN
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f7ff ff3e 	bl	8000ef0 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_180_OUT_PIN
 8001074:	2201      	movs	r2, #1
 8001076:	2110      	movs	r1, #16
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f7ff ff38 	bl	8000ef0 <set_output_signal_state>

		/*
		 * если отсутствует растр типа 120 и типа 180
		 */
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <device_error_handler+0xcc>)
 8001082:	7a1b      	ldrb	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d131      	bne.n	80010ec <device_error_handler+0xb4>
				(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <device_error_handler+0xcc>)
 800108a:	7d1b      	ldrb	r3, [r3, #20]
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 800108c:	2b00      	cmp	r3, #0
 800108e:	d12d      	bne.n	80010ec <device_error_handler+0xb4>
		{
			set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_120_OUT_PIN
 8001090:	2200      	movs	r2, #0
 8001092:	2108      	movs	r1, #8
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f7ff ff2a 	bl	8000ef0 <set_output_signal_state>
			set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_180_OUT_PIN
 800109c:	2200      	movs	r2, #0
 800109e:	2110      	movs	r1, #16
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f7ff ff24 	bl	8000ef0 <set_output_signal_state>
			error_code = NO_ERROR;																	// выставляем флаг отсутствия ошибки
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <device_error_handler+0xc4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010ae:	e01d      	b.n	80010ec <device_error_handler+0xb4>
	case STANDBY_MOVEMENT_ERROR:		// если ошибка движения в режиме ожидания
	{
		/*
		 * если была нажата какая-либо кнопка, выходим из состояния ошибки
		 */
		if ((grid_supply_button.button_current_state == BUTTON_SHORT_PRESS) || \
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <device_error_handler+0xd0>)
 80010b2:	7b5b      	ldrb	r3, [r3, #13]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d003      	beq.n	80010c0 <device_error_handler+0x88>
				(pushbutton_buckybrake.button_current_state == BUTTON_SHORT_PRESS))
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <device_error_handler+0xd4>)
 80010ba:	7b5b      	ldrb	r3, [r3, #13]
		if ((grid_supply_button.button_current_state == BUTTON_SHORT_PRESS) || \
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d117      	bne.n	80010f0 <device_error_handler+0xb8>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <device_error_handler+0xc4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010c6:	e013      	b.n	80010f0 <device_error_handler+0xb8>
	case ON_TOMO_BUCKY_CALL_ERROR:		// если ошибка сигнала ON_TOMO
	{
		/*
		 * если сигнал ON_TOMO в "0", и сигнал BUCKY_CALL в "0", и мотор завершил движение
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <device_error_handler+0xd8>)
 80010ca:	7a1b      	ldrb	r3, [r3, #8]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d111      	bne.n	80010f4 <device_error_handler+0xbc>
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <device_error_handler+0xdc>)
 80010d2:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10d      	bne.n	80010f4 <device_error_handler+0xbc>
			(motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED))
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <device_error_handler+0xe0>)
 80010da:	7adb      	ldrb	r3, [r3, #11]
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d109      	bne.n	80010f4 <device_error_handler+0xbc>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <device_error_handler+0xc4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010e6:	e005      	b.n	80010f4 <device_error_handler+0xbc>
		break;							// остаёмся в этом состоянии до перезагрузки
 80010e8:	bf00      	nop
 80010ea:	e004      	b.n	80010f6 <device_error_handler+0xbe>
		break;
 80010ec:	bf00      	nop
 80010ee:	e002      	b.n	80010f6 <device_error_handler+0xbe>
		break;
 80010f0:	bf00      	nop
 80010f2:	e000      	b.n	80010f6 <device_error_handler+0xbe>
		break;
 80010f4:	bf00      	nop
	}
	}
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001f8 	.word	0x200001f8
 8001100:	200000a8 	.word	0x200000a8
 8001104:	20000170 	.word	0x20000170
 8001108:	20000094 	.word	0x20000094
 800110c:	200000f8 	.word	0x200000f8
 8001110:	200001fc 	.word	0x200001fc
 8001114:	200000b8 	.word	0x200000b8
 8001118:	200001e0 	.word	0x200001e0

0800111c <read_input_signals_and_set_device_state>:

/*
 * Изменяем состояние устройства в зависимости от входных сигналов
 */
void read_input_signals_and_set_device_state(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	switch (device_current_state)													// если состояние устройства
 8001120:	4b9f      	ldr	r3, [pc, #636]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b07      	cmp	r3, #7
 8001126:	f200 8139 	bhi.w	800139c <read_input_signals_and_set_device_state+0x280>
 800112a:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <read_input_signals_and_set_device_state+0x14>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	08001151 	.word	0x08001151
 8001134:	0800116f 	.word	0x0800116f
 8001138:	080012cf 	.word	0x080012cf
 800113c:	080012ab 	.word	0x080012ab
 8001140:	08001367 	.word	0x08001367
 8001144:	08001377 	.word	0x08001377
 8001148:	08001357 	.word	0x08001357
 800114c:	08001163 	.word	0x08001163
	{
	case DEVICE_STARTS:																// если устройство стартует
	{
		device_current_state = DEVICE_RETURN_TO_INITIAL_STATE;						// выставляем состояние устройства: возврат в начальное положение
 8001150:	4b93      	ldr	r3, [pc, #588]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001152:	2206      	movs	r2, #6
 8001154:	701a      	strb	r2, [r3, #0]
		motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// назначение движения: возврат в начальное положение
 8001156:	4b93      	ldr	r3, [pc, #588]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 8001158:	2200      	movs	r2, #0
 800115a:	729a      	strb	r2, [r3, #10]
		motor_movement_start();
 800115c:	f000 f946 	bl	80013ec <motor_movement_start>
		break;
 8001160:	e11c      	b.n	800139c <read_input_signals_and_set_device_state+0x280>
	}
	case DEVICE_ERROR:																// если возникла ошибка
	{
		motor.motor_movement_purpose = MOTOR_PURPOSE_INSTANT_STOP;					// останавливаем мотор
 8001162:	4b90      	ldr	r3, [pc, #576]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 8001164:	2205      	movs	r2, #5
 8001166:	729a      	strb	r2, [r3, #10]
		device_error_handler();														// вызываем обработчик ошибок
 8001168:	f7ff ff66 	bl	8001038 <device_error_handler>
		break;
 800116c:	e116      	b.n	800139c <read_input_signals_and_set_device_state+0x280>
	case DEVICE_STANDBY:															// если устройство в режиме ожидания
	{
		/*
		 * если сигнал ON_TOMO не активен и сигнал ON_TOMO был активен ранее
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 800116e:	4b8e      	ldr	r3, [pc, #568]	; (80013a8 <read_input_signals_and_set_device_state+0x28c>)
 8001170:	7a1b      	ldrb	r3, [r3, #8]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <read_input_signals_and_set_device_state+0x6a>
			(ON_TOMO_IN_flag != ON_TOMO_WAS_NOT_ENABLED))
 8001176:	4b8d      	ldr	r3, [pc, #564]	; (80013ac <read_input_signals_and_set_device_state+0x290>)
 8001178:	781b      	ldrb	r3, [r3, #0]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <read_input_signals_and_set_device_state+0x6a>
		{
			ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;								// выставляем флаг: сигнал ON_TOMO не был активен
 800117e:	4b8b      	ldr	r3, [pc, #556]	; (80013ac <read_input_signals_and_set_device_state+0x290>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e090      	b.n	80012a8 <read_input_signals_and_set_device_state+0x18c>
		}
		/*
		 * иначе если кнопка подачи растра нажата долго и наличие/отсутствие растра определено
		 */
		else if (grid_supply_button.button_current_state == BUTTON_LONG_PRESS)
 8001186:	4b8a      	ldr	r3, [pc, #552]	; (80013b0 <read_input_signals_and_set_device_state+0x294>)
 8001188:	7b5b      	ldrb	r3, [r3, #13]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d124      	bne.n	80011d8 <read_input_signals_and_set_device_state+0xbc>
		{
			device_current_state = DEVICE_GRID_SUPPLY;								// выставляем состояние устройства: подача растра
 800118e:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001190:	2202      	movs	r2, #2
 8001192:	701a      	strb	r2, [r3, #0]

			/*
			 * если растр был извлечён и кнопка подачи растра нажата долго
			 */
			if (motor.step_impulses_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)
 8001194:	4b83      	ldr	r3, [pc, #524]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800119c:	db04      	blt.n	80011a8 <read_input_signals_and_set_device_state+0x8c>
			{
				motor.motor_movement_purpose = MOTOR_PURPOSE_GRID_INSERTION;						// назначение движения: вставить растр
 800119e:	4b81      	ldr	r3, [pc, #516]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	729a      	strb	r2, [r3, #10]
				motor_movement_start();																// начинаем движение
 80011a4:	f000 f922 	bl	80013ec <motor_movement_start>
			}
			/*
			 * если растр был вставлен и кнопка подачи растра нажата долго
			 */
			if (motor.step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)
 80011a8:	4b7e      	ldr	r3, [pc, #504]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b0:	f280 80e9 	bge.w	8001386 <read_input_signals_and_set_device_state+0x26a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 80011b4:	2200      	movs	r2, #0
 80011b6:	2108      	movs	r1, #8
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f7ff fe98 	bl	8000ef0 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 80011c0:	2200      	movs	r2, #0
 80011c2:	2110      	movs	r1, #16
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f7ff fe92 	bl	8000ef0 <set_output_signal_state>
				motor.motor_movement_purpose = MOTOR_PURPOSE_GRID_EXTRACTION;						// назначение движения: извлечь растр
 80011cc:	4b75      	ldr	r3, [pc, #468]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	729a      	strb	r2, [r3, #10]
				motor_movement_start();																// начинаем движение
 80011d2:	f000 f90b 	bl	80013ec <motor_movement_start>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника

			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
		}
		break;
 80011d6:	e0d6      	b.n	8001386 <read_input_signals_and_set_device_state+0x26a>
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 80011d8:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <read_input_signals_and_set_device_state+0x298>)
 80011da:	7a1b      	ldrb	r3, [r3, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d115      	bne.n	800120c <read_input_signals_and_set_device_state+0xf0>
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80011e0:	4b71      	ldr	r3, [pc, #452]	; (80013a8 <read_input_signals_and_set_device_state+0x28c>)
 80011e2:	7a1b      	ldrb	r3, [r3, #8]
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d111      	bne.n	800120c <read_input_signals_and_set_device_state+0xf0>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED) && \
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <read_input_signals_and_set_device_state+0x290>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10d      	bne.n	800120c <read_input_signals_and_set_device_state+0xf0>
				(motor.step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES))
 80011f0:	4b6c      	ldr	r3, [pc, #432]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 80011f2:	681b      	ldr	r3, [r3, #0]
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED) && \
 80011f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f8:	da08      	bge.n	800120c <read_input_signals_and_set_device_state+0xf0>
			device_current_state = DEVICE_SCANING_TOMO_OFF;											// выставляем состояние устройства: экспозиция без ON_TOMO
 80011fa:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 80011fc:	2204      	movs	r2, #4
 80011fe:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_OFF;						// назначение движения: экспозиция без ON_TOMO
 8001200:	4b68      	ldr	r3, [pc, #416]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 8001202:	2203      	movs	r2, #3
 8001204:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 8001206:	f000 f8f1 	bl	80013ec <motor_movement_start>
 800120a:	e04d      	b.n	80012a8 <read_input_signals_and_set_device_state+0x18c>
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 800120c:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <read_input_signals_and_set_device_state+0x28c>)
 800120e:	7a1b      	ldrb	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d107      	bne.n	8001224 <read_input_signals_and_set_device_state+0x108>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED))
 8001214:	4b65      	ldr	r3, [pc, #404]	; (80013ac <read_input_signals_and_set_device_state+0x290>)
 8001216:	781b      	ldrb	r3, [r3, #0]
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <read_input_signals_and_set_device_state+0x108>
			ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED;													// выставляем флаг: сигнал ON_TOMO активен
 800121c:	4b63      	ldr	r3, [pc, #396]	; (80013ac <read_input_signals_and_set_device_state+0x290>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e041      	b.n	80012a8 <read_input_signals_and_set_device_state+0x18c>
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8001224:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <read_input_signals_and_set_device_state+0x28c>)
 8001226:	7a1b      	ldrb	r3, [r3, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d115      	bne.n	8001258 <read_input_signals_and_set_device_state+0x13c>
				(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 800122c:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <read_input_signals_and_set_device_state+0x298>)
 800122e:	7a1b      	ldrb	r3, [r3, #8]
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8001230:	2b00      	cmp	r3, #0
 8001232:	d111      	bne.n	8001258 <read_input_signals_and_set_device_state+0x13c>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8001234:	4b5d      	ldr	r3, [pc, #372]	; (80013ac <read_input_signals_and_set_device_state+0x290>)
 8001236:	781b      	ldrb	r3, [r3, #0]
				(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10d      	bne.n	8001258 <read_input_signals_and_set_device_state+0x13c>
				(motor.step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES))
 800123c:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 800123e:	681b      	ldr	r3, [r3, #0]
				(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8001240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001244:	da08      	bge.n	8001258 <read_input_signals_and_set_device_state+0x13c>
			device_current_state = DEVICE_SCANING_TOMO_ON;											// выставляем состояние устройства: экспозиция с ON_TOMO
 8001246:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001248:	2205      	movs	r2, #5
 800124a:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_ON;						// назначние движения: экспозиция с ON_TOMO
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 800124e:	2204      	movs	r2, #4
 8001250:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 8001252:	f000 f8cb 	bl	80013ec <motor_movement_start>
 8001256:	e027      	b.n	80012a8 <read_input_signals_and_set_device_state+0x18c>
		else if ((!(limit_switch_return_state())) && \
 8001258:	f000 fc20 	bl	8001a9c <limit_switch_return_state>
 800125c:	4603      	mov	r3, r0
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00d      	beq.n	8001284 <read_input_signals_and_set_device_state+0x168>
				(!(motor.step_impulses_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)))
 8001268:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 800126a:	681b      	ldr	r3, [r3, #0]
		else if ((!(limit_switch_return_state())) && \
 800126c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001270:	da08      	bge.n	8001284 <read_input_signals_and_set_device_state+0x168>
			device_current_state = DEVICE_RETURN_TO_INITIAL_STATE;									// выставляем состояние устройства: возврат в начальное положение
 8001272:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001274:	2206      	movs	r2, #6
 8001276:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;						// назначение движения: возврат в начальное положение
 8001278:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 800127a:	2200      	movs	r2, #0
 800127c:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 800127e:	f000 f8b5 	bl	80013ec <motor_movement_start>
 8001282:	e011      	b.n	80012a8 <read_input_signals_and_set_device_state+0x18c>
		else if (pushbutton_buckybrake.button_current_state == BUTTON_SHORT_PRESS)
 8001284:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <read_input_signals_and_set_device_state+0x29c>)
 8001286:	7b5b      	ldrb	r3, [r3, #13]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d17c      	bne.n	8001386 <read_input_signals_and_set_device_state+0x26a>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника
 800128c:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 800128e:	2203      	movs	r2, #3
 8001290:	701a      	strb	r2, [r3, #0]
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
 8001292:	2201      	movs	r2, #1
 8001294:	2101      	movs	r1, #1
 8001296:	4849      	ldr	r0, [pc, #292]	; (80013bc <read_input_signals_and_set_device_state+0x2a0>)
 8001298:	f7ff fe2a 	bl	8000ef0 <set_output_signal_state>
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
 800129c:	2201      	movs	r2, #1
 800129e:	2108      	movs	r1, #8
 80012a0:	4846      	ldr	r0, [pc, #280]	; (80013bc <read_input_signals_and_set_device_state+0x2a0>)
 80012a2:	f7ff fe25 	bl	8000ef0 <set_output_signal_state>
		break;
 80012a6:	e06e      	b.n	8001386 <read_input_signals_and_set_device_state+0x26a>
 80012a8:	e06d      	b.n	8001386 <read_input_signals_and_set_device_state+0x26a>
	case DEVICE_BUCKYBRAKE:																			// если устройство в состоянии "отпустить тормоз кассетоприёмника"
	{
		/*
		 *	если кнопка тормоза кассетоприёмника отпущена
		 */
		if (pushbutton_buckybrake.button_current_state == BUTTON_RELEASED)
 80012aa:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <read_input_signals_and_set_device_state+0x29c>)
 80012ac:	7b5b      	ldrb	r3, [r3, #13]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d16b      	bne.n	800138a <read_input_signals_and_set_device_state+0x26e>
		{
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_LOW);	// выставляем в "0" выходной сигнал LASER_CENTERING
 80012b2:	2200      	movs	r2, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	4841      	ldr	r0, [pc, #260]	; (80013bc <read_input_signals_and_set_device_state+0x2a0>)
 80012b8:	f7ff fe1a 	bl	8000ef0 <set_output_signal_state>
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал BUCKYBRAKE
 80012bc:	2200      	movs	r2, #0
 80012be:	2108      	movs	r1, #8
 80012c0:	483e      	ldr	r0, [pc, #248]	; (80013bc <read_input_signals_and_set_device_state+0x2a0>)
 80012c2:	f7ff fe15 	bl	8000ef0 <set_output_signal_state>

			device_current_state = DEVICE_STANDBY;													// выставляем состояние устройства: режим ожидания
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012cc:	e05d      	b.n	800138a <read_input_signals_and_set_device_state+0x26e>
	case DEVICE_GRID_SUPPLY:																		// если устройство в состоянии "подача растра"
	{
		/*
		 * если назначение движения "вставить растр" и статус движения "движение завершено"
		 */
		if ((motor.motor_movement_purpose == MOTOR_PURPOSE_GRID_INSERTION) && \
 80012ce:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 80012d0:	7a9b      	ldrb	r3, [r3, #10]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d137      	bne.n	8001346 <read_input_signals_and_set_device_state+0x22a>
			(motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED))
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 80012d8:	7adb      	ldrb	r3, [r3, #11]
		if ((motor.motor_movement_purpose == MOTOR_PURPOSE_GRID_INSERTION) && \
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d133      	bne.n	8001346 <read_input_signals_and_set_device_state+0x22a>
		{
			/*
			 * если растр не представлен
			 */
			if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)&& \
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <read_input_signals_and_set_device_state+0x2a4>)
 80012e0:	7a1b      	ldrb	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <read_input_signals_and_set_device_state+0x1ea>
					(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <read_input_signals_and_set_device_state+0x2a4>)
 80012e8:	7d1b      	ldrb	r3, [r3, #20]
			if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)&& \
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10b      	bne.n	8001306 <read_input_signals_and_set_device_state+0x1ea>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 80012ee:	2200      	movs	r2, #0
 80012f0:	2108      	movs	r1, #8
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f7ff fdfb 	bl	8000ef0 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 80012fa:	2200      	movs	r2, #0
 80012fc:	2110      	movs	r1, #16
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f7ff fdf5 	bl	8000ef0 <set_output_signal_state>
			}
			/*
			* если тип растра 120
			*/
			if (grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <read_input_signals_and_set_device_state+0x2a4>)
 8001308:	7a1b      	ldrb	r3, [r3, #8]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10b      	bne.n	8001326 <read_input_signals_and_set_device_state+0x20a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_120
 800130e:	2201      	movs	r2, #1
 8001310:	2108      	movs	r1, #8
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f7ff fdeb 	bl	8000ef0 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 800131a:	2200      	movs	r2, #0
 800131c:	2110      	movs	r1, #16
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f7ff fde5 	bl	8000ef0 <set_output_signal_state>
			}
			/*
			* если тип растра 180
			*/
			if (grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <read_input_signals_and_set_device_state+0x2a4>)
 8001328:	7d1b      	ldrb	r3, [r3, #20]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d10b      	bne.n	8001346 <read_input_signals_and_set_device_state+0x22a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 800132e:	2200      	movs	r2, #0
 8001330:	2108      	movs	r1, #8
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f7ff fddb 	bl	8000ef0 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_180
 800133a:	2201      	movs	r2, #1
 800133c:	2110      	movs	r1, #16
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f7ff fdd5 	bl	8000ef0 <set_output_signal_state>
			}
		}

		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 8001348:	7adb      	ldrb	r3, [r3, #11]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d11f      	bne.n	800138e <read_input_signals_and_set_device_state+0x272>
		{

			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001354:	e01b      	b.n	800138e <read_input_signals_and_set_device_state+0x272>
	}
	case DEVICE_RETURN_TO_INITIAL_STATE:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 8001358:	7adb      	ldrb	r3, [r3, #11]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d119      	bne.n	8001392 <read_input_signals_and_set_device_state+0x276>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001364:	e015      	b.n	8001392 <read_input_signals_and_set_device_state+0x276>
	}
	case DEVICE_SCANING_TOMO_OFF:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 8001368:	7adb      	ldrb	r3, [r3, #11]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d113      	bne.n	8001396 <read_input_signals_and_set_device_state+0x27a>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001374:	e00f      	b.n	8001396 <read_input_signals_and_set_device_state+0x27a>
	}
	case DEVICE_SCANING_TOMO_ON:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED)	// если статус мотора "движение завершено"
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <read_input_signals_and_set_device_state+0x288>)
 8001378:	7adb      	ldrb	r3, [r3, #11]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d10d      	bne.n	800139a <read_input_signals_and_set_device_state+0x27e>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <read_input_signals_and_set_device_state+0x284>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001384:	e009      	b.n	800139a <read_input_signals_and_set_device_state+0x27e>
		break;
 8001386:	bf00      	nop
 8001388:	e008      	b.n	800139c <read_input_signals_and_set_device_state+0x280>
		break;
 800138a:	bf00      	nop
 800138c:	e006      	b.n	800139c <read_input_signals_and_set_device_state+0x280>
		break;
 800138e:	bf00      	nop
 8001390:	e004      	b.n	800139c <read_input_signals_and_set_device_state+0x280>
		break;
 8001392:	bf00      	nop
 8001394:	e002      	b.n	800139c <read_input_signals_and_set_device_state+0x280>
		break;
 8001396:	bf00      	nop
 8001398:	e000      	b.n	800139c <read_input_signals_and_set_device_state+0x280>
		break;
 800139a:	bf00      	nop
	}
	}
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000a8 	.word	0x200000a8
 80013a4:	200001e0 	.word	0x200001e0
 80013a8:	200001fc 	.word	0x200001fc
 80013ac:	200000f4 	.word	0x200000f4
 80013b0:	20000094 	.word	0x20000094
 80013b4:	200000b8 	.word	0x200000b8
 80013b8:	200000f8 	.word	0x200000f8
 80013bc:	48000400 	.word	0x48000400
 80013c0:	20000170 	.word	0x20000170

080013c4 <motor_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_start(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(MOTOR_TIMER_POINTER);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <motor_timer_interrupts_start+0x10>)
 80013ca:	f002 f887 	bl	80034dc <HAL_TIM_Base_Start_IT>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000048 	.word	0x20000048

080013d8 <motor_timer_interrupts_stop>:

/*
 * Останавливаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_stop(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(MOTOR_TIMER_POINTER);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <motor_timer_interrupts_stop+0x10>)
 80013de:	f002 f8e7 	bl	80035b0 <HAL_TIM_Base_Stop_IT>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000048 	.word	0x20000048

080013ec <motor_movement_start>:

/*
 * Начинаем движение мотора
 */
void motor_movement_start(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	if ((motor.motor_movement_purpose == MOTOR_PURPOSE_EXPOSITION_TOMO_OFF) || (motor.motor_movement_purpose == MOTOR_PURPOSE_EXPOSITION_TOMO_ON))
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <motor_movement_start+0x38>)
 80013f2:	7a9b      	ldrb	r3, [r3, #10]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d003      	beq.n	8001400 <motor_movement_start+0x14>
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <motor_movement_start+0x38>)
 80013fa:	7a9b      	ldrb	r3, [r3, #10]
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d103      	bne.n	8001408 <motor_movement_start+0x1c>
	{
		dip_switch_state_update();
 8001400:	f7ff fc7c 	bl	8000cfc <dip_switch_state_update>
		calculate_acceleration_coefficient();
 8001404:	f000 f89e 	bl	8001544 <calculate_acceleration_coefficient>
	}
	if (device_current_state == DEVICE_STANDBY)							// если устройство в режиме ожидания
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <motor_movement_start+0x3c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d102      	bne.n	8001416 <motor_movement_start+0x2a>
	{
		error_code = STANDBY_MOVEMENT_ERROR;							// выставляем ошибку (нельзя двигаться в режиме ожидания)
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <motor_movement_start+0x40>)
 8001412:	2203      	movs	r2, #3
 8001414:	701a      	strb	r2, [r3, #0]
	}
	motor.motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;			// выставляем флаг, что мотор находится в движении
 8001416:	4b03      	ldr	r3, [pc, #12]	; (8001424 <motor_movement_start+0x38>)
 8001418:	2200      	movs	r2, #0
 800141a:	72da      	strb	r2, [r3, #11]
	motor_timer_interrupts_start();										// запускаем прерывания, по которым мотор будет шагать
 800141c:	f7ff ffd2 	bl	80013c4 <motor_timer_interrupts_start>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200001e0 	.word	0x200001e0
 8001428:	200000a8 	.word	0x200000a8
 800142c:	200001f8 	.word	0x200001f8

08001430 <motor_movement_complete>:

/*
 * Прекращаем движение мотора
 */
void motor_movement_complete(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	motor_timer_interrupts_stop();										// останавливаем прерывания, по которым шагает мотор
 8001434:	f7ff ffd0 	bl	80013d8 <motor_timer_interrupts_stop>
	motor.motor_movement_status = MOTOR_MOVEMENT_COMPLETED;				// выставляем флаг, что движение завершено
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <motor_movement_complete+0x18>)
 800143a:	2201      	movs	r2, #1
 800143c:	72da      	strb	r2, [r3, #11]
	reset_movement_counters();
 800143e:	f000 f855 	bl	80014ec <reset_movement_counters>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001e0 	.word	0x200001e0

0800144c <motor_make_step_to_direction>:

/*
 * Делаем шаг в заданном направлении
 */
void motor_make_step_to_direction(MotorMoveDirection_EnumTypeDef move_direction)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	motor.motor_move_direction = move_direction;						// выставляем направление шага
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <motor_make_step_to_direction+0x20>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	7213      	strb	r3, [r2, #8]
	motor_direction_pin_set();											// выставляем нужное состояние на пине направления
 800145c:	f000 faac 	bl	80019b8 <motor_direction_pin_set>
	check_limit_switch_and_make_step();									// проверяем состояние концевика и совершаем шаг
 8001460:	f000 fac8 	bl	80019f4 <check_limit_switch_and_make_step>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200001e0 	.word	0x200001e0

08001470 <bucky_ready_response_set>:

/*
 * Начинаем отсчёт шагов до выставления сигнала BUCKY_READY
 */
void bucky_ready_response_set(SignalLogicLevel_EnumTypeDef logic_level_to_set)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	switch (logic_level_to_set)											// если требуемый логический уровень сигнала BUCKY_READY
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d010      	beq.n	80014a2 <bucky_ready_response_set+0x32>
 8001480:	2b01      	cmp	r3, #1
 8001482:	d000      	beq.n	8001486 <bucky_ready_response_set+0x16>
	{
		bucky_ready_delay_counter = 0;									// обнуляем счётчик шагов
		break;
	}
	}
}
 8001484:	e012      	b.n	80014ac <bucky_ready_response_set+0x3c>
		bucky_ready_delay_counter++;									// инкрементируем счётчик шагов
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <bucky_ready_response_set+0x48>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <bucky_ready_response_set+0x48>)
 8001490:	701a      	strb	r2, [r3, #0]
		if (bucky_ready_delay_counter >= BUCKY_READY_DELAY_STEP_IMPULSES)		// если досчитали до нужного количества шагов
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <bucky_ready_response_set+0x48>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d907      	bls.n	80014aa <bucky_ready_response_set+0x3a>
			bucky_ready_delay_counter = BUCKY_READY_DELAY_STEP_IMPULSES;		// удерживаем счётчик от дальнейшего увеличения
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <bucky_ready_response_set+0x48>)
 800149c:	2203      	movs	r2, #3
 800149e:	701a      	strb	r2, [r3, #0]
		break;
 80014a0:	e003      	b.n	80014aa <bucky_ready_response_set+0x3a>
		bucky_ready_delay_counter = 0;									// обнуляем счётчик шагов
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <bucky_ready_response_set+0x48>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
		break;
 80014a8:	e000      	b.n	80014ac <bucky_ready_response_set+0x3c>
		break;
 80014aa:	bf00      	nop
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	20000040 	.word	0x20000040

080014bc <bucky_ready_response_delay_check>:

/*
 * Проверяем счётчик шагов до выставления сигнала BUCKY_READY (по таймеру)
 */
void bucky_ready_response_delay_check(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	if (bucky_ready_delay_counter == BUCKY_READY_DELAY_STEP_IMPULSES)									// если прошли достаточное количество шагов
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <bucky_ready_response_delay_check+0x2c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d106      	bne.n	80014d6 <bucky_ready_response_delay_check+0x1a>
	{
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем сигнал BUCKY_READY в "1"
 80014c8:	2201      	movs	r2, #1
 80014ca:	2120      	movs	r1, #32
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f7ff fd0e 	bl	8000ef0 <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);	// иначе выставляем сигнал BUCKY_READY в "0"
	}
}
 80014d4:	e005      	b.n	80014e2 <bucky_ready_response_delay_check+0x26>
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);	// иначе выставляем сигнал BUCKY_READY в "0"
 80014d6:	2200      	movs	r2, #0
 80014d8:	2120      	movs	r1, #32
 80014da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014de:	f7ff fd07 	bl	8000ef0 <set_output_signal_state>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000040 	.word	0x20000040

080014ec <reset_movement_counters>:

void reset_movement_counters(void)
{
 80014ec:	b490      	push	{r4, r7}
 80014ee:	af00      	add	r7, sp, #0
	ticks_before_next_step_counter = 0;
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <reset_movement_counters+0x44>)
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	f04f 0400 	mov.w	r4, #0
 80014fa:	e9c2 3400 	strd	r3, r4, [r2]
	ticks_since_start_movement_counter = 0;
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <reset_movement_counters+0x48>)
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	f04f 0400 	mov.w	r4, #0
 8001508:	e9c2 3400 	strd	r3, r4, [r2]
	step_impulses_for_acceleration_counter = 0;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <reset_movement_counters+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
	step_impulses_since_start_movement_counter = 0;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <reset_movement_counters+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
	ticks_for_acceleration_counter = 0;
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <reset_movement_counters+0x54>)
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	f04f 0400 	mov.w	r4, #0
 8001522:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc90      	pop	{r4, r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000188 	.word	0x20000188
 8001534:	20000038 	.word	0x20000038
 8001538:	20000044 	.word	0x20000044
 800153c:	20000030 	.word	0x20000030
 8001540:	200001f0 	.word	0x200001f0

08001544 <calculate_acceleration_coefficient>:

void calculate_acceleration_coefficient(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	linear_acceleration_coefficient = ((max_speed_mks_per_step_impulse - MIN_SPEED_MKS_PER_STEP_IMPULSE_ALL_MODES)*1000)/acceleration_time_ms;
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <calculate_acceleration_coefficient+0x54>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	f5a3 239b 	sub.w	r3, r3, #317440	; 0x4d800
 8001558:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <calculate_acceleration_coefficient+0x58>)
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	fbb3 f3f2 	udiv	r3, r3, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <calculate_acceleration_coefficient+0x5c>)
 8001568:	601a      	str	r2, [r3, #0]
	quadratic_acceleration_coefficient = ((max_speed_mks_per_step_impulse - MIN_SPEED_MKS_PER_STEP_IMPULSE_ALL_MODES)*1000*1000)/acceleration_time_ms/acceleration_time_ms;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <calculate_acceleration_coefficient+0x54>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <calculate_acceleration_coefficient+0x60>)
 8001570:	fb02 f203 	mul.w	r2, r2, r3
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <calculate_acceleration_coefficient+0x64>)
 8001576:	4413      	add	r3, r2
 8001578:	4a08      	ldr	r2, [pc, #32]	; (800159c <calculate_acceleration_coefficient+0x58>)
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <calculate_acceleration_coefficient+0x58>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <calculate_acceleration_coefficient+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	200000b0 	.word	0x200000b0
 800159c:	200000b4 	.word	0x200000b4
 80015a0:	200000ac 	.word	0x200000ac
 80015a4:	000f4240 	.word	0x000f4240
 80015a8:	ecfc7240 	.word	0xecfc7240
 80015ac:	20000190 	.word	0x20000190

080015b0 <movement_time_function>:

int64_t movement_time_function(uint64_t ticks_value)
{
 80015b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	e9c7 0100 	strd	r0, r1, [r7]
	int64_t calculated_speed_mks_per_step_impulse = 0;
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f04f 0400 	mov.w	r4, #0
 80015c4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	// calculated_speed_mks_per_step_impulse = ((time_value*time_value*quadratic_acceleration_coefficient)/MOTOR_TIMER_TICKS_PER_SEC/MOTOR_TIMER_TICKS_PER_SEC) + MIN_STEP_IMPULSES_PER_SEC_ALL_MODES;
	calculated_speed_mks_per_step_impulse = (ticks_value * linear_acceleration_coefficient)/MOTOR_TIMER_TICKS_PER_SEC + MIN_SPEED_MKS_PER_STEP_IMPULSE_ALL_MODES;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <movement_time_function+0x70>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	fb04 f102 	mul.w	r1, r4, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	fb03 f202 	mul.w	r2, r3, r2
 80015dc:	440a      	add	r2, r1
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	fba1 0103 	umull	r0, r1, r1, r3
 80015e4:	1853      	adds	r3, r2, r1
 80015e6:	4619      	mov	r1, r3
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <movement_time_function+0x74>)
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	f7fe fe13 	bl	8000218 <__aeabi_uldivmod>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	4619      	mov	r1, r3
 80015f8:	4622      	mov	r2, r4
 80015fa:	f240 133f 	movw	r3, #319	; 0x13f
 80015fe:	f04f 0400 	mov.w	r4, #0
 8001602:	eb13 0b01 	adds.w	fp, r3, r1
 8001606:	eb44 0c02 	adc.w	ip, r4, r2
 800160a:	e9c7 bc02 	strd	fp, ip, [r7, #8]
	return calculated_speed_mks_per_step_impulse;
 800160e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001612:	4618      	mov	r0, r3
 8001614:	4621      	mov	r1, r4
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800161e:	bf00      	nop
 8001620:	200000ac 	.word	0x200000ac
 8001624:	00030d40 	.word	0x00030d40

08001628 <calculate_ticks_per_next_step>:

void calculate_ticks_per_next_step(void)
{
 8001628:	b598      	push	{r3, r4, r7, lr}
 800162a:	af00      	add	r7, sp, #0
	if ((motor.motor_movement_purpose == MOTOR_PURPOSE_EXPOSITION_TOMO_OFF) || (motor.motor_movement_purpose == MOTOR_PURPOSE_EXPOSITION_TOMO_ON))
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <calculate_ticks_per_next_step+0xe8>)
 800162e:	7a9b      	ldrb	r3, [r3, #10]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d003      	beq.n	800163c <calculate_ticks_per_next_step+0x14>
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <calculate_ticks_per_next_step+0xe8>)
 8001636:	7a9b      	ldrb	r3, [r3, #10]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d15a      	bne.n	80016f2 <calculate_ticks_per_next_step+0xca>
	{
		// если оставшееся количество шагов больше количества шагов для ускорения/замедления, мы либо ускоряемся, либо движемся с макс. скоростью
		if ((EXPOSITITON_DISTANCE_STEP_IMPULSES - step_impulses_since_start_movement_counter) > step_impulses_for_acceleration_counter)
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <calculate_ticks_per_next_step+0xec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f5c3 63e4 	rsb	r3, r3, #1824	; 0x720
 8001644:	3302      	adds	r3, #2
 8001646:	4a34      	ldr	r2, [pc, #208]	; (8001718 <calculate_ticks_per_next_step+0xf0>)
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	4293      	cmp	r3, r2
 800164c:	d936      	bls.n	80016bc <calculate_ticks_per_next_step+0x94>
		{
			// если мы не достигли максимальной скорости, ускоряемся
			if (speed_mks_per_step_impulse < max_speed_mks_per_step_impulse)
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <calculate_ticks_per_next_step+0xf4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f04f 0400 	mov.w	r4, #0
 8001656:	4a32      	ldr	r2, [pc, #200]	; (8001720 <calculate_ticks_per_next_step+0xf8>)
 8001658:	e9d2 1200 	ldrd	r1, r2, [r2]
 800165c:	42a2      	cmp	r2, r4
 800165e:	bf08      	it	eq
 8001660:	4299      	cmpeq	r1, r3
 8001662:	d21f      	bcs.n	80016a4 <calculate_ticks_per_next_step+0x7c>
			{
				speed_mks_per_step_impulse = movement_time_function(ticks_since_start_movement_counter);
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <calculate_ticks_per_next_step+0xfc>)
 8001666:	e9d3 3400 	ldrd	r3, r4, [r3]
 800166a:	4618      	mov	r0, r3
 800166c:	4621      	mov	r1, r4
 800166e:	f7ff ff9f 	bl	80015b0 <movement_time_function>
 8001672:	4603      	mov	r3, r0
 8001674:	460c      	mov	r4, r1
 8001676:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <calculate_ticks_per_next_step+0xf8>)
 8001678:	e9c2 3400 	strd	r3, r4, [r2]
				ticks_before_next_step_counter = speed_mks_per_step_impulse/MOTOR_TIMER_TICK_DURATION_MKS;
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <calculate_ticks_per_next_step+0xf8>)
 800167e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001682:	f04f 0205 	mov.w	r2, #5
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	f7fe fdc5 	bl	8000218 <__aeabi_uldivmod>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4a25      	ldr	r2, [pc, #148]	; (8001728 <calculate_ticks_per_next_step+0x100>)
 8001694:	e9c2 3400 	strd	r3, r4, [r2]
				step_impulses_for_acceleration_counter++;
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <calculate_ticks_per_next_step+0xf0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <calculate_ticks_per_next_step+0xf0>)
 80016a0:	6013      	str	r3, [r2, #0]
		if ((EXPOSITITON_DISTANCE_STEP_IMPULSES - step_impulses_since_start_movement_counter) > step_impulses_for_acceleration_counter)
 80016a2:	e02d      	b.n	8001700 <calculate_ticks_per_next_step+0xd8>
			}
			// иначе движемся с максимальной скоростью
			else
			{
				ticks_before_next_step_counter = max_speed_mks_per_step_impulse/MOTOR_TIMER_TICK_DURATION_MKS;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <calculate_ticks_per_next_step+0xf4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a20      	ldr	r2, [pc, #128]	; (800172c <calculate_ticks_per_next_step+0x104>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	f04f 0400 	mov.w	r4, #0
 80016b4:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <calculate_ticks_per_next_step+0x100>)
 80016b6:	e9c2 3400 	strd	r3, r4, [r2]
		if ((EXPOSITITON_DISTANCE_STEP_IMPULSES - step_impulses_since_start_movement_counter) > step_impulses_for_acceleration_counter)
 80016ba:	e021      	b.n	8001700 <calculate_ticks_per_next_step+0xd8>
			}
		}
		// иначе замедляемся
		else
		{
			speed_mks_per_step_impulse = movement_time_function(ticks_for_acceleration_counter);
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <calculate_ticks_per_next_step+0x108>)
 80016be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016c2:	4618      	mov	r0, r3
 80016c4:	4621      	mov	r1, r4
 80016c6:	f7ff ff73 	bl	80015b0 <movement_time_function>
 80016ca:	4603      	mov	r3, r0
 80016cc:	460c      	mov	r4, r1
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <calculate_ticks_per_next_step+0xf8>)
 80016d0:	e9c2 3400 	strd	r3, r4, [r2]
			ticks_before_next_step_counter = speed_mks_per_step_impulse/MOTOR_TIMER_TICK_DURATION_MKS;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <calculate_ticks_per_next_step+0xf8>)
 80016d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016da:	f04f 0205 	mov.w	r2, #5
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	f7fe fd99 	bl	8000218 <__aeabi_uldivmod>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <calculate_ticks_per_next_step+0x100>)
 80016ec:	e9c2 3400 	strd	r3, r4, [r2]
		if ((EXPOSITITON_DISTANCE_STEP_IMPULSES - step_impulses_since_start_movement_counter) > step_impulses_for_acceleration_counter)
 80016f0:	e006      	b.n	8001700 <calculate_ticks_per_next_step+0xd8>
		}
	}
	else
	{
		ticks_before_next_step_counter = CONSTANT_SPEED_MKS_PER_STEP/MOTOR_TIMER_TICK_DURATION_MKS;
 80016f2:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <calculate_ticks_per_next_step+0x100>)
 80016f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	e9c2 3400 	strd	r3, r4, [r2]
	}
	step_impulses_since_start_movement_counter++;
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <calculate_ticks_per_next_step+0xec>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	4a03      	ldr	r2, [pc, #12]	; (8001714 <calculate_ticks_per_next_step+0xec>)
 8001708:	6013      	str	r3, [r2, #0]
}
 800170a:	bf00      	nop
 800170c:	bd98      	pop	{r3, r4, r7, pc}
 800170e:	bf00      	nop
 8001710:	200001e0 	.word	0x200001e0
 8001714:	20000030 	.word	0x20000030
 8001718:	20000044 	.word	0x20000044
 800171c:	200000b0 	.word	0x200000b0
 8001720:	20000208 	.word	0x20000208
 8001724:	20000038 	.word	0x20000038
 8001728:	20000188 	.word	0x20000188
 800172c:	cccccccd 	.word	0xcccccccd
 8001730:	200001f0 	.word	0x200001f0

08001734 <motor_check_conditions_and_step>:

void motor_check_conditions_and_step(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	//motor_make_step_to_direction(MOVE_TO_COORD_END);

	switch (motor.motor_movement_purpose)												// если назначение движения мотора
 8001738:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <motor_check_conditions_and_step+0x13c>)
 800173a:	7a9b      	ldrb	r3, [r3, #10]
 800173c:	2b05      	cmp	r3, #5
 800173e:	f200 8095 	bhi.w	800186c <motor_check_conditions_and_step+0x138>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <motor_check_conditions_and_step+0x14>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	08001845 	.word	0x08001845
 800174c:	08001767 	.word	0x08001767
 8001750:	0800178d 	.word	0x0800178d
 8001754:	080017ad 	.word	0x080017ad
 8001758:	080017cf 	.word	0x080017cf
 800175c:	08001761 	.word	0x08001761
	{
	case MOTOR_PURPOSE_INSTANT_STOP:													// если назначение движения мотора - мгновенная остановка
	{
		motor_movement_complete();														// завершаем движение
 8001760:	f7ff fe66 	bl	8001430 <motor_movement_complete>
		break;
 8001764:	e082      	b.n	800186c <motor_check_conditions_and_step+0x138>
	}
	case MOTOR_PURPOSE_GRID_INSERTION:													// если назначение движения мотора - вставить растр
	{
		if (!(limit_switch_return_state()))												// если концевик не активен
 8001766:	f000 f999 	bl	8001a9c <limit_switch_return_state>
 800176a:	4603      	mov	r3, r0
 800176c:	f083 0301 	eor.w	r3, r3, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <motor_check_conditions_and_step+0x4a>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);							// двигаемся к начальной точке
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fe68 	bl	800144c <motor_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 800177c:	e071      	b.n	8001862 <motor_check_conditions_and_step+0x12e>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <motor_check_conditions_and_step+0x140>)
 8001780:	7b5b      	ldrb	r3, [r3, #13]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d16d      	bne.n	8001862 <motor_check_conditions_and_step+0x12e>
				motor_movement_complete();												// завершаем движение
 8001786:	f7ff fe53 	bl	8001430 <motor_movement_complete>
		break;
 800178a:	e06a      	b.n	8001862 <motor_check_conditions_and_step+0x12e>
	}
	case MOTOR_PURPOSE_GRID_EXTRACTION:													// если назначение движения мотора - извлечь растр
	{
		if (motor.step_impulses_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEP_IMPULSES)		// если мы не дошли до крайнего положения
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <motor_check_conditions_and_step+0x13c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001794:	da03      	bge.n	800179e <motor_check_conditions_and_step+0x6a>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_END);							// движемся от начальной точки (наружу)
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fe58 	bl	800144c <motor_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 800179c:	e063      	b.n	8001866 <motor_check_conditions_and_step+0x132>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <motor_check_conditions_and_step+0x140>)
 80017a0:	7b5b      	ldrb	r3, [r3, #13]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d15f      	bne.n	8001866 <motor_check_conditions_and_step+0x132>
				motor_movement_complete();												// завершаем движение
 80017a6:	f7ff fe43 	bl	8001430 <motor_movement_complete>
		break;
 80017aa:	e05c      	b.n	8001866 <motor_check_conditions_and_step+0x132>
	}
	case MOTOR_PURPOSE_EXPOSITION_TOMO_OFF:												// если назначение движения - экспозиция без сигнала ON_TOMO
	{
		if (BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)				// если сигнал BUCKY_CALL в "1"
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <motor_check_conditions_and_step+0x144>)
 80017ae:	7a1b      	ldrb	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <motor_check_conditions_and_step+0x8c>
		{
			cyclic_movement_step();														// делаем шаг
 80017b4:	f000 f8ca 	bl	800194c <cyclic_movement_step>
			bucky_ready_response_set(LOGIC_LEVEL_HIGH);									// запускаем счётчик шагов до выставления сигнала BUCKY_READY
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fe59 	bl	8001470 <bucky_ready_response_set>
		else
		{
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// иначе выключаем сигнал BUCKY_READY
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
		}
		break;
 80017be:	e055      	b.n	800186c <motor_check_conditions_and_step+0x138>
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// иначе выключаем сигнал BUCKY_READY
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fe55 	bl	8001470 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <motor_check_conditions_and_step+0x13c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	729a      	strb	r2, [r3, #10]
		break;
 80017cc:	e04e      	b.n	800186c <motor_check_conditions_and_step+0x138>
	}
	case MOTOR_PURPOSE_EXPOSITION_TOMO_ON:												// если назначение движения - экспозиция с сигналом ON_TOMO
	{
		// если сигнал ON_OMO был включён, и сигнал BUCKY_CALL включён
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <motor_check_conditions_and_step+0x148>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d10f      	bne.n	80017f6 <motor_check_conditions_and_step+0xc2>
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <motor_check_conditions_and_step+0x144>)
 80017d8:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10b      	bne.n	80017f6 <motor_check_conditions_and_step+0xc2>
		{
			if (ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)				// если сигнал ON_TOMO в "0"
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <motor_check_conditions_and_step+0x14c>)
 80017e0:	7a1b      	ldrb	r3, [r3, #8]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d105      	bne.n	80017f2 <motor_check_conditions_and_step+0xbe>
			{
				ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED_AND_DISABLED;						// выставляем флаг, что ON_TOMO был в "1", а затем в "0"
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <motor_check_conditions_and_step+0x148>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	701a      	strb	r2, [r3, #0]
				bucky_ready_response_set(LOGIC_LEVEL_HIGH);								// запускаем счётчик шагов до выставления сигнала BUCKY_READY
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fe3f 	bl	8001470 <bucky_ready_response_set>
			}
			cyclic_movement_step();														// делаем шаг
 80017f2:	f000 f8ab 	bl	800194c <cyclic_movement_step>
		}

		// если сигнал ON_TOMO был включён и выключен, и сигнал ON_TOMO включён
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <motor_check_conditions_and_step+0x148>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d109      	bne.n	8001812 <motor_check_conditions_and_step+0xde>
			(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <motor_check_conditions_and_step+0x14c>)
 8001800:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <motor_check_conditions_and_step+0xde>
		{
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// выключаем сигнал BUCKY_READY
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff fe32 	bl	8001470 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <motor_check_conditions_and_step+0x13c>)
 800180e:	2200      	movs	r2, #0
 8001810:	729a      	strb	r2, [r3, #10]
		}
		// если сигнал BUCKY_CALL выключен, и сигнал ON_TOMO был включён и выключен, и сигнал ON_TOMO сейчас выключен
		if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <motor_check_conditions_and_step+0x144>)
 8001814:	7a1b      	ldrb	r3, [r3, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d127      	bne.n	800186a <motor_check_conditions_and_step+0x136>
			(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <motor_check_conditions_and_step+0x148>)
 800181c:	781b      	ldrb	r3, [r3, #0]
		if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 800181e:	2b02      	cmp	r3, #2
 8001820:	d123      	bne.n	800186a <motor_check_conditions_and_step+0x136>
			(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <motor_check_conditions_and_step+0x14c>)
 8001824:	7a1b      	ldrb	r3, [r3, #8]
			(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 8001826:	2b01      	cmp	r3, #1
 8001828:	d11f      	bne.n	800186a <motor_check_conditions_and_step+0x136>
		{
			device_current_state = DEVICE_ERROR;										// переключаем устройство в состояние ошибки
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <motor_check_conditions_and_step+0x150>)
 800182c:	2207      	movs	r2, #7
 800182e:	701a      	strb	r2, [r3, #0]
			error_code = ON_TOMO_BUCKY_CALL_ERROR;										// выставляем ошибку (BUCKY_CALL выключился прежде, чем ON_TOMO включился повторно)
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <motor_check_conditions_and_step+0x154>)
 8001832:	2204      	movs	r2, #4
 8001834:	701a      	strb	r2, [r3, #0]
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// выключаем сигнал BUCKY_READY
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fe1a 	bl	8001470 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <motor_check_conditions_and_step+0x13c>)
 800183e:	2200      	movs	r2, #0
 8001840:	729a      	strb	r2, [r3, #10]
		}
		break;
 8001842:	e012      	b.n	800186a <motor_check_conditions_and_step+0x136>
	}
	case MOTOR_PURPOSE_TAKE_INITIAL_POSITION:											// если назначение движения - вернуться в начальную позицию
	{
		if(!(limit_switch_return_state()))												// если концевик не активен
 8001844:	f000 f92a 	bl	8001a9c <limit_switch_return_state>
 8001848:	4603      	mov	r3, r0
 800184a:	f083 0301 	eor.w	r3, r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <motor_check_conditions_and_step+0x128>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);							// делаем шаг в направлении начального положения
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fdf9 	bl	800144c <motor_make_step_to_direction>
		}
		else
		{
			motor_movement_complete();													// иначе завершаем движение
		}
		break;
 800185a:	e007      	b.n	800186c <motor_check_conditions_and_step+0x138>
			motor_movement_complete();													// иначе завершаем движение
 800185c:	f7ff fde8 	bl	8001430 <motor_movement_complete>
		break;
 8001860:	e004      	b.n	800186c <motor_check_conditions_and_step+0x138>
		break;
 8001862:	bf00      	nop
 8001864:	e002      	b.n	800186c <motor_check_conditions_and_step+0x138>
		break;
 8001866:	bf00      	nop
 8001868:	e000      	b.n	800186c <motor_check_conditions_and_step+0x138>
		break;
 800186a:	bf00      	nop
	}
	}
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200001e0 	.word	0x200001e0
 8001874:	20000094 	.word	0x20000094
 8001878:	200000b8 	.word	0x200000b8
 800187c:	200000f4 	.word	0x200000f4
 8001880:	200001fc 	.word	0x200001fc
 8001884:	200000a8 	.word	0x200000a8
 8001888:	200001f8 	.word	0x200001f8

0800188c <motor_make_one_step>:

void motor_make_one_step(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	bucky_ready_response_delay_check();														// проверяем, надо ли выставить сигнал BUCKY_READY в "1"
 8001890:	f7ff fe14 	bl	80014bc <bucky_ready_response_delay_check>
	motor_check_conditions_and_step();
 8001894:	f7ff ff4e 	bl	8001734 <motor_check_conditions_and_step>
	//HAL_GPIO_TogglePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN);
	calculate_ticks_per_next_step();
 8001898:	f7ff fec6 	bl	8001628 <calculate_ticks_per_next_step>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <motor_timer_interrupt_handler>:
uint32_t test_count = 0;
/*
 * Обработчик прерываний таймера, отвечающего за шаги мотора
 */
void motor_timer_interrupt_handler(void)
{
 80018a0:	b598      	push	{r3, r4, r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	ticks_since_start_movement_counter++;
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <motor_timer_interrupt_handler+0x90>)
 80018a6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018aa:	1c4b      	adds	r3, r1, #1
 80018ac:	f142 0400 	adc.w	r4, r2, #0
 80018b0:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <motor_timer_interrupt_handler+0x90>)
 80018b2:	e9c2 3400 	strd	r3, r4, [r2]
	ticks_before_next_step_counter--;
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <motor_timer_interrupt_handler+0x94>)
 80018b8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018bc:	f111 33ff 	adds.w	r3, r1, #4294967295
 80018c0:	f142 34ff 	adc.w	r4, r2, #4294967295
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <motor_timer_interrupt_handler+0x94>)
 80018c6:	e9c2 3400 	strd	r3, r4, [r2]
	if ((EXPOSITITON_DISTANCE_STEP_IMPULSES - step_impulses_since_start_movement_counter) >= step_impulses_for_acceleration_counter)
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <motor_timer_interrupt_handler+0x98>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f5c3 63e4 	rsb	r3, r3, #1824	; 0x720
 80018d2:	3302      	adds	r3, #2
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <motor_timer_interrupt_handler+0x9c>)
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4293      	cmp	r3, r2
 80018da:	d314      	bcc.n	8001906 <motor_timer_interrupt_handler+0x66>
	{
		if (speed_mks_per_step_impulse < max_speed_mks_per_step_impulse)
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <motor_timer_interrupt_handler+0xa0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 0400 	mov.w	r4, #0
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <motor_timer_interrupt_handler+0xa4>)
 80018e6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80018ea:	42a2      	cmp	r2, r4
 80018ec:	bf08      	it	eq
 80018ee:	4299      	cmpeq	r1, r3
 80018f0:	d213      	bcs.n	800191a <motor_timer_interrupt_handler+0x7a>
		{
			ticks_for_acceleration_counter++;
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <motor_timer_interrupt_handler+0xa8>)
 80018f4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018f8:	1c4b      	adds	r3, r1, #1
 80018fa:	f142 0400 	adc.w	r4, r2, #0
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <motor_timer_interrupt_handler+0xa8>)
 8001900:	e9c2 3400 	strd	r3, r4, [r2]
 8001904:	e009      	b.n	800191a <motor_timer_interrupt_handler+0x7a>
		}
	}
	else
	{
		ticks_for_acceleration_counter--;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <motor_timer_interrupt_handler+0xa8>)
 8001908:	e9d3 1200 	ldrd	r1, r2, [r3]
 800190c:	f111 33ff 	adds.w	r3, r1, #4294967295
 8001910:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001914:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <motor_timer_interrupt_handler+0xa8>)
 8001916:	e9c2 3400 	strd	r3, r4, [r2]
	}

	if (ticks_before_next_step_counter <= 0)
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <motor_timer_interrupt_handler+0x94>)
 800191c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f174 0300 	sbcs.w	r3, r4, #0
 8001926:	da01      	bge.n	800192c <motor_timer_interrupt_handler+0x8c>
	{
		motor_make_one_step();
 8001928:	f7ff ffb0 	bl	800188c <motor_make_one_step>
	}

	// HAL_GPIO_TogglePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN);
}
 800192c:	bf00      	nop
 800192e:	bd98      	pop	{r3, r4, r7, pc}
 8001930:	20000038 	.word	0x20000038
 8001934:	20000188 	.word	0x20000188
 8001938:	20000030 	.word	0x20000030
 800193c:	20000044 	.word	0x20000044
 8001940:	200000b0 	.word	0x200000b0
 8001944:	20000208 	.word	0x20000208
 8001948:	200001f0 	.word	0x200001f0

0800194c <cyclic_movement_step>:

/*
 * Циклическое движение мотора в режиме экспозиции
 */
void cyclic_movement_step(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	if (motor.step_impulses_distance_from_limit_switch <= 0)					// если мы в крайней точке точке, ближайшей к начальному положению
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <cyclic_movement_step+0x68>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	dc07      	bgt.n	8001968 <cyclic_movement_step+0x1c>
	{
		motor.exposition_movement_direction = EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION;			// выставляем флаг движения от начального положения
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <cyclic_movement_step+0x68>)
 800195a:	2200      	movs	r2, #0
 800195c:	731a      	strb	r2, [r3, #12]
		motor_make_step_to_direction(MOVE_TO_COORD_END);											// делаем шаг в сторону от начального положения
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff fd74 	bl	800144c <motor_make_step_to_direction>
		reset_movement_counters();
 8001964:	f7ff fdc2 	bl	80014ec <reset_movement_counters>
	}
	/*
	 * если мы находимся в промежутке между крайними положениями растра (ближнее и дальнее)
	 */
	if ((motor.step_impulses_distance_from_limit_switch > 0) && \
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <cyclic_movement_step+0x68>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd10      	ble.n	8001992 <cyclic_movement_step+0x46>
			(motor.step_impulses_distance_from_limit_switch < EXPOSITITON_DISTANCE_STEP_IMPULSES))
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <cyclic_movement_step+0x68>)
 8001972:	681b      	ldr	r3, [r3, #0]
	if ((motor.step_impulses_distance_from_limit_switch > 0) && \
 8001974:	f240 7221 	movw	r2, #1825	; 0x721
 8001978:	4293      	cmp	r3, r2
 800197a:	dc0a      	bgt.n	8001992 <cyclic_movement_step+0x46>
	{
		if (motor.exposition_movement_direction == EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION)		// если выставлен флаг движения от начального положения
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <cyclic_movement_step+0x68>)
 800197e:	7b1b      	ldrb	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <cyclic_movement_step+0x40>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_END);										// делаем шаг от начального положения
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff fd61 	bl	800144c <motor_make_step_to_direction>
 800198a:	e002      	b.n	8001992 <cyclic_movement_step+0x46>
		}
		else
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);										// иначе делаем шаг в сторону начального положения
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fd5d 	bl	800144c <motor_make_step_to_direction>
		}
	}
	if (motor.step_impulses_distance_from_limit_switch >= EXPOSITITON_DISTANCE_STEP_IMPULSES)						// если мы в крайней точке, дальней от начального положения
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <cyclic_movement_step+0x68>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f240 7221 	movw	r2, #1825	; 0x721
 800199a:	4293      	cmp	r3, r2
 800199c:	dd07      	ble.n	80019ae <cyclic_movement_step+0x62>
	{
		motor.exposition_movement_direction = ON_TOMO_MOVEMENT_TO_INITIAL_POSITION;					// выставляем флаг движения к начальному положению
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <cyclic_movement_step+0x68>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	731a      	strb	r2, [r3, #12]
		motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);											// делаем шаг в сторону начального положения
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fd51 	bl	800144c <motor_make_step_to_direction>
		reset_movement_counters();
 80019aa:	f7ff fd9f 	bl	80014ec <reset_movement_counters>
	}
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001e0 	.word	0x200001e0

080019b8 <motor_direction_pin_set>:

/*
 * выставляем пин направления мотора
 */
void motor_direction_pin_set(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	switch (motor.motor_move_direction)																// если направление движения
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <motor_direction_pin_set+0x34>)
 80019be:	7a1b      	ldrb	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <motor_direction_pin_set+0x12>
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d007      	beq.n	80019d8 <motor_direction_pin_set+0x20>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_RESET);				// иначе выставляем "0" на пине направления
		}
		break;
	}
	}
}
 80019c8:	e00d      	b.n	80019e6 <motor_direction_pin_set+0x2e>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_RESET);				// выставляем "0" на пине направления
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <motor_direction_pin_set+0x38>)
 80019d2:	f000 fd73 	bl	80024bc <HAL_GPIO_WritePin>
		break;
 80019d6:	e006      	b.n	80019e6 <motor_direction_pin_set+0x2e>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_SET);					// выставляем "1" на пине направления
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019de:	4804      	ldr	r0, [pc, #16]	; (80019f0 <motor_direction_pin_set+0x38>)
 80019e0:	f000 fd6c 	bl	80024bc <HAL_GPIO_WritePin>
		break;
 80019e4:	bf00      	nop
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200001e0 	.word	0x200001e0
 80019f0:	48000400 	.word	0x48000400

080019f4 <check_limit_switch_and_make_step>:

/*
 * проверяем состояние концевика и совершаем шаг
 */
void check_limit_switch_and_make_step(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	/*
	 * если направление движения к начальному положению, и концевик не активен, и не пройдено аварийное количество шагов к начальному положению
	 */
	if ((motor.motor_move_direction == MOVE_TO_COORD_ORIGIN) && \
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 80019fa:	7a1b      	ldrb	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d119      	bne.n	8001a34 <check_limit_switch_and_make_step+0x40>
		(!(limit_switch_return_state())) && \
 8001a00:	f000 f84c 	bl	8001a9c <limit_switch_return_state>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
	if ((motor.motor_move_direction == MOVE_TO_COORD_ORIGIN) && \
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d011      	beq.n	8001a34 <check_limit_switch_and_make_step+0x40>
		(motor.limit_emergency_counter < EMERGENCY_STEP_IMPULSES_TO_LIMIT))
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a12:	685b      	ldr	r3, [r3, #4]
		(!(limit_switch_return_state())) && \
 8001a14:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	dc0b      	bgt.n	8001a34 <check_limit_switch_and_make_step+0x40>
	{
		step_toggle();																				// совершаем шаг
 8001a1c:	f000 f81c 	bl	8001a58 <step_toggle>
		motor.step_impulses_distance_from_limit_switch = motor.step_impulses_distance_from_limit_switch - 1;		// декрементируем счётчик расстояния от начального положения
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a28:	6013      	str	r3, [r2, #0]
		motor.limit_emergency_counter = motor.limit_emergency_counter + 1;							// инкрементируем аварийный счётчик шагов
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a32:	6053      	str	r3, [r2, #4]
	}
	if (motor.motor_move_direction == MOVE_TO_COORD_END)											// если направлениение движения от начального положения
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a36:	7a1b      	ldrb	r3, [r3, #8]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d109      	bne.n	8001a50 <check_limit_switch_and_make_step+0x5c>
	{
		step_toggle();																				// совершаем шаг
 8001a3c:	f000 f80c 	bl	8001a58 <step_toggle>
		motor.step_impulses_distance_from_limit_switch = motor.step_impulses_distance_from_limit_switch + 1;		// инкрементируем счётчик расстояния от начального положения
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a48:	6013      	str	r3, [r2, #0]
		motor.limit_emergency_counter = 0;															// обнуляем аварийный счётчик шагов
 8001a4a:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <check_limit_switch_and_make_step+0x60>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
	}
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200001e0 	.word	0x200001e0

08001a58 <step_toggle>:

/*
 * совершаем шаг
 */
void step_toggle(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	switch (motor.step_pin_current_phase)															// если текущее логическое состояние на пине шага
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <step_toggle+0x3c>)
 8001a5e:	7a5b      	ldrb	r3, [r3, #9]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <step_toggle+0x12>
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d009      	beq.n	8001a7c <step_toggle+0x24>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_RESET);					// выставляем "0" на пине шага
		motor.step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
		break;
	}
	}
}
 8001a68:	e011      	b.n	8001a8e <step_toggle+0x36>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_SET);					// выставляем "1" на пине шага
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	480a      	ldr	r0, [pc, #40]	; (8001a98 <step_toggle+0x40>)
 8001a70:	f000 fd24 	bl	80024bc <HAL_GPIO_WritePin>
		motor.step_pin_current_phase = STEP_HIGH_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "1"
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <step_toggle+0x3c>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	725a      	strb	r2, [r3, #9]
		break;
 8001a7a:	e008      	b.n	8001a8e <step_toggle+0x36>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_RESET);					// выставляем "0" на пине шага
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <step_toggle+0x40>)
 8001a82:	f000 fd1b 	bl	80024bc <HAL_GPIO_WritePin>
		motor.step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
 8001a86:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <step_toggle+0x3c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	725a      	strb	r2, [r3, #9]
		break;
 8001a8c:	bf00      	nop
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001e0 	.word	0x200001e0
 8001a98:	48000400 	.word	0x48000400

08001a9c <limit_switch_return_state>:

/*
 * опрашиваем и возрващаем состояние концевика
 */
_Bool limit_switch_return_state(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	_Bool current_state;																			// флаг состояния концевика
	check_input_signal_state(&limit_switch.GRID_END_POINT_IN_signal);								// опрашиваем состояние пина концевика
 8001aa2:	480a      	ldr	r0, [pc, #40]	; (8001acc <limit_switch_return_state+0x30>)
 8001aa4:	f7ff fa04 	bl	8000eb0 <check_input_signal_state>
	if (LIMIT_SWITCH_LOGIC_LEVEL_INVERTED)															// если логический уровень концевика инвертирован аппаратно
	{
		if (limit_switch.GRID_END_POINT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)			// если на пине концевика "0"
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <limit_switch_return_state+0x30>)
 8001aaa:	7a1b      	ldrb	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <limit_switch_return_state+0x20>
		{
			current_state = 1;																		// выставляем флаг концевика в "1"
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	71fb      	strb	r3, [r7, #7]
			motor.step_impulses_distance_from_limit_switch = 0;												// обнуляем счётчик расстояния до концевика
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <limit_switch_return_state+0x34>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e001      	b.n	8001ac0 <limit_switch_return_state+0x24>
		}
		else
		{
			current_state = 0;																		// иначе выставляем флаг концевика в "0"
 8001abc:	2300      	movs	r3, #0
 8001abe:	71fb      	strb	r3, [r7, #7]
		{
			current_state = 1;																		// иначе выставляем флаг концевика в "1"
			motor.step_impulses_distance_from_limit_switch = 0;												// обнуляем счётчик расстояния до концевика
		}
	}
	return current_state;																			// возвращаем флаг состояния концевика
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200000c4 	.word	0x200000c4
 8001ad0:	200001e0 	.word	0x200001e0

08001ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ad6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ada:	490e      	ldr	r1, [pc, #56]	; (8001b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <LoopForever+0xe>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af0:	4c0b      	ldr	r4, [pc, #44]	; (8001b20 <LoopForever+0x16>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001afe:	f7fe ffd7 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b02:	f002 f9fb 	bl	8003efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b06:	f7fe fd07 	bl	8000518 <main>

08001b0a <LoopForever>:

LoopForever:
    b LoopForever
 8001b0a:	e7fe      	b.n	8001b0a <LoopForever>
  ldr   r0, =_estack
 8001b0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b18:	08003f8c 	.word	0x08003f8c
  ldr r2, =_sbss
 8001b1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b20:	20000214 	.word	0x20000214

08001b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC1_2_IRQHandler>

08001b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f939 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f80e 	bl	8001b58 <HAL_InitTick>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	71fb      	strb	r3, [r7, #7]
 8001b46:	e001      	b.n	8001b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b48:	f7fe fec4 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_InitTick+0x68>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d022      	beq.n	8001bb2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_InitTick+0x6c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_InitTick+0x68>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 f944 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10f      	bne.n	8001bac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	d809      	bhi.n	8001ba6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b92:	2200      	movs	r2, #0
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9a:	f000 f910 	bl	8001dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_InitTick+0x70>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e007      	b.n	8001bb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e004      	b.n	8001bb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e001      	b.n	8001bb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x1c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x20>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_IncTick+0x1c>)
 8001bdc:	6013      	str	r3, [r2, #0]
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	20000210 	.word	0x20000210
 8001bec:	20000008 	.word	0x20000008

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000210 	.word	0x20000210

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff29 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff40 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff90 	bl	8001cfc <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5f 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff33 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa4 	bl	8001d64 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e147      	b.n	80020ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fd64 	bl	800091c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0210 	bic.w	r2, r2, #16
 8001e62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e64:	f7ff fec4 	bl	8001bf0 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e6a:	e012      	b.n	8001e92 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e6c:	f7ff fec0 	bl	8001bf0 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d90b      	bls.n	8001e92 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e11b      	b.n	80020ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d0e5      	beq.n	8001e6c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb0:	f7ff fe9e 	bl	8001bf0 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001eb6:	e012      	b.n	8001ede <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001eb8:	f7ff fe9a 	bl	8001bf0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b0a      	cmp	r3, #10
 8001ec4:	d90b      	bls.n	8001ede <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0f5      	b.n	80020ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0e5      	beq.n	8001eb8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0202 	orr.w	r2, r2, #2
 8001efa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a74      	ldr	r2, [pc, #464]	; (80020d4 <HAL_FDCAN_Init+0x2ac>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d103      	bne.n	8001f0e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001f06:	4a74      	ldr	r2, [pc, #464]	; (80020d8 <HAL_FDCAN_Init+0x2b0>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7c1b      	ldrb	r3, [r3, #16]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f24:	619a      	str	r2, [r3, #24]
 8001f26:	e007      	b.n	8001f38 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f36:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7c5b      	ldrb	r3, [r3, #17]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f4e:	619a      	str	r2, [r3, #24]
 8001f50:	e007      	b.n	8001f62 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f60:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7c9b      	ldrb	r3, [r3, #18]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f78:	619a      	str	r2, [r3, #24]
 8001f7a:	e007      	b.n	8001f8c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f8a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001fb0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0210 	bic.w	r2, r2, #16
 8001fc0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0204 	orr.w	r2, r2, #4
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	e02c      	b.n	8002036 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d028      	beq.n	8002036 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d01c      	beq.n	8002026 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ffa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0210 	orr.w	r2, r2, #16
 800200a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d110      	bne.n	8002036 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	e007      	b.n	8002036 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	3b01      	subs	r3, #1
 800203c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	3b01      	subs	r3, #1
 8002044:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002046:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800204e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	3b01      	subs	r3, #1
 8002058:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800205e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002060:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800206a:	d115      	bne.n	8002098 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	3b01      	subs	r3, #1
 8002078:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800207a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	3b01      	subs	r3, #1
 8002082:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002084:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	3b01      	subs	r3, #1
 800208e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002094:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002096:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f814 	bl	80020dc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40006400 	.word	0x40006400
 80020d8:	40006500 	.word	0x40006500

080020dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80020e6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	041a      	lsls	r2, r3, #16
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800211c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	061a      	lsls	r2, r3, #24
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e005      	b.n	800216a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3304      	adds	r3, #4
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	429a      	cmp	r2, r3
 8002174:	d3f3      	bcc.n	800215e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	4000a400 	.word	0x4000a400

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002196:	e15a      	b.n	800244e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 814c 	beq.w	8002448 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d00b      	beq.n	80021d0 <HAL_GPIO_Init+0x48>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d007      	beq.n	80021d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c4:	2b11      	cmp	r3, #17
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d130      	bne.n	8002232 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002206:	2201      	movs	r2, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	f003 0201 	and.w	r2, r3, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0xea>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b12      	cmp	r3, #18
 8002270:	d123      	bne.n	80022ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	6939      	ldr	r1, [r7, #16]
 80022b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0203 	and.w	r2, r3, #3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80a6 	beq.w	8002448 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fc:	4b5b      	ldr	r3, [pc, #364]	; (800246c <HAL_GPIO_Init+0x2e4>)
 80022fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002300:	4a5a      	ldr	r2, [pc, #360]	; (800246c <HAL_GPIO_Init+0x2e4>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6613      	str	r3, [r2, #96]	; 0x60
 8002308:	4b58      	ldr	r3, [pc, #352]	; (800246c <HAL_GPIO_Init+0x2e4>)
 800230a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002314:	4a56      	ldr	r2, [pc, #344]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800233e:	d01f      	beq.n	8002380 <HAL_GPIO_Init+0x1f8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_GPIO_Init+0x2ec>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d019      	beq.n	800237c <HAL_GPIO_Init+0x1f4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_GPIO_Init+0x2f0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_GPIO_Init+0x1f0>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_GPIO_Init+0x2f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00d      	beq.n	8002374 <HAL_GPIO_Init+0x1ec>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a49      	ldr	r2, [pc, #292]	; (8002480 <HAL_GPIO_Init+0x2f8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <HAL_GPIO_Init+0x1e8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a48      	ldr	r2, [pc, #288]	; (8002484 <HAL_GPIO_Init+0x2fc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_GPIO_Init+0x1e4>
 8002368:	2305      	movs	r3, #5
 800236a:	e00a      	b.n	8002382 <HAL_GPIO_Init+0x1fa>
 800236c:	2306      	movs	r3, #6
 800236e:	e008      	b.n	8002382 <HAL_GPIO_Init+0x1fa>
 8002370:	2304      	movs	r3, #4
 8002372:	e006      	b.n	8002382 <HAL_GPIO_Init+0x1fa>
 8002374:	2303      	movs	r3, #3
 8002376:	e004      	b.n	8002382 <HAL_GPIO_Init+0x1fa>
 8002378:	2302      	movs	r3, #2
 800237a:	e002      	b.n	8002382 <HAL_GPIO_Init+0x1fa>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_GPIO_Init+0x1fa>
 8002380:	2300      	movs	r3, #0
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	f002 0203 	and.w	r2, r2, #3
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	4093      	lsls	r3, r2
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002392:	4937      	ldr	r1, [pc, #220]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023c4:	4a30      	ldr	r2, [pc, #192]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023ca:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ee:	4a26      	ldr	r2, [pc, #152]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <HAL_GPIO_Init+0x300>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_GPIO_Init+0x300>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002442:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_GPIO_Init+0x300>)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	f47f ae9d 	bne.w	8002198 <HAL_GPIO_Init+0x10>
  }
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	40010000 	.word	0x40010000
 8002474:	48000400 	.word	0x48000400
 8002478:	48000800 	.word	0x48000800
 800247c:	48000c00 	.word	0x48000c00
 8002480:	48001000 	.word	0x48001000
 8002484:	48001400 	.word	0x48001400
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d141      	bne.n	800257e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024fa:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d131      	bne.n	800256c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002508:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800250e:	4a46      	ldr	r2, [pc, #280]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002518:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002520:	4a41      	ldr	r2, [pc, #260]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002526:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002528:	4b40      	ldr	r3, [pc, #256]	; (800262c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2232      	movs	r2, #50	; 0x32
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	4a3f      	ldr	r2, [pc, #252]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	0c9b      	lsrs	r3, r3, #18
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800253e:	e002      	b.n	8002546 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3b01      	subs	r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002546:	4b38      	ldr	r3, [pc, #224]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d102      	bne.n	800255a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f2      	bne.n	8002540 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002566:	d158      	bne.n	800261a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e057      	b.n	800261c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002572:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800257c:	e04d      	b.n	800261a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d141      	bne.n	800260a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002586:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002592:	d131      	bne.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800259a:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a4:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2232      	movs	r2, #50	; 0x32
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	0c9b      	lsrs	r3, r3, #18
 80025c6:	3301      	adds	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ca:	e002      	b.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025de:	d102      	bne.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f2      	bne.n	80025cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f2:	d112      	bne.n	800261a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e011      	b.n	800261c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002608:	e007      	b.n	800261a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002618:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40007000 	.word	0x40007000
 800262c:	20000000 	.word	0x20000000
 8002630:	431bde83 	.word	0x431bde83

08002634 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800263e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002642:	6093      	str	r3, [r2, #8]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40007000 	.word	0x40007000

08002654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e308      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d075      	beq.n	800275e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002672:	4ba3      	ldr	r3, [pc, #652]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800267c:	4ba0      	ldr	r3, [pc, #640]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d102      	bne.n	8002692 <HAL_RCC_OscConfig+0x3e>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d002      	beq.n	8002698 <HAL_RCC_OscConfig+0x44>
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d10b      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	4b99      	ldr	r3, [pc, #612]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05b      	beq.n	800275c <HAL_RCC_OscConfig+0x108>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d157      	bne.n	800275c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e2e3      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x74>
 80026ba:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a90      	ldr	r2, [pc, #576]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e01d      	b.n	8002704 <HAL_RCC_OscConfig+0xb0>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x98>
 80026d2:	4b8b      	ldr	r3, [pc, #556]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a8a      	ldr	r2, [pc, #552]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a87      	ldr	r2, [pc, #540]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0xb0>
 80026ec:	4b84      	ldr	r3, [pc, #528]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a83      	ldr	r2, [pc, #524]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b81      	ldr	r3, [pc, #516]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a80      	ldr	r2, [pc, #512]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7ff fa70 	bl	8001bf0 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002714:	f7ff fa6c 	bl	8001bf0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e2a8      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002726:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0xc0>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7ff fa5c 	bl	8001bf0 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff fa58 	bl	8001bf0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e294      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274e:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0xe8>
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d075      	beq.n	8002856 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276a:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002774:	4b62      	ldr	r3, [pc, #392]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0x136>
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d002      	beq.n	8002790 <HAL_RCC_OscConfig+0x13c>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d11f      	bne.n	80027d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x154>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e267      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b55      	ldr	r3, [pc, #340]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	4952      	ldr	r1, [pc, #328]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027bc:	4b51      	ldr	r3, [pc, #324]	; (8002904 <HAL_RCC_OscConfig+0x2b0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff f9c9 	bl	8001b58 <HAL_InitTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d043      	beq.n	8002854 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e253      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d023      	beq.n	8002820 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d8:	4b49      	ldr	r3, [pc, #292]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a48      	ldr	r2, [pc, #288]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7ff fa04 	bl	8001bf0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ec:	f7ff fa00 	bl	8001bf0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e23c      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fe:	4b40      	ldr	r3, [pc, #256]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	4939      	ldr	r1, [pc, #228]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
 800281e:	e01a      	b.n	8002856 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a36      	ldr	r2, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7ff f9e0 	bl	8001bf0 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002834:	f7ff f9dc 	bl	8001bf0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e218      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002846:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x1e0>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d03c      	beq.n	80028dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286a:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002870:	4a23      	ldr	r2, [pc, #140]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7ff f9b9 	bl	8001bf0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002882:	f7ff f9b5 	bl	8001bf0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1f1      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ef      	beq.n	8002882 <HAL_RCC_OscConfig+0x22e>
 80028a2:	e01b      	b.n	80028dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7ff f99c 	bl	8001bf0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028bc:	f7ff f998 	bl	8001bf0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1d4      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ef      	bne.n	80028bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80ab 	beq.w	8002a40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x2b4>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e005      	b.n	800290a <HAL_RCC_OscConfig+0x2b6>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	20000004 	.word	0x20000004
 8002908:	2300      	movs	r3, #0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4baf      	ldr	r3, [pc, #700]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	4aae      	ldr	r2, [pc, #696]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	; 0x58
 800291a:	4bac      	ldr	r3, [pc, #688]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002926:	2301      	movs	r3, #1
 8002928:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292a:	4ba9      	ldr	r3, [pc, #676]	; (8002bd0 <HAL_RCC_OscConfig+0x57c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d118      	bne.n	8002968 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002936:	4ba6      	ldr	r3, [pc, #664]	; (8002bd0 <HAL_RCC_OscConfig+0x57c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4aa5      	ldr	r2, [pc, #660]	; (8002bd0 <HAL_RCC_OscConfig+0x57c>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002942:	f7ff f955 	bl	8001bf0 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294a:	f7ff f951 	bl	8001bf0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e18d      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	4b9c      	ldr	r3, [pc, #624]	; (8002bd0 <HAL_RCC_OscConfig+0x57c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d108      	bne.n	8002982 <HAL_RCC_OscConfig+0x32e>
 8002970:	4b96      	ldr	r3, [pc, #600]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	4a95      	ldr	r2, [pc, #596]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002980:	e024      	b.n	80029cc <HAL_RCC_OscConfig+0x378>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b05      	cmp	r3, #5
 8002988:	d110      	bne.n	80029ac <HAL_RCC_OscConfig+0x358>
 800298a:	4b90      	ldr	r3, [pc, #576]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	4a8e      	ldr	r2, [pc, #568]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299a:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	4a8a      	ldr	r2, [pc, #552]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029aa:	e00f      	b.n	80029cc <HAL_RCC_OscConfig+0x378>
 80029ac:	4b87      	ldr	r3, [pc, #540]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a86      	ldr	r2, [pc, #536]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029bc:	4b83      	ldr	r3, [pc, #524]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	4a82      	ldr	r2, [pc, #520]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d016      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff f90c 	bl	8001bf0 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7ff f908 	bl	8001bf0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e142      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f2:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ed      	beq.n	80029dc <HAL_RCC_OscConfig+0x388>
 8002a00:	e015      	b.n	8002a2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7ff f8f5 	bl	8001bf0 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7ff f8f1 	bl	8001bf0 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e12b      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ed      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a2e:	7ffb      	ldrb	r3, [r7, #31]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b65      	ldr	r3, [pc, #404]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	4a64      	ldr	r2, [pc, #400]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d03c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a54:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a5a:	4a5c      	ldr	r2, [pc, #368]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7ff f8c4 	bl	8001bf0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a6c:	f7ff f8c0 	bl	8001bf0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0fc      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a7e:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ef      	beq.n	8002a6c <HAL_RCC_OscConfig+0x418>
 8002a8c:	e01b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a8e:	4b4f      	ldr	r3, [pc, #316]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a94:	4a4d      	ldr	r2, [pc, #308]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7ff f8a7 	bl	8001bf0 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa6:	f7ff f8a3 	bl	8001bf0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0df      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ab8:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1ef      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80d3 	beq.w	8002c76 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad0:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	f000 808d 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d15a      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002aec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7ff f87d 	bl	8001bf0 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afa:	f7ff f879 	bl	8001bf0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0b5      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b18:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCC_OscConfig+0x580>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6a11      	ldr	r1, [r2, #32]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	4311      	orrs	r1, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b32:	0212      	lsls	r2, r2, #8
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b3a:	0852      	lsrs	r2, r2, #1
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0552      	lsls	r2, r2, #21
 8002b40:	4311      	orrs	r1, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b46:	0852      	lsrs	r2, r2, #1
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	0652      	lsls	r2, r2, #25
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b52:	06d2      	lsls	r2, r2, #27
 8002b54:	430a      	orrs	r2, r1
 8002b56:	491d      	ldr	r1, [pc, #116]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff f83c 	bl	8001bf0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7ff f838 	bl	8001bf0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e074      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x528>
 8002b9a:	e06c      	b.n	8002c76 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_RCC_OscConfig+0x578>)
 8002bba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7ff f814 	bl	8001bf0 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bca:	e00e      	b.n	8002bea <HAL_RCC_OscConfig+0x596>
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff f80a 	bl	8001bf0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e046      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_OscConfig+0x62c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x584>
 8002bf6:	e03e      	b.n	8002c76 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e039      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCC_OscConfig+0x62c>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d12c      	bne.n	8002c72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d123      	bne.n	8002c72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11b      	bne.n	8002c72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d113      	bne.n	8002c72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d109      	bne.n	8002c72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000

08002c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e11e      	b.n	8002eda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b91      	ldr	r3, [pc, #580]	; (8002ee4 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d910      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b8e      	ldr	r3, [pc, #568]	; (8002ee4 <HAL_RCC_ClockConfig+0x260>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 020f 	bic.w	r2, r3, #15
 8002cb2:	498c      	ldr	r1, [pc, #560]	; (8002ee4 <HAL_RCC_ClockConfig+0x260>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b8a      	ldr	r3, [pc, #552]	; (8002ee4 <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e106      	b.n	8002eda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d073      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d129      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce0:	4b81      	ldr	r3, [pc, #516]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0f4      	b.n	8002eda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002cf0:	f000 f966 	bl	8002fc0 <RCC_GetSysClockFreqFromPLLSource>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4a7c      	ldr	r2, [pc, #496]	; (8002eec <HAL_RCC_ClockConfig+0x268>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d93f      	bls.n	8002d7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cfe:	4b7a      	ldr	r3, [pc, #488]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d033      	beq.n	8002d7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d12f      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d1e:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d26:	4a70      	ldr	r2, [pc, #448]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e024      	b.n	8002d7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0c6      	b.n	8002eda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4c:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0be      	b.n	8002eda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d5c:	f000 f8ce 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4a61      	ldr	r2, [pc, #388]	; (8002eec <HAL_RCC_ClockConfig+0x268>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d909      	bls.n	8002d7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d72:	4a5d      	ldr	r2, [pc, #372]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d7e:	4b5a      	ldr	r3, [pc, #360]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4957      	ldr	r1, [pc, #348]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d90:	f7fe ff2e 	bl	8001bf0 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d98:	f7fe ff2a 	bl	8001bf0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e095      	b.n	8002eda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	4b4e      	ldr	r3, [pc, #312]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 020c 	and.w	r2, r3, #12
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d1eb      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a42      	ldr	r2, [pc, #264]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002dde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002de2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002df8:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4936      	ldr	r1, [pc, #216]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	d105      	bne.n	8002e26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e1a:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4a32      	ldr	r2, [pc, #200]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002e20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_RCC_ClockConfig+0x260>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d21d      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <HAL_RCC_ClockConfig+0x260>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 020f 	bic.w	r2, r3, #15
 8002e3c:	4929      	ldr	r1, [pc, #164]	; (8002ee4 <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e44:	f7fe fed4 	bl	8001bf0 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe fed0 	bl	8001bf0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e03b      	b.n	8002eda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1ed      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4917      	ldr	r1, [pc, #92]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	490f      	ldr	r1, [pc, #60]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eae:	f000 f825 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_ClockConfig+0x264>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <HAL_RCC_ClockConfig+0x26c>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x270>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fe40 	bl	8001b58 <HAL_InitTick>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	04c4b400 	.word	0x04c4b400
 8002ef0:	08003f6c 	.word	0x08003f6c
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f02:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f0e:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	e047      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d102      	bne.n	8002f26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	e03e      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d136      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3301      	adds	r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f50:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5a:	68d2      	ldr	r2, [r2, #12]
 8002f5c:	0a12      	lsrs	r2, r2, #8
 8002f5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	617b      	str	r3, [r7, #20]
      break;
 8002f68:	e00c      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	0a12      	lsrs	r2, r2, #8
 8002f78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
      break;
 8002f82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0e5b      	lsrs	r3, r3, #25
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e001      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fa4:	693b      	ldr	r3, [r7, #16]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	01e84800 	.word	0x01e84800

08002fc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d10c      	bne.n	8002ffe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fe4:	4a17      	ldr	r2, [pc, #92]	; (8003044 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	4a14      	ldr	r2, [pc, #80]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fee:	68d2      	ldr	r2, [r2, #12]
 8002ff0:	0a12      	lsrs	r2, r2, #8
 8002ff2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	617b      	str	r3, [r7, #20]
    break;
 8002ffc:	e00c      	b.n	8003018 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	0a12      	lsrs	r2, r2, #8
 800300c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
    break;
 8003016:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0e5b      	lsrs	r3, r3, #25
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003032:	687b      	ldr	r3, [r7, #4]
}
 8003034:	4618      	mov	r0, r3
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40021000 	.word	0x40021000
 8003044:	01e84800 	.word	0x01e84800
 8003048:	00f42400 	.word	0x00f42400

0800304c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003054:	2300      	movs	r3, #0
 8003056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003058:	2300      	movs	r3, #0
 800305a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8098 	beq.w	800319a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306e:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	4b40      	ldr	r3, [pc, #256]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	4a3f      	ldr	r2, [pc, #252]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003084:	6593      	str	r3, [r2, #88]	; 0x58
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003092:	2301      	movs	r3, #1
 8003094:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003096:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a39      	ldr	r2, [pc, #228]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a2:	f7fe fda5 	bl	8001bf0 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030a8:	e009      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe fda1 	bl	8001bf0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d902      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	74fb      	strb	r3, [r7, #19]
        break;
 80030bc:	e005      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030be:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0ef      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d159      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01e      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d019      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a1b      	ldr	r2, [pc, #108]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe fd61 	bl	8001bf0 <HAL_GetTick>
 800312e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003130:	e00b      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe fd5d 	bl	8001bf0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d902      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	74fb      	strb	r3, [r7, #19]
            break;
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ec      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003174:	e008      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	74bb      	strb	r3, [r7, #18]
 800317a:	e005      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003188:	7c7b      	ldrb	r3, [r7, #17]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4ba6      	ldr	r3, [pc, #664]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4aa5      	ldr	r2, [pc, #660]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a6:	4ba0      	ldr	r3, [pc, #640]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f023 0203 	bic.w	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	499c      	ldr	r1, [pc, #624]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c8:	4b97      	ldr	r3, [pc, #604]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 020c 	bic.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4994      	ldr	r1, [pc, #592]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ea:	4b8f      	ldr	r3, [pc, #572]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	498b      	ldr	r1, [pc, #556]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800320c:	4b86      	ldr	r3, [pc, #536]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	4983      	ldr	r1, [pc, #524]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800322e:	4b7e      	ldr	r3, [pc, #504]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	497a      	ldr	r1, [pc, #488]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003250:	4b75      	ldr	r3, [pc, #468]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4972      	ldr	r1, [pc, #456]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003272:	4b6d      	ldr	r3, [pc, #436]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	4969      	ldr	r1, [pc, #420]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003294:	4b64      	ldr	r3, [pc, #400]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4961      	ldr	r1, [pc, #388]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032b6:	4b5c      	ldr	r3, [pc, #368]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	4958      	ldr	r1, [pc, #352]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d8:	4b53      	ldr	r3, [pc, #332]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	4950      	ldr	r1, [pc, #320]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f6:	d105      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f8:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003302:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330c:	2b00      	cmp	r3, #0
 800330e:	d015      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003310:	4b45      	ldr	r3, [pc, #276]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	4942      	ldr	r1, [pc, #264]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332e:	d105      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a3c      	ldr	r2, [pc, #240]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d015      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003348:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4934      	ldr	r1, [pc, #208]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003366:	d105      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003372:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d015      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	4926      	ldr	r1, [pc, #152]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339e:	d105      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a20      	ldr	r2, [pc, #128]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d015      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	4918      	ldr	r1, [pc, #96]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d6:	d105      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a12      	ldr	r2, [pc, #72]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	490a      	ldr	r1, [pc, #40]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a04      	ldr	r2, [pc, #16]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800341c:	7cbb      	ldrb	r3, [r7, #18]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000

0800342c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e049      	b.n	80034d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd faa6 	bl	80009a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f000 fb52 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d001      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e04a      	b.n	800358a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <HAL_TIM_Base_Start_IT+0xbc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d018      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x6c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351e:	d013      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x6c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_TIM_Base_Start_IT+0xc0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00e      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x6c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d009      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x6c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x6c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d115      	bne.n	8003574 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_TIM_Base_Start_IT+0xd0>)
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b06      	cmp	r3, #6
 8003558:	d015      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0xaa>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d011      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	e008      	b.n	8003586 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e000      	b.n	8003588 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40000400 	.word	0x40000400
 80035a0:	40000800 	.word	0x40000800
 80035a4:	40013400 	.word	0x40013400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	00010007 	.word	0x00010007

080035b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10f      	bne.n	80035f8 <HAL_TIM_Base_Stop_IT+0x48>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	f244 4344 	movw	r3, #17476	; 0x4444
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_Base_Stop_IT+0x48>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d122      	bne.n	800366a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d11b      	bne.n	800366a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f06f 0202 	mvn.w	r2, #2
 800363a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fa41 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003656:	e005      	b.n	8003664 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa33 	bl	8003ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fa44 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d122      	bne.n	80036be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b04      	cmp	r3, #4
 8003684:	d11b      	bne.n	80036be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f06f 0204 	mvn.w	r2, #4
 800368e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fa17 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 80036aa:	e005      	b.n	80036b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fa09 	bl	8003ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fa1a 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d122      	bne.n	8003712 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d11b      	bne.n	8003712 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f06f 0208 	mvn.w	r2, #8
 80036e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2204      	movs	r2, #4
 80036e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f9ed 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 80036fe:	e005      	b.n	800370c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f9df 	bl	8003ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f9f0 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b10      	cmp	r3, #16
 800371e:	d122      	bne.n	8003766 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b10      	cmp	r3, #16
 800372c:	d11b      	bne.n	8003766 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0210 	mvn.w	r2, #16
 8003736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2208      	movs	r2, #8
 800373c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f9c3 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003752:	e005      	b.n	8003760 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f9b5 	bl	8003ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f9c6 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10e      	bne.n	8003792 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f06f 0201 	mvn.w	r2, #1
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f98f 	bl	8003ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d10e      	bne.n	80037be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d107      	bne.n	80037be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb63 	bl	8003e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037cc:	d10e      	bne.n	80037ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d107      	bne.n	80037ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fb56 	bl	8003e98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f974 	bl	8003b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b20      	cmp	r3, #32
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b20      	cmp	r3, #32
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0220 	mvn.w	r2, #32
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fb16 	bl	8003e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003852:	d10f      	bne.n	8003874 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003862:	d107      	bne.n	8003874 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fb1c 	bl	8003eac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003882:	d10f      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fb0e 	bl	8003ec0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b2:	d10f      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fb00 	bl	8003ed4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038e2:	d10f      	bne.n	8003904 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 faf2 	bl	8003ee8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_TIM_ConfigClockSource+0x18>
 8003920:	2302      	movs	r3, #2
 8003922:	e0b9      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x18c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b70      	cmp	r3, #112	; 0x70
 800395e:	d02e      	beq.n	80039be <HAL_TIM_ConfigClockSource+0xb2>
 8003960:	2b70      	cmp	r3, #112	; 0x70
 8003962:	d812      	bhi.n	800398a <HAL_TIM_ConfigClockSource+0x7e>
 8003964:	2b30      	cmp	r3, #48	; 0x30
 8003966:	f000 8084 	beq.w	8003a72 <HAL_TIM_ConfigClockSource+0x166>
 800396a:	2b30      	cmp	r3, #48	; 0x30
 800396c:	d806      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x70>
 800396e:	2b10      	cmp	r3, #16
 8003970:	d07f      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x166>
 8003972:	2b20      	cmp	r3, #32
 8003974:	d07d      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x166>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d07b      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800397a:	e084      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800397c:	2b50      	cmp	r3, #80	; 0x50
 800397e:	d048      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x106>
 8003980:	2b60      	cmp	r3, #96	; 0x60
 8003982:	d056      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x126>
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d064      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8003988:	e07d      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800398a:	4a45      	ldr	r2, [pc, #276]	; (8003aa0 <HAL_TIM_ConfigClockSource+0x194>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d070      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x166>
 8003990:	4a43      	ldr	r2, [pc, #268]	; (8003aa0 <HAL_TIM_ConfigClockSource+0x194>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d809      	bhi.n	80039aa <HAL_TIM_ConfigClockSource+0x9e>
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399a:	d027      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0xe0>
 800399c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80039a0:	d067      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x166>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d06d      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80039a8:	e06d      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80039aa:	4a3e      	ldr	r2, [pc, #248]	; (8003aa4 <HAL_TIM_ConfigClockSource+0x198>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d060      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x166>
 80039b0:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_TIM_ConfigClockSource+0x19c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d05d      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x166>
 80039b6:	4a3d      	ldr	r2, [pc, #244]	; (8003aac <HAL_TIM_ConfigClockSource+0x1a0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d05a      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x166>
      break;
 80039bc:	e063      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6899      	ldr	r1, [r3, #8]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f000 f9ad 	bl	8003d2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	609a      	str	r2, [r3, #8]
      break;
 80039ea:	e04c      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f000 f996 	bl	8003d2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0e:	609a      	str	r2, [r3, #8]
      break;
 8003a10:	e039      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 f908 	bl	8003c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2150      	movs	r1, #80	; 0x50
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f961 	bl	8003cf2 <TIM_ITRx_SetConfig>
      break;
 8003a30:	e029      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 f927 	bl	8003c92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2160      	movs	r1, #96	; 0x60
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f951 	bl	8003cf2 <TIM_ITRx_SetConfig>
      break;
 8003a50:	e019      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 f8e8 	bl	8003c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2140      	movs	r1, #64	; 0x40
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f941 	bl	8003cf2 <TIM_ITRx_SetConfig>
      break;
 8003a70:	e009      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f000 f938 	bl	8003cf2 <TIM_ITRx_SetConfig>
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003a84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	00100020 	.word	0x00100020
 8003aa4:	00100040 	.word	0x00100040
 8003aa8:	00100070 	.word	0x00100070
 8003aac:	00100030 	.word	0x00100030

08003ab0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <TIM_Base_SetConfig+0x104>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00f      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d00b      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <TIM_Base_SetConfig+0x108>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a38      	ldr	r2, [pc, #224]	; (8003c20 <TIM_Base_SetConfig+0x10c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a37      	ldr	r2, [pc, #220]	; (8003c24 <TIM_Base_SetConfig+0x110>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2d      	ldr	r2, [pc, #180]	; (8003c18 <TIM_Base_SetConfig+0x104>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01b      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6c:	d017      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	; (8003c1c <TIM_Base_SetConfig+0x108>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <TIM_Base_SetConfig+0x10c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00f      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <TIM_Base_SetConfig+0x110>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <TIM_Base_SetConfig+0x114>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <TIM_Base_SetConfig+0x118>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <TIM_Base_SetConfig+0x11c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <TIM_Base_SetConfig+0x104>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00f      	beq.n	8003bfc <TIM_Base_SetConfig+0xe8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <TIM_Base_SetConfig+0x110>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <TIM_Base_SetConfig+0xe8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a10      	ldr	r2, [pc, #64]	; (8003c28 <TIM_Base_SetConfig+0x114>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_Base_SetConfig+0xe8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0f      	ldr	r2, [pc, #60]	; (8003c2c <TIM_Base_SetConfig+0x118>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_Base_SetConfig+0xe8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <TIM_Base_SetConfig+0x11c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d103      	bne.n	8003c04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	615a      	str	r2, [r3, #20]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40013400 	.word	0x40013400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800

08003c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 030a 	bic.w	r3, r3, #10
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b087      	sub	sp, #28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f023 0210 	bic.w	r2, r3, #16
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	031b      	lsls	r3, r3, #12
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f043 0307 	orr.w	r3, r3, #7
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	609a      	str	r2, [r3, #8]
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e065      	b.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2c      	ldr	r2, [pc, #176]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d004      	beq.n	8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2b      	ldr	r2, [pc, #172]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d108      	bne.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d018      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d013      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10c      	bne.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40013400 	.word	0x40013400
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40014000 	.word	0x40014000

08003e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <__libc_init_array>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4e0d      	ldr	r6, [pc, #52]	; (8003f34 <__libc_init_array+0x38>)
 8003f00:	4c0d      	ldr	r4, [pc, #52]	; (8003f38 <__libc_init_array+0x3c>)
 8003f02:	1ba4      	subs	r4, r4, r6
 8003f04:	10a4      	asrs	r4, r4, #2
 8003f06:	2500      	movs	r5, #0
 8003f08:	42a5      	cmp	r5, r4
 8003f0a:	d109      	bne.n	8003f20 <__libc_init_array+0x24>
 8003f0c:	4e0b      	ldr	r6, [pc, #44]	; (8003f3c <__libc_init_array+0x40>)
 8003f0e:	4c0c      	ldr	r4, [pc, #48]	; (8003f40 <__libc_init_array+0x44>)
 8003f10:	f000 f820 	bl	8003f54 <_init>
 8003f14:	1ba4      	subs	r4, r4, r6
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	2500      	movs	r5, #0
 8003f1a:	42a5      	cmp	r5, r4
 8003f1c:	d105      	bne.n	8003f2a <__libc_init_array+0x2e>
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f24:	4798      	blx	r3
 8003f26:	3501      	adds	r5, #1
 8003f28:	e7ee      	b.n	8003f08 <__libc_init_array+0xc>
 8003f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f2e:	4798      	blx	r3
 8003f30:	3501      	adds	r5, #1
 8003f32:	e7f2      	b.n	8003f1a <__libc_init_array+0x1e>
 8003f34:	08003f84 	.word	0x08003f84
 8003f38:	08003f84 	.word	0x08003f84
 8003f3c:	08003f84 	.word	0x08003f84
 8003f40:	08003f88 	.word	0x08003f88

08003f44 <memset>:
 8003f44:	4402      	add	r2, r0
 8003f46:	4603      	mov	r3, r0
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d100      	bne.n	8003f4e <memset+0xa>
 8003f4c:	4770      	bx	lr
 8003f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f52:	e7f9      	b.n	8003f48 <memset+0x4>

08003f54 <_init>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr

08003f60 <_fini>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	bf00      	nop
 8003f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	469e      	mov	lr, r3
 8003f6a:	4770      	bx	lr
