
project_13_raster_plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003864  08003864  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003864  08003864  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08003878  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003878  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010af3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d95  00000000  00000000  00030b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  000328c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec0  00000000  00000000  00033870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001da66  00000000  00000000  00034730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b403  00000000  00000000  00052196  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c579d  00000000  00000000  0005d599  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  00122db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800383c 	.word	0x0800383c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800383c 	.word	0x0800383c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f001 f8f7 	bl	800140e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80b 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f950 	bl	80004c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000228:	f000 f8b2 	bl	8000390 <MX_TIM2_Init>
  MX_TIM3_Init();
 800022c:	f000 f8fe 	bl	800042c <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000230:	f000 f868 	bl	8000304 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  device_init();
 8000234:	f000 fad2 	bl	80007dc <device_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x20>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b0a4      	sub	sp, #144	; 0x90
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000244:	2238      	movs	r2, #56	; 0x38
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f003 faef 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025e:	463b      	mov	r3, r7
 8000260:	2244      	movs	r2, #68	; 0x44
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f003 fae1 	bl	800382c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800026e:	f001 fdb1 	bl	8001dd4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000276:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800027a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	2303      	movs	r3, #3
 8000282:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000284:	2302      	movs	r3, #2
 8000286:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000288:	2308      	movs	r3, #8
 800028a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800028e:	2302      	movs	r3, #2
 8000290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000294:	2302      	movs	r3, #2
 8000296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fe49 	bl	8001f3c <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002b0:	f000 f988 	bl	80005c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2303      	movs	r3, #3
 80002ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002cc:	2101      	movs	r1, #1
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 f94c 	bl	800256c <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002da:	f000 f973 	bl	80005c4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80002de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80002e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80002e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ea:	463b      	mov	r3, r7
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fb21 	bl	8002934 <HAL_RCCEx_PeriphCLKConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80002f8:	f000 f964 	bl	80005c4 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3790      	adds	r7, #144	; 0x90
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800030a:	4a20      	ldr	r2, [pc, #128]	; (800038c <MX_FDCAN1_Init+0x88>)
 800030c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800030e:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000322:	2200      	movs	r2, #0
 8000324:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000328:	2200      	movs	r2, #0
 800032a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800032e:	2200      	movs	r2, #0
 8000330:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000334:	2201      	movs	r2, #1
 8000336:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800033a:	2201      	movs	r2, #1
 800033c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000340:	2202      	movs	r2, #2
 8000342:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000346:	2202      	movs	r2, #2
 8000348:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800034c:	2201      	movs	r2, #1
 800034e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000352:	2201      	movs	r2, #1
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000358:	2201      	movs	r2, #1
 800035a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800035e:	2201      	movs	r2, #1
 8000360:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000364:	2200      	movs	r2, #0
 8000366:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <MX_FDCAN1_Init+0x84>)
 800036a:	2200      	movs	r2, #0
 800036c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000370:	2200      	movs	r2, #0
 8000372:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_FDCAN1_Init+0x84>)
 8000376:	f001 f9cb 	bl	8001710 <HAL_FDCAN_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000380:	f000 f920 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	200000e4 	.word	0x200000e4
 800038c:	40006400 	.word	0x40006400

08000390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ae:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_TIM2_Init+0x98>)
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6100;
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_TIM2_Init+0x98>)
 80003b8:	f241 72d4 	movw	r2, #6100	; 0x17d4
 80003bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_TIM2_Init+0x98>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_TIM2_Init+0x98>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_TIM2_Init+0x98>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_TIM2_Init+0x98>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d6:	4814      	ldr	r0, [pc, #80]	; (8000428 <MX_TIM2_Init+0x98>)
 80003d8:	f002 fc9c 	bl	8002d14 <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80003e2:	f000 f8ef 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	480d      	ldr	r0, [pc, #52]	; (8000428 <MX_TIM2_Init+0x98>)
 80003f4:	f002 fefe 	bl	80031f4 <HAL_TIM_ConfigClockSource>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80003fe:	f000 f8e1 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000402:	2320      	movs	r3, #32
 8000404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4619      	mov	r1, r3
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <MX_TIM2_Init+0x98>)
 8000410:	f003 f920 	bl	8003654 <HAL_TIMEx_MasterConfigSynchronization>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800041a:	f000 f8d3 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	3720      	adds	r7, #32
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000160 	.word	0x20000160

0800042c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_TIM3_Init+0x94>)
 800044c:	4a1d      	ldr	r2, [pc, #116]	; (80004c4 <MX_TIM3_Init+0x98>)
 800044e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <MX_TIM3_Init+0x94>)
 8000452:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000456:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <MX_TIM3_Init+0x94>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800045e:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <MX_TIM3_Init+0x94>)
 8000460:	220a      	movs	r2, #10
 8000462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <MX_TIM3_Init+0x94>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_TIM3_Init+0x94>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000470:	4813      	ldr	r0, [pc, #76]	; (80004c0 <MX_TIM3_Init+0x94>)
 8000472:	f002 fc4f 	bl	8002d14 <HAL_TIM_Base_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800047c:	f000 f8a2 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000484:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <MX_TIM3_Init+0x94>)
 800048e:	f002 feb1 	bl	80031f4 <HAL_TIM_ConfigClockSource>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000498:	f000 f894 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800049c:	2320      	movs	r3, #32
 800049e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_TIM3_Init+0x94>)
 80004aa:	f003 f8d3 	bl	8003654 <HAL_TIMEx_MasterConfigSynchronization>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80004b4:	f000 f886 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000002c 	.word	0x2000002c
 80004c4:	40000400 	.word	0x40000400

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004de:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <MX_GPIO_Init+0xf0>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a35      	ldr	r2, [pc, #212]	; (80005b8 <MX_GPIO_Init+0xf0>)
 80004e4:	f043 0320 	orr.w	r3, r3, #32
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <MX_GPIO_Init+0xf0>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0320 	and.w	r3, r3, #32
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_GPIO_Init+0xf0>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a2f      	ldr	r2, [pc, #188]	; (80005b8 <MX_GPIO_Init+0xf0>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <MX_GPIO_Init+0xf0>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <MX_GPIO_Init+0xf0>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a29      	ldr	r2, [pc, #164]	; (80005b8 <MX_GPIO_Init+0xf0>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_GPIO_Init+0xf0>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2138      	movs	r1, #56	; 0x38
 800052a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052e:	f001 fc39 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 8000532:	2200      	movs	r2, #0
 8000534:	f240 11f9 	movw	r1, #505	; 0x1f9
 8000538:	4820      	ldr	r0, [pc, #128]	; (80005bc <MX_GPIO_Init+0xf4>)
 800053a:	f001 fc33 	bl	8001da4 <HAL_GPIO_WritePin>
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ON_TOMO_Pin */
  GPIO_InitStruct.Pin = ON_TOMO_Pin;
 800053e:	2302      	movs	r3, #2
 8000540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ON_TOMO_GPIO_Port, &GPIO_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	481b      	ldr	r0, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xf8>)
 8000552:	f001 fa8d 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONFIG_3_Pin CONFIG_2_Pin CONFIG_1_Pin BUCKY_CALL_Pin
                           GRID_BUTTON_Pin GRID_END_POINT_Pin GRID_120_DETECT_Pin GRID_180_DETECT_Pin
                           PUSHBUTTON_BUCKYBRAKE_Pin */
  GPIO_InitStruct.Pin = CONFIG_3_Pin|CONFIG_2_Pin|CONFIG_1_Pin|BUCKY_CALL_Pin
 8000556:	f248 73c7 	movw	r3, #34759	; 0x87c7
 800055a:	60fb      	str	r3, [r7, #12]
                          |GRID_BUTTON_Pin|GRID_END_POINT_Pin|GRID_120_DETECT_Pin|GRID_180_DETECT_Pin
                          |PUSHBUTTON_BUCKYBRAKE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f001 fa7f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRID_120_Pin GRID_180_Pin BUCKY_READY_Pin */
  GPIO_InitStruct.Pin = GRID_120_Pin|GRID_180_Pin|BUCKY_READY_Pin;
 8000572:	2338      	movs	r3, #56	; 0x38
 8000574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f001 fa70 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_CENTERING_Pin BUCKY_BRAKE_Pin RESET_Pin ENABLE_Pin
                           CURRENT_WIND_Pin STEP_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LASER_CENTERING_Pin|BUCKY_BRAKE_Pin|RESET_Pin|ENABLE_Pin
 8000590:	f240 13f9 	movw	r3, #505	; 0x1f9
 8000594:	60fb      	str	r3, [r7, #12]
                          |CURRENT_WIND_Pin|STEP_Pin|DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	4619      	mov	r1, r3
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_GPIO_Init+0xf4>)
 80005aa:	f001 fa61 	bl	8001a70 <HAL_GPIO_Init>

}
 80005ae:	bf00      	nop
 80005b0:	3720      	adds	r7, #32
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000400 	.word	0x48000400
 80005c0:	48001400 	.word	0x48001400

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x44>)
 80005dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_MspInit+0x44>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6613      	str	r3, [r2, #96]	; 0x60
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_MspInit+0x44>)
 80005f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <HAL_MspInit+0x44>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6593      	str	r3, [r2, #88]	; 0x58
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800060a:	f001 fc87 	bl	8001f1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a18      	ldr	r2, [pc, #96]	; (800069c <HAL_FDCAN_MspInit+0x80>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d129      	bne.n	8000692 <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <HAL_FDCAN_MspInit+0x84>)
 8000640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <HAL_FDCAN_MspInit+0x84>)
 8000644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000648:	6593      	str	r3, [r2, #88]	; 0x58
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <HAL_FDCAN_MspInit+0x84>)
 800064c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_FDCAN_MspInit+0x84>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <HAL_FDCAN_MspInit+0x84>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_FDCAN_MspInit+0x84>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800066e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000680:	2309      	movs	r3, #9
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068e:	f001 f9ef 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40006400 	.word	0x40006400
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b4:	d114      	bne.n	80006e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_TIM_Base_MspInit+0x78>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <HAL_TIM_Base_MspInit+0x78>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6593      	str	r3, [r2, #88]	; 0x58
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_TIM_Base_MspInit+0x78>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	201c      	movs	r0, #28
 80006d4:	f000 ffe7 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006d8:	201c      	movs	r0, #28
 80006da:	f000 fffe 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006de:	e018      	b.n	8000712 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_TIM_Base_MspInit+0x7c>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d113      	bne.n	8000712 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_TIM_Base_MspInit+0x78>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <HAL_TIM_Base_MspInit+0x78>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6593      	str	r3, [r2, #88]	; 0x58
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_TIM_Base_MspInit+0x78>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	201d      	movs	r0, #29
 8000708:	f000 ffcd 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800070c:	201d      	movs	r0, #29
 800070e:	f000 ffe4 	bl	80016da <HAL_NVIC_EnableIRQ>
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	40000400 	.word	0x40000400

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 fe9c 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <TIM2_IRQHandler+0x14>)
 8000786:	f002 fbb6 	bl	8002ef6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  motor_timer_interrupt_handler();
 800078a:	f000 fcab 	bl	80010e4 <motor_timer_interrupt_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000160 	.word	0x20000160

08000798 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <TIM3_IRQHandler+0x14>)
 800079e:	f002 fbaa 	bl	8002ef6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  signals_check_timer_interrupt_handler();
 80007a2:	f000 f97b 	bl	8000a9c <signals_check_timer_interrupt_handler>
  /* USER CODE END TIM3_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000002c 	.word	0x2000002c

080007b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <SystemInit+0x28>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <SystemInit+0x28>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SystemInit+0x28>)
 80007c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ca:	609a      	str	r2, [r3, #8]
#endif
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <device_init>:
/*
 * Инициализация устройства
 */

void device_init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	device_current_state = DEVICE_STARTS;										// выставляем состояние устройства: устройство стартует
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <device_init+0x34>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
	pins_init();																// инициализируем сигналы (указываем пины и порты, инициализируем единый массив сигналов)
 80007e6:	f000 f823 	bl	8000830 <pins_init>
	output_signals_state_init(LOGIC_LEVEL_LOW);									// выставляем состояние выходных сигналов
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 f90c 	bl	8000a08 <output_signals_state_init>
	input_signals_state_update();												// считываем состояние входных сигналов
 80007f0:	f000 f8d4 	bl	800099c <input_signals_state_update>
	device_modules_init();														// инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1, DIP-переключатели)
 80007f4:	f000 f87c 	bl	80008f0 <device_modules_init>
	buttons_state_update();														// обновляем состояние аппаратных модулей
 80007f8:	f000 f956 	bl	8000aa8 <buttons_state_update>
	enable_pin_set();															// навсегда выставляем "1" на входе ШД "Enable"
 80007fc:	f000 f80c 	bl	8000818 <enable_pin_set>
	error_code = NO_ERROR;														// выставляем отсутствие ошибки
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <device_init+0x38>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
	signals_check_timer_interrupts_start();										// запускаем таймер считывания состояний сигналов
 8000806:	f000 f93f 	bl	8000a88 <signals_check_timer_interrupts_start>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000008c 	.word	0x2000008c
 8000814:	200001bc 	.word	0x200001bc

08000818 <enable_pin_set>:

void enable_pin_set(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	if (ENABLE_PIN_LOGIC_LEVEL_INVERTED)
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_LOW);
 800081c:	2200      	movs	r2, #0
 800081e:	2120      	movs	r1, #32
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <enable_pin_set+0x14>)
 8000822:	f000 f96f 	bl	8000b04 <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, LOGIC_LEVEL_HIGH);
	}
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	48000400 	.word	0x48000400

08000830 <pins_init>:

/*
 * Определяем входные пины, исходя из инициализации, созданной конфигуратором пинов
 */
void pins_init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <pins_init+0xa0>)
 8000836:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800083a:	60da      	str	r2, [r3, #12]
	grid_sensor.GRID_180_DETECT_IN_signal.signal_pin.pin_number = GRID_180_DETECT_Pin;					// пин датчика Холла (растр типа 180)
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <pins_init+0xa0>)
 800083e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000842:	821a      	strh	r2, [r3, #16]

	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <pins_init+0xa0>)
 8000846:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800084a:	601a      	str	r2, [r3, #0]
	grid_sensor.GRID_120_DETECT_IN_signal.signal_pin.pin_number = GRID_120_DETECT_Pin;					// пин датчика Холла (растр типа 120)
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <pins_init+0xa0>)
 800084e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000852:	809a      	strh	r2, [r3, #4]

	grid_supply_button.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <pins_init+0xa4>)
 8000856:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800085a:	601a      	str	r2, [r3, #0]
	grid_supply_button.button_signal.signal_pin.pin_number = GRID_BUTTON_Pin;							// пин кнопки подачи растра
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <pins_init+0xa4>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	809a      	strh	r2, [r3, #4]

	ON_TOMO_IN_signal.signal_pin.GPIO_port_pointer = ON_TOMO_GPIO_Port;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <pins_init+0xa8>)
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <pins_init+0xac>)
 8000866:	601a      	str	r2, [r3, #0]
	ON_TOMO_IN_signal.signal_pin.pin_number = ON_TOMO_Pin;												// пин сигнала ON_TOMO
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <pins_init+0xa8>)
 800086a:	2202      	movs	r2, #2
 800086c:	809a      	strh	r2, [r3, #4]

	BUCKY_CALL_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <pins_init+0xb0>)
 8000870:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000874:	601a      	str	r2, [r3, #0]
	BUCKY_CALL_IN_signal.signal_pin.pin_number = BUCKY_CALL_Pin;										// пин сигнала BUCKYCALL
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <pins_init+0xb0>)
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	809a      	strh	r2, [r3, #4]

	pushbutton_buckybrake.button_signal.signal_pin.GPIO_port_pointer = GPIOA;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <pins_init+0xb4>)
 800087e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000882:	601a      	str	r2, [r3, #0]
	pushbutton_buckybrake.button_signal.signal_pin.pin_number = PUSHBUTTON_BUCKYBRAKE_Pin;				// пин кнопки тормоза кассетоприёмника
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <pins_init+0xb4>)
 8000886:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800088a:	809a      	strh	r2, [r3, #4]

	limit_switch.GRID_END_POINT_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <pins_init+0xb8>)
 800088e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000892:	601a      	str	r2, [r3, #0]
	limit_switch.GRID_END_POINT_IN_signal.signal_pin.pin_number = GRID_END_POINT_Pin;					// пин концевика
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <pins_init+0xb8>)
 8000896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089a:	809a      	strh	r2, [r3, #4]

	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <pins_init+0xbc>)
 800089e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008a2:	601a      	str	r2, [r3, #0]
	DIP_switch.DIP_SWITCH_1_IN_signal.signal_pin.pin_number = CONFIG_1_Pin;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <pins_init+0xbc>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	809a      	strh	r2, [r3, #4]

	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <pins_init+0xbc>)
 80008ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008b0:	60da      	str	r2, [r3, #12]
	DIP_switch.DIP_SWITCH_2_IN_signal.signal_pin.pin_number = CONFIG_2_Pin;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <pins_init+0xbc>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	821a      	strh	r2, [r3, #16]

	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.GPIO_port_pointer = GPIOA;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <pins_init+0xbc>)
 80008ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008be:	619a      	str	r2, [r3, #24]
	DIP_switch.DIP_SWITCH_3_IN_signal.signal_pin.pin_number = CONFIG_3_Pin;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <pins_init+0xbc>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	839a      	strh	r2, [r3, #28]
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	20000148 	.word	0x20000148
 80008d4:	20000078 	.word	0x20000078
 80008d8:	200001c0 	.word	0x200001c0
 80008dc:	48001400 	.word	0x48001400
 80008e0:	20000090 	.word	0x20000090
 80008e4:	200000d0 	.word	0x200000d0
 80008e8:	2000009c 	.word	0x2000009c
 80008ec:	200000a8 	.word	0x200000a8

080008f0 <device_modules_init>:

/*
 * Инициализируем аппаратные модули (кнопки, датчики, мотор, интерфейс А1)
 */
void device_modules_init(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	motor.steps_distance_from_limit_switch = STEP_DISTANCE_INIT_VALUE;					// Задаём условное начальное расстояние от концевика, отличное от нуля. Чтобы мотор доехал до концевика и начал отсчёт.
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <device_modules_init+0x64>)
 80008f6:	220a      	movs	r2, #10
 80008f8:	601a      	str	r2, [r3, #0]
	motor.limit_emergency_counter = 0;													// обнуляем аварийный счётчик шагов
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <device_modules_init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
	motor.motor_move_direction = MOVE_TO_COORD_END;										// задаём направление движения: двигаться ОТ начального положения
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <device_modules_init+0x64>)
 8000902:	2201      	movs	r2, #1
 8000904:	721a      	strb	r2, [r3, #8]
	motor.step_pin_current_phase = STEP_LOW_PHASE;										// задаём фазу сигнала STEP
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <device_modules_init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	725a      	strb	r2, [r3, #9]
	motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;					// даём двигателю задание занять начальное положение
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <device_modules_init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	729a      	strb	r2, [r3, #10]
	motor.motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;							// выставляем флаг, что мотор находится в движении
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <device_modules_init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	72da      	strb	r2, [r3, #11]
	motor.exposition_movement_direction = EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION;	// задаём начальное направление циклического движения при экспозиции
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <device_modules_init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	731a      	strb	r2, [r3, #12]
	motor.acceleration_mode = ACCELERATION_MODE_00;										// задаём начальный режим ускорения
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <device_modules_init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	735a      	strb	r2, [r3, #13]
	grid_supply_button.button_released_default_signal_level = LOGIC_LEVEL_LOW;			// выставляем флаг, что при отпущенной кнопке на пине "1"
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <device_modules_init+0x68>)
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
	grid_supply_button.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <device_modules_init+0x68>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
	ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;											// выставляем флаг, что сигнала ON_TOMO не было
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <device_modules_init+0x6c>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
	bucky_ready_delay_counter = 0;														// обнуляем счётчик шагов, после которых выставляем BUCKY_READY в "1"
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <device_modules_init+0x70>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
	pushbutton_buckybrake.button_released_default_signal_level = LOGIC_LEVEL_LOW;		// выставляем флаг, что при отпущенной кнопке на пине "1"
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <device_modules_init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	731a      	strb	r2, [r3, #12]
	pushbutton_buckybrake.button_pressing_duration_counter = 0;							// обнуляем счётчик продолжительности нажатия
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <device_modules_init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	200001ac 	.word	0x200001ac
 8000958:	20000078 	.word	0x20000078
 800095c:	200000cc 	.word	0x200000cc
 8000960:	20000028 	.word	0x20000028
 8000964:	200000d0 	.word	0x200000d0

08000968 <check_input_signals>:

/*
 * Обновляем состояние входных сигналов и аппаратных модулей
 */
void check_input_signals(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	input_signals_state_update();					// считываем состояние входов, обновляем их состояние в объекте устройства
 800096c:	f000 f816 	bl	800099c <input_signals_state_update>
	buttons_state_update();							// обновляем состояние аппаратных модулей
 8000970:	f000 f89a 	bl	8000aa8 <buttons_state_update>
	dip_switch_state_update();
 8000974:	f000 f806 	bl	8000984 <dip_switch_state_update>
	device_error_check();							// проверяем текущее состояние устройства на наличие ошибок
 8000978:	f000 f93a 	bl	8000bf0 <device_error_check>
	read_input_signals_and_set_device_state();		// изменяем состояние устройства в зависимости от входных сигналов
 800097c:	f000 f9d8 	bl	8000d30 <read_input_signals_and_set_device_state>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <dip_switch_state_update>:

void dip_switch_state_update(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	if ((DIP_switch.DIP_SWITCH_1_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && (DIP_switch.DIP_SWITCH_2_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <dip_switch_state_update+0x14>)
 800098a:	7a1b      	ldrb	r3, [r3, #8]
 800098c:	2b01      	cmp	r3, #1
	{

	}
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	200000a8 	.word	0x200000a8

0800099c <input_signals_state_update>:
/*
 * Опрашиваем состояние входных сигналов
 */

void input_signals_state_update(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	check_input_signal_state(&grid_sensor.GRID_180_DETECT_IN_signal);
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <input_signals_state_update+0x44>)
 80009a2:	f000 f88f 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&grid_sensor.GRID_120_DETECT_IN_signal);
 80009a6:	480f      	ldr	r0, [pc, #60]	; (80009e4 <input_signals_state_update+0x48>)
 80009a8:	f000 f88c 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&grid_supply_button.button_signal);
 80009ac:	480e      	ldr	r0, [pc, #56]	; (80009e8 <input_signals_state_update+0x4c>)
 80009ae:	f000 f889 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&ON_TOMO_IN_signal);
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <input_signals_state_update+0x50>)
 80009b4:	f000 f886 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&BUCKY_CALL_IN_signal);
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <input_signals_state_update+0x54>)
 80009ba:	f000 f883 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&pushbutton_buckybrake.button_signal);
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <input_signals_state_update+0x58>)
 80009c0:	f000 f880 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&limit_switch.GRID_END_POINT_IN_signal);
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <input_signals_state_update+0x5c>)
 80009c6:	f000 f87d 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_1_IN_signal);
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <input_signals_state_update+0x60>)
 80009cc:	f000 f87a 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_2_IN_signal);
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <input_signals_state_update+0x64>)
 80009d2:	f000 f877 	bl	8000ac4 <check_input_signal_state>
	check_input_signal_state(&DIP_switch.DIP_SWITCH_3_IN_signal);
 80009d6:	480b      	ldr	r0, [pc, #44]	; (8000a04 <input_signals_state_update+0x68>)
 80009d8:	f000 f874 	bl	8000ac4 <check_input_signal_state>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000154 	.word	0x20000154
 80009e4:	20000148 	.word	0x20000148
 80009e8:	20000078 	.word	0x20000078
 80009ec:	200001c0 	.word	0x200001c0
 80009f0:	20000090 	.word	0x20000090
 80009f4:	200000d0 	.word	0x200000d0
 80009f8:	2000009c 	.word	0x2000009c
 80009fc:	200000a8 	.word	0x200000a8
 8000a00:	200000b4 	.word	0x200000b4
 8000a04:	200000c0 	.word	0x200000c0

08000a08 <output_signals_state_init>:
/*
 * Выставляем одно состояние на всех выходных пинах
 */

void output_signals_state_init(SignalLogicLevel_EnumTypeDef signal_level_to_set)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	set_output_signal_state(MOTOR_ENABLE_OUT_PORT, MOTOR_ENABLE_OUT_PIN, signal_level_to_set);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	461a      	mov	r2, r3
 8000a16:	2120      	movs	r1, #32
 8000a18:	481a      	ldr	r0, [pc, #104]	; (8000a84 <output_signals_state_init+0x7c>)
 8000a1a:	f000 f873 	bl	8000b04 <set_output_signal_state>
	set_output_signal_state(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, signal_level_to_set);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	461a      	mov	r2, r3
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <output_signals_state_init+0x7c>)
 8000a26:	f000 f86d 	bl	8000b04 <set_output_signal_state>
	set_output_signal_state(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, signal_level_to_set);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <output_signals_state_init+0x7c>)
 8000a34:	f000 f866 	bl	8000b04 <set_output_signal_state>
	set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, signal_level_to_set);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <output_signals_state_init+0x7c>)
 8000a40:	f000 f860 	bl	8000b04 <set_output_signal_state>
	set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, signal_level_to_set);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2108      	movs	r1, #8
 8000a4a:	480e      	ldr	r0, [pc, #56]	; (8000a84 <output_signals_state_init+0x7c>)
 8000a4c:	f000 f85a 	bl	8000b04 <set_output_signal_state>
	set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, signal_level_to_set);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	461a      	mov	r2, r3
 8000a54:	2120      	movs	r1, #32
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 f853 	bl	8000b04 <set_output_signal_state>
	set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, signal_level_to_set);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	461a      	mov	r2, r3
 8000a62:	2108      	movs	r1, #8
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 f84c 	bl	8000b04 <set_output_signal_state>
	set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, signal_level_to_set);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2110      	movs	r1, #16
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f000 f845 	bl	8000b04 <set_output_signal_state>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	48000400 	.word	0x48000400

08000a88 <signals_check_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым будем опрашивать состояние входных сигналов
 */
void signals_check_timer_interrupts_start(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(SIGNALS_CHECK_TIMER_POINTER);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <signals_check_timer_interrupts_start+0x10>)
 8000a8e:	f002 f999 	bl	8002dc4 <HAL_TIM_Base_Start_IT>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000002c 	.word	0x2000002c

08000a9c <signals_check_timer_interrupt_handler>:

/*
 * ОБработчик прерываний таймера, отвечающего за опрос входных сигналов
 */
void signals_check_timer_interrupt_handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	check_input_signals();
 8000aa0:	f7ff ff62 	bl	8000968 <check_input_signals>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <buttons_state_update>:

/*
 * Обновляем состояние кнопок
 */
void buttons_state_update(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	check_button_state(&grid_supply_button);
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <buttons_state_update+0x14>)
 8000aae:	f000 f845 	bl	8000b3c <check_button_state>
	check_button_state(&pushbutton_buckybrake);
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <buttons_state_update+0x18>)
 8000ab4:	f000 f842 	bl	8000b3c <check_button_state>
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000078 	.word	0x20000078
 8000ac0:	200000d0 	.word	0x200000d0

08000ac4 <check_input_signal_state>:

/*
 * Считывание и запись состояния входного пина
 */
void check_input_signal_state(InSignalAttributes_TypeDef* signal_to_check)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	GPIO_PinState current_logic_state = HAL_GPIO_ReadPin(signal_to_check->signal_pin.GPIO_port_pointer, signal_to_check->signal_pin.pin_number);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	889b      	ldrh	r3, [r3, #4]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	f001 f94c 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]

	switch (current_logic_state)
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <check_input_signal_state+0x30>
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d000      	beq.n	8000aec <check_input_signal_state+0x28>
	{
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
		break;
	}
	}
}
 8000aea:	e007      	b.n	8000afc <check_input_signal_state+0x38>
		signal_to_check->signal_logic_level = LOGIC_LEVEL_HIGH;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2201      	movs	r2, #1
 8000af0:	721a      	strb	r2, [r3, #8]
		break;
 8000af2:	e003      	b.n	8000afc <check_input_signal_state+0x38>
		signal_to_check->signal_logic_level = LOGIC_LEVEL_LOW;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	721a      	strb	r2, [r3, #8]
		break;
 8000afa:	bf00      	nop
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <set_output_signal_state>:

/*
 * Выставляем логическое состояние на выходном пине
 */
void set_output_signal_state(GPIO_TypeDef* GPIO_port_pointer, uint16_t pin_number, SignalLogicLevel_EnumTypeDef requied_logic_level)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
 8000b10:	4613      	mov	r3, r2
 8000b12:	707b      	strb	r3, [r7, #1]
	if (requied_logic_level == LOGIC_LEVEL_LOW)
 8000b14:	787b      	ldrb	r3, [r7, #1]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d106      	bne.n	8000b28 <set_output_signal_state+0x24>
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_RESET);
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f001 f93f 	bl	8001da4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
	}
}
 8000b26:	e005      	b.n	8000b34 <set_output_signal_state+0x30>
		HAL_GPIO_WritePin(GPIO_port_pointer, pin_number, GPIO_PIN_SET);
 8000b28:	887b      	ldrh	r3, [r7, #2]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f001 f938 	bl	8001da4 <HAL_GPIO_WritePin>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <check_button_state>:

/*
 * Проверяем состояние кнопки
 */
void check_button_state(ButtonAttributes_TypeDef* button_to_check)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	if (button_to_check->button_released_default_signal_level == LOGIC_LEVEL_LOW)						// если при отпущенной кнопке логическое состояние пина "0"
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7b1b      	ldrb	r3, [r3, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d125      	bne.n	8000b98 <check_button_state+0x5c>
	{
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7a1b      	ldrb	r3, [r3, #8]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d11a      	bne.n	8000b8a <check_button_state+0x4e>
		{
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7b5b      	ldrb	r3, [r3, #13]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d006      	beq.n	8000b6a <check_button_state+0x2e>
			{
				if (button_to_check->button_pressing_duration_counter >= BUTTON_BOUNCE_FILTER_COUNTS)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d902      	bls.n	8000b6a <check_button_state+0x2e>
				{
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	735a      	strb	r2, [r3, #13]
				}
			}
			if (button_to_check->button_pressing_duration_counter >= BUTTON_LONG_PRESS_COUNTS)			// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	2b31      	cmp	r3, #49	; 0x31
 8000b70:	d905      	bls.n	8000b7e <check_button_state+0x42>
			{
				button_to_check->button_pressing_duration_counter = BUTTON_LONG_PRESS_COUNTS;			// удерживаем счётчик от дальнейшего увеличения
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2232      	movs	r2, #50	; 0x32
 8000b76:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	735a      	strb	r2, [r3, #13]
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
			}
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
		}
	}
}
 8000b88:	e02b      	b.n	8000be2 <check_button_state+0xa6>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	735a      	strb	r2, [r3, #13]
}
 8000b96:	e024      	b.n	8000be2 <check_button_state+0xa6>
		if (button_to_check->button_signal.signal_logic_level == LOGIC_LEVEL_HIGH)						// если текущий уровень сигнала на пине кнопки "1"
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d106      	bne.n	8000bae <check_button_state+0x72>
			button_to_check->button_pressing_duration_counter = 0;										// обнуляем счётчик продолжительности нажатия
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
			button_to_check->button_current_state = BUTTON_RELEASED;									// выставляем флаг, что кнопка отпущена
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	735a      	strb	r2, [r3, #13]
}
 8000bac:	e019      	b.n	8000be2 <check_button_state+0xa6>
			if (button_to_check->button_current_state != BUTTON_LONG_PRESS)								// если ещё не было зафиксировано долгое нажатие
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7b5b      	ldrb	r3, [r3, #13]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d006      	beq.n	8000bc4 <check_button_state+0x88>
				if (button_to_check->button_pressing_duration_counter >= BUTTON_BOUNCE_FILTER_COUNTS)	// если нажатие длится дольше, чем нужно для фильтрации дребезга
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d902      	bls.n	8000bc4 <check_button_state+0x88>
					button_to_check->button_current_state = BUTTON_SHORT_PRESS;							// выставляем флаг короткого нажатия
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	735a      	strb	r2, [r3, #13]
			if (button_to_check->button_pressing_duration_counter >= BUTTON_LONG_PRESS_COUNTS)			// если счётчик продолжительности нажатия дошёл до значения длительного нажатия
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b31      	cmp	r3, #49	; 0x31
 8000bca:	d905      	bls.n	8000bd8 <check_button_state+0x9c>
				button_to_check->button_pressing_duration_counter = BUTTON_LONG_PRESS_COUNTS;			// удерживаем счётчик от дальнейшего увеличения
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2232      	movs	r2, #50	; 0x32
 8000bd0:	611a      	str	r2, [r3, #16]
				button_to_check->button_current_state = BUTTON_LONG_PRESS;								// выставляем флаг долгого нажатия
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	735a      	strb	r2, [r3, #13]
			button_to_check->button_pressing_duration_counter = button_to_check->button_pressing_duration_counter + 1;	// инкрементируем счётчик продолжительности нажатия
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	611a      	str	r2, [r3, #16]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <device_error_check>:
/*
 * Проверка текущего состояния устройства на наличие ошибок
 */

void device_error_check(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	/*
	 * если определён тип растра 120 и 180 одновременно
	 */
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <device_error_check+0x4c>)
 8000bf6:	7a1b      	ldrb	r3, [r3, #8]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d109      	bne.n	8000c10 <device_error_check+0x20>
		(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <device_error_check+0x4c>)
 8000bfe:	7d1b      	ldrb	r3, [r3, #20]
	if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d105      	bne.n	8000c10 <device_error_check+0x20>
	{
		error_code = GRID_TYPE_ERROR;									// выставляем флаг ошибки типа растра
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <device_error_check+0x50>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_STANDBY;							// переключаем устройство в режим ожидания
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <device_error_check+0x54>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
	}
	if (motor.limit_emergency_counter >= EMERGENCY_STEPS_TO_LIMIT)		// если прошагали критическое количество шагов в сторону концевика
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <device_error_check+0x58>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	dd09      	ble.n	8000c30 <device_error_check+0x40>
	{
		motor.limit_emergency_counter = EMERGENCY_STEPS_TO_LIMIT;		// удерживаем аварийный счётчик шагов от дальнейшего увеличения
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <device_error_check+0x58>)
 8000c1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c22:	605a      	str	r2, [r3, #4]
		error_code = LIMIT_SWITCH_ERROR;								// выставляем ошибку концевика (решаем, что концевик неисправен)
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <device_error_check+0x50>)
 8000c26:	2202      	movs	r2, #2
 8000c28:	701a      	strb	r2, [r3, #0]
		device_current_state = DEVICE_ERROR;							// переключаем устройство в состояние ошибки
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <device_error_check+0x54>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	701a      	strb	r2, [r3, #0]
	}
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000148 	.word	0x20000148
 8000c40:	200001bc 	.word	0x200001bc
 8000c44:	2000008c 	.word	0x2000008c
 8000c48:	200001ac 	.word	0x200001ac

08000c4c <device_error_handler>:

/*
 * Обработчик ошибок
 */
void device_error_handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	switch (error_code)					// если код ошибки
 8000c50:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <device_error_handler+0xc4>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d858      	bhi.n	8000d0a <device_error_handler+0xbe>
 8000c58:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <device_error_handler+0x14>)
 8000c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000c7d 	.word	0x08000c7d
 8000c68:	08000cfd 	.word	0x08000cfd
 8000c6c:	08000cc5 	.word	0x08000cc5
 8000c70:	08000cdd 	.word	0x08000cdd
	{
	case NO_ERROR:						// если нет ошибки
	{
		device_current_state = DEVICE_STANDBY;	// возвращаемся в состояние ожидания
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <device_error_handler+0xc8>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
		break;
 8000c7a:	e046      	b.n	8000d0a <device_error_handler+0xbe>
	}
	case GRID_TYPE_ERROR:				// если ошибка типа растра
	{
		set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_120_OUT_PIN
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2108      	movs	r1, #8
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c84:	f7ff ff3e 	bl	8000b04 <set_output_signal_state>
		set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);				// выставляем "1" на выводе GRID_180_OUT_PIN
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c90:	f7ff ff38 	bl	8000b04 <set_output_signal_state>

		/*
		 * если отсутствует растр типа 120 и типа 180
		 */
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <device_error_handler+0xcc>)
 8000c96:	7a1b      	ldrb	r3, [r3, #8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d131      	bne.n	8000d00 <device_error_handler+0xb4>
				(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <device_error_handler+0xcc>)
 8000c9e:	7d1b      	ldrb	r3, [r3, #20]
		if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) &&
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d12d      	bne.n	8000d00 <device_error_handler+0xb4>
		{
			set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_120_OUT_PIN
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f7ff ff2a 	bl	8000b04 <set_output_signal_state>
			set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);			// выставляем "0" на выводе GRID_180_OUT_PIN
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f7ff ff24 	bl	8000b04 <set_output_signal_state>
			error_code = NO_ERROR;																	// выставляем флаг отсутствия ошибки
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <device_error_handler+0xc4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cc2:	e01d      	b.n	8000d00 <device_error_handler+0xb4>
	case STANDBY_MOVEMENT_ERROR:		// если ошибка движения в режиме ожидания
	{
		/*
		 * если была нажата какая-либо кнопка, выходим из состояния ошибки
		 */
		if ((grid_supply_button.button_current_state == BUTTON_SHORT_PRESS) || \
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <device_error_handler+0xd0>)
 8000cc6:	7b5b      	ldrb	r3, [r3, #13]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d003      	beq.n	8000cd4 <device_error_handler+0x88>
				(pushbutton_buckybrake.button_current_state == BUTTON_SHORT_PRESS))
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <device_error_handler+0xd4>)
 8000cce:	7b5b      	ldrb	r3, [r3, #13]
		if ((grid_supply_button.button_current_state == BUTTON_SHORT_PRESS) || \
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d117      	bne.n	8000d04 <device_error_handler+0xb8>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <device_error_handler+0xc4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cda:	e013      	b.n	8000d04 <device_error_handler+0xb8>
	case ON_TOMO_BUCKY_CALL_ERROR:		// если ошибка сигнала ON_TOMO
	{
		/*
		 * если сигнал ON_TOMO в "0", и сигнал BUCKY_CALL в "0", и мотор завершил движение
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <device_error_handler+0xd8>)
 8000cde:	7a1b      	ldrb	r3, [r3, #8]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d111      	bne.n	8000d08 <device_error_handler+0xbc>
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <device_error_handler+0xdc>)
 8000ce6:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10d      	bne.n	8000d08 <device_error_handler+0xbc>
			(motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED))
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <device_error_handler+0xe0>)
 8000cee:	7adb      	ldrb	r3, [r3, #11]
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d109      	bne.n	8000d08 <device_error_handler+0xbc>
		{
			error_code = NO_ERROR;		// выставляем флаг отсутствия ошибки
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <device_error_handler+0xc4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cfa:	e005      	b.n	8000d08 <device_error_handler+0xbc>
		break;							// остаёмся в этом состоянии до перезагрузки
 8000cfc:	bf00      	nop
 8000cfe:	e004      	b.n	8000d0a <device_error_handler+0xbe>
		break;
 8000d00:	bf00      	nop
 8000d02:	e002      	b.n	8000d0a <device_error_handler+0xbe>
		break;
 8000d04:	bf00      	nop
 8000d06:	e000      	b.n	8000d0a <device_error_handler+0xbe>
		break;
 8000d08:	bf00      	nop
	}
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001bc 	.word	0x200001bc
 8000d14:	2000008c 	.word	0x2000008c
 8000d18:	20000148 	.word	0x20000148
 8000d1c:	20000078 	.word	0x20000078
 8000d20:	200000d0 	.word	0x200000d0
 8000d24:	200001c0 	.word	0x200001c0
 8000d28:	20000090 	.word	0x20000090
 8000d2c:	200001ac 	.word	0x200001ac

08000d30 <read_input_signals_and_set_device_state>:

/*
 * Изменяем состояние устройства в зависимости от входных сигналов
 */
void read_input_signals_and_set_device_state(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	switch (device_current_state)													// если состояние устройства
 8000d34:	4b9f      	ldr	r3, [pc, #636]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b07      	cmp	r3, #7
 8000d3a:	f200 8139 	bhi.w	8000fb0 <read_input_signals_and_set_device_state+0x280>
 8000d3e:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <read_input_signals_and_set_device_state+0x14>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d65 	.word	0x08000d65
 8000d48:	08000d83 	.word	0x08000d83
 8000d4c:	08000ee3 	.word	0x08000ee3
 8000d50:	08000ebf 	.word	0x08000ebf
 8000d54:	08000f7b 	.word	0x08000f7b
 8000d58:	08000f8b 	.word	0x08000f8b
 8000d5c:	08000f6b 	.word	0x08000f6b
 8000d60:	08000d77 	.word	0x08000d77
	{
	case DEVICE_STARTS:																// если устройство стартует
	{
		device_current_state = DEVICE_RETURN_TO_INITIAL_STATE;						// выставляем состояние устройства: возврат в начальное положение
 8000d64:	4b93      	ldr	r3, [pc, #588]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000d66:	2206      	movs	r2, #6
 8000d68:	701a      	strb	r2, [r3, #0]
		motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// назначение движения: возврат в начальное положение
 8000d6a:	4b93      	ldr	r3, [pc, #588]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	729a      	strb	r2, [r3, #10]
		motor_movement_start();
 8000d70:	f000 f946 	bl	8001000 <motor_movement_start>
		break;
 8000d74:	e11c      	b.n	8000fb0 <read_input_signals_and_set_device_state+0x280>
	}
	case DEVICE_ERROR:																// если возникла ошибка
	{
		motor.motor_movement_purpose = MOTOR_PURPOSE_INSTANT_STOP;					// останавливаем мотор
 8000d76:	4b90      	ldr	r3, [pc, #576]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000d78:	2205      	movs	r2, #5
 8000d7a:	729a      	strb	r2, [r3, #10]
		device_error_handler();														// вызываем обработчик ошибок
 8000d7c:	f7ff ff66 	bl	8000c4c <device_error_handler>
		break;
 8000d80:	e116      	b.n	8000fb0 <read_input_signals_and_set_device_state+0x280>
	case DEVICE_STANDBY:															// если устройство в режиме ожидания
	{
		/*
		 * если сигнал ON_TOMO не активен и сигнал ON_TOMO был активен ранее
		 */
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000d82:	4b8e      	ldr	r3, [pc, #568]	; (8000fbc <read_input_signals_and_set_device_state+0x28c>)
 8000d84:	7a1b      	ldrb	r3, [r3, #8]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d107      	bne.n	8000d9a <read_input_signals_and_set_device_state+0x6a>
			(ON_TOMO_IN_flag != ON_TOMO_WAS_NOT_ENABLED))
 8000d8a:	4b8d      	ldr	r3, [pc, #564]	; (8000fc0 <read_input_signals_and_set_device_state+0x290>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
		if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <read_input_signals_and_set_device_state+0x6a>
		{
			ON_TOMO_IN_flag = ON_TOMO_WAS_NOT_ENABLED;								// выставляем флаг: сигнал ON_TOMO не был активен
 8000d92:	4b8b      	ldr	r3, [pc, #556]	; (8000fc0 <read_input_signals_and_set_device_state+0x290>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e090      	b.n	8000ebc <read_input_signals_and_set_device_state+0x18c>
		}
		/*
		 * иначе если кнопка подачи растра нажата долго и наличие/отсутствие растра определено
		 */
		else if (grid_supply_button.button_current_state == BUTTON_LONG_PRESS)
 8000d9a:	4b8a      	ldr	r3, [pc, #552]	; (8000fc4 <read_input_signals_and_set_device_state+0x294>)
 8000d9c:	7b5b      	ldrb	r3, [r3, #13]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d124      	bne.n	8000dec <read_input_signals_and_set_device_state+0xbc>
		{
			device_current_state = DEVICE_GRID_SUPPLY;								// выставляем состояние устройства: подача растра
 8000da2:	4b84      	ldr	r3, [pc, #528]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	701a      	strb	r2, [r3, #0]

			/*
			 * если растр был извлечён и кнопка подачи растра нажата долго
			 */
			if (motor.steps_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEPS)
 8000da8:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000db0:	db04      	blt.n	8000dbc <read_input_signals_and_set_device_state+0x8c>
			{
				motor.motor_movement_purpose = MOTOR_PURPOSE_GRID_INSERTION;						// назначение движения: вставить растр
 8000db2:	4b81      	ldr	r3, [pc, #516]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	729a      	strb	r2, [r3, #10]
				motor_movement_start();																// начинаем движение
 8000db8:	f000 f922 	bl	8001000 <motor_movement_start>
			}
			/*
			 * если растр был вставлен и кнопка подачи растра нажата долго
			 */
			if (motor.steps_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEPS)
 8000dbc:	4b7e      	ldr	r3, [pc, #504]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dc4:	f280 80e9 	bge.w	8000f9a <read_input_signals_and_set_device_state+0x26a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2108      	movs	r1, #8
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f7ff fe98 	bl	8000b04 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f7ff fe92 	bl	8000b04 <set_output_signal_state>
				motor.motor_movement_purpose = MOTOR_PURPOSE_GRID_EXTRACTION;						// назначение движения: извлечь растр
 8000de0:	4b75      	ldr	r3, [pc, #468]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	729a      	strb	r2, [r3, #10]
				motor_movement_start();																// начинаем движение
 8000de6:	f000 f90b 	bl	8001000 <motor_movement_start>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника

			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
		}
		break;
 8000dea:	e0d6      	b.n	8000f9a <read_input_signals_and_set_device_state+0x26a>
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000dec:	4b76      	ldr	r3, [pc, #472]	; (8000fc8 <read_input_signals_and_set_device_state+0x298>)
 8000dee:	7a1b      	ldrb	r3, [r3, #8]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d115      	bne.n	8000e20 <read_input_signals_and_set_device_state+0xf0>
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000df4:	4b71      	ldr	r3, [pc, #452]	; (8000fbc <read_input_signals_and_set_device_state+0x28c>)
 8000df6:	7a1b      	ldrb	r3, [r3, #8]
		else if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d111      	bne.n	8000e20 <read_input_signals_and_set_device_state+0xf0>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED) && \
 8000dfc:	4b70      	ldr	r3, [pc, #448]	; (8000fc0 <read_input_signals_and_set_device_state+0x290>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
				(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10d      	bne.n	8000e20 <read_input_signals_and_set_device_state+0xf0>
				(motor.steps_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEPS))
 8000e04:	4b6c      	ldr	r3, [pc, #432]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000e06:	681b      	ldr	r3, [r3, #0]
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED) && \
 8000e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e0c:	da08      	bge.n	8000e20 <read_input_signals_and_set_device_state+0xf0>
			device_current_state = DEVICE_SCANING_TOMO_OFF;											// выставляем состояние устройства: экспозиция без ON_TOMO
 8000e0e:	4b69      	ldr	r3, [pc, #420]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_OFF;						// назначение движения: экспозиция без ON_TOMO
 8000e14:	4b68      	ldr	r3, [pc, #416]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 8000e1a:	f000 f8f1 	bl	8001000 <motor_movement_start>
 8000e1e:	e04d      	b.n	8000ebc <read_input_signals_and_set_device_state+0x18c>
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e20:	4b66      	ldr	r3, [pc, #408]	; (8000fbc <read_input_signals_and_set_device_state+0x28c>)
 8000e22:	7a1b      	ldrb	r3, [r3, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d107      	bne.n	8000e38 <read_input_signals_and_set_device_state+0x108>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_NOT_ENABLED))
 8000e28:	4b65      	ldr	r3, [pc, #404]	; (8000fc0 <read_input_signals_and_set_device_state+0x290>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d103      	bne.n	8000e38 <read_input_signals_and_set_device_state+0x108>
			ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED;													// выставляем флаг: сигнал ON_TOMO активен
 8000e30:	4b63      	ldr	r3, [pc, #396]	; (8000fc0 <read_input_signals_and_set_device_state+0x290>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e041      	b.n	8000ebc <read_input_signals_and_set_device_state+0x18c>
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e38:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <read_input_signals_and_set_device_state+0x28c>)
 8000e3a:	7a1b      	ldrb	r3, [r3, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d115      	bne.n	8000e6c <read_input_signals_and_set_device_state+0x13c>
				(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e40:	4b61      	ldr	r3, [pc, #388]	; (8000fc8 <read_input_signals_and_set_device_state+0x298>)
 8000e42:	7a1b      	ldrb	r3, [r3, #8]
		else if ((ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d111      	bne.n	8000e6c <read_input_signals_and_set_device_state+0x13c>
				(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8000e48:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <read_input_signals_and_set_device_state+0x290>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
				(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW) && \
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10d      	bne.n	8000e6c <read_input_signals_and_set_device_state+0x13c>
				(motor.steps_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEPS))
 8000e50:	4b59      	ldr	r3, [pc, #356]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000e52:	681b      	ldr	r3, [r3, #0]
				(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8000e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e58:	da08      	bge.n	8000e6c <read_input_signals_and_set_device_state+0x13c>
			device_current_state = DEVICE_SCANING_TOMO_ON;											// выставляем состояние устройства: экспозиция с ON_TOMO
 8000e5a:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_EXPOSITION_TOMO_ON;						// назначние движения: экспозиция с ON_TOMO
 8000e60:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000e62:	2204      	movs	r2, #4
 8000e64:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 8000e66:	f000 f8cb 	bl	8001000 <motor_movement_start>
 8000e6a:	e027      	b.n	8000ebc <read_input_signals_and_set_device_state+0x18c>
		else if ((!(limit_switch_return_state())) && \
 8000e6c:	f000 fa8a 	bl	8001384 <limit_switch_return_state>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f083 0301 	eor.w	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00d      	beq.n	8000e98 <read_input_signals_and_set_device_state+0x168>
				(!(motor.steps_distance_from_limit_switch >= RASTER_SUPPLY_DISTANCE_STEPS)))
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
		else if ((!(limit_switch_return_state())) && \
 8000e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e84:	da08      	bge.n	8000e98 <read_input_signals_and_set_device_state+0x168>
			device_current_state = DEVICE_RETURN_TO_INITIAL_STATE;									// выставляем состояние устройства: возврат в начальное положение
 8000e86:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000e88:	2206      	movs	r2, #6
 8000e8a:	701a      	strb	r2, [r3, #0]
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;						// назначение движения: возврат в начальное положение
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	729a      	strb	r2, [r3, #10]
			motor_movement_start();																	// начинаем движение
 8000e92:	f000 f8b5 	bl	8001000 <motor_movement_start>
 8000e96:	e011      	b.n	8000ebc <read_input_signals_and_set_device_state+0x18c>
		else if (pushbutton_buckybrake.button_current_state == BUTTON_SHORT_PRESS)
 8000e98:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <read_input_signals_and_set_device_state+0x29c>)
 8000e9a:	7b5b      	ldrb	r3, [r3, #13]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d17c      	bne.n	8000f9a <read_input_signals_and_set_device_state+0x26a>
			device_current_state = DEVICE_BUCKYBRAKE;												// выставляем состояние устройства: отпустить тормоз кассетоприёмника
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	701a      	strb	r2, [r3, #0]
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем в "1" выходной сигнал LASER_CENTERING
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4849      	ldr	r0, [pc, #292]	; (8000fd0 <read_input_signals_and_set_device_state+0x2a0>)
 8000eac:	f7ff fe2a 	bl	8000b04 <set_output_signal_state>
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал BUCKYBRAKE
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	4846      	ldr	r0, [pc, #280]	; (8000fd0 <read_input_signals_and_set_device_state+0x2a0>)
 8000eb6:	f7ff fe25 	bl	8000b04 <set_output_signal_state>
		break;
 8000eba:	e06e      	b.n	8000f9a <read_input_signals_and_set_device_state+0x26a>
 8000ebc:	e06d      	b.n	8000f9a <read_input_signals_and_set_device_state+0x26a>
	case DEVICE_BUCKYBRAKE:																			// если устройство в состоянии "отпустить тормоз кассетоприёмника"
	{
		/*
		 *	если кнопка тормоза кассетоприёмника отпущена
		 */
		if (pushbutton_buckybrake.button_current_state == BUTTON_RELEASED)
 8000ebe:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <read_input_signals_and_set_device_state+0x29c>)
 8000ec0:	7b5b      	ldrb	r3, [r3, #13]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d16b      	bne.n	8000f9e <read_input_signals_and_set_device_state+0x26e>
		{
			set_output_signal_state(LASER_CENTERING_OUT_PORT, LASER_CENTERING_OUT_PIN, LOGIC_LEVEL_LOW);	// выставляем в "0" выходной сигнал LASER_CENTERING
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4841      	ldr	r0, [pc, #260]	; (8000fd0 <read_input_signals_and_set_device_state+0x2a0>)
 8000ecc:	f7ff fe1a 	bl	8000b04 <set_output_signal_state>
			set_output_signal_state(BUCKYBRAKE_OUT_PORT, BUCKYBRAKE_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал BUCKYBRAKE
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	483e      	ldr	r0, [pc, #248]	; (8000fd0 <read_input_signals_and_set_device_state+0x2a0>)
 8000ed6:	f7ff fe15 	bl	8000b04 <set_output_signal_state>

			device_current_state = DEVICE_STANDBY;													// выставляем состояние устройства: режим ожидания
 8000eda:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ee0:	e05d      	b.n	8000f9e <read_input_signals_and_set_device_state+0x26e>
	case DEVICE_GRID_SUPPLY:																		// если устройство в состоянии "подача растра"
	{
		/*
		 * если назначение движения "вставить растр" и статус движения "движение завершено"
		 */
		if ((motor.motor_movement_purpose == MOTOR_PURPOSE_GRID_INSERTION) && \
 8000ee2:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000ee4:	7a9b      	ldrb	r3, [r3, #10]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d137      	bne.n	8000f5a <read_input_signals_and_set_device_state+0x22a>
			(motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED))
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000eec:	7adb      	ldrb	r3, [r3, #11]
		if ((motor.motor_movement_purpose == MOTOR_PURPOSE_GRID_INSERTION) && \
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d133      	bne.n	8000f5a <read_input_signals_and_set_device_state+0x22a>
		{
			/*
			 * если растр не представлен
			 */
			if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)&& \
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <read_input_signals_and_set_device_state+0x2a4>)
 8000ef4:	7a1b      	ldrb	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10f      	bne.n	8000f1a <read_input_signals_and_set_device_state+0x1ea>
					(grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 8000efa:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <read_input_signals_and_set_device_state+0x2a4>)
 8000efc:	7d1b      	ldrb	r3, [r3, #20]
			if ((grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)&& \
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10b      	bne.n	8000f1a <read_input_signals_and_set_device_state+0x1ea>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8000f02:	2200      	movs	r2, #0
 8000f04:	2108      	movs	r1, #8
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f7ff fdfb 	bl	8000b04 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2110      	movs	r1, #16
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f7ff fdf5 	bl	8000b04 <set_output_signal_state>
			}
			/*
			* если тип растра 120
			*/
			if (grid_sensor.GRID_120_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <read_input_signals_and_set_device_state+0x2a4>)
 8000f1c:	7a1b      	ldrb	r3, [r3, #8]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10b      	bne.n	8000f3a <read_input_signals_and_set_device_state+0x20a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_120
 8000f22:	2201      	movs	r2, #1
 8000f24:	2108      	movs	r1, #8
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f7ff fdeb 	bl	8000b04 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_180
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f7ff fde5 	bl	8000b04 <set_output_signal_state>
			}
			/*
			* если тип растра 180
			*/
			if (grid_sensor.GRID_180_DETECT_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <read_input_signals_and_set_device_state+0x2a4>)
 8000f3c:	7d1b      	ldrb	r3, [r3, #20]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10b      	bne.n	8000f5a <read_input_signals_and_set_device_state+0x22a>
			{
				set_output_signal_state(GRID_120_OUT_PORT, GRID_120_OUT_PIN, LOGIC_LEVEL_LOW);		// выставляем в "0" выходной сигнал GRID_120
 8000f42:	2200      	movs	r2, #0
 8000f44:	2108      	movs	r1, #8
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f7ff fddb 	bl	8000b04 <set_output_signal_state>
				set_output_signal_state(GRID_180_OUT_PORT, GRID_180_OUT_PIN, LOGIC_LEVEL_HIGH);		// выставляем в "1" выходной сигнал GRID_180
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2110      	movs	r1, #16
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f7ff fdd5 	bl	8000b04 <set_output_signal_state>
			}
		}

		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000f5c:	7adb      	ldrb	r3, [r3, #11]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d11f      	bne.n	8000fa2 <read_input_signals_and_set_device_state+0x272>
		{

			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f68:	e01b      	b.n	8000fa2 <read_input_signals_and_set_device_state+0x272>
	}
	case DEVICE_RETURN_TO_INITIAL_STATE:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000f6c:	7adb      	ldrb	r3, [r3, #11]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d119      	bne.n	8000fa6 <read_input_signals_and_set_device_state+0x276>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f78:	e015      	b.n	8000fa6 <read_input_signals_and_set_device_state+0x276>
	}
	case DEVICE_SCANING_TOMO_OFF:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED) 	// если статус мотора "движение завершено"
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000f7c:	7adb      	ldrb	r3, [r3, #11]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d113      	bne.n	8000faa <read_input_signals_and_set_device_state+0x27a>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f88:	e00f      	b.n	8000faa <read_input_signals_and_set_device_state+0x27a>
	}
	case DEVICE_SCANING_TOMO_ON:
	{
		if (motor.motor_movement_status == MOTOR_MOVEMENT_COMPLETED)	// если статус мотора "движение завершено"
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <read_input_signals_and_set_device_state+0x288>)
 8000f8c:	7adb      	ldrb	r3, [r3, #11]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10d      	bne.n	8000fae <read_input_signals_and_set_device_state+0x27e>
		{
			device_current_state = DEVICE_STANDBY;						// выставляем состояние устройства: "режим ожидания"
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <read_input_signals_and_set_device_state+0x284>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f98:	e009      	b.n	8000fae <read_input_signals_and_set_device_state+0x27e>
		break;
 8000f9a:	bf00      	nop
 8000f9c:	e008      	b.n	8000fb0 <read_input_signals_and_set_device_state+0x280>
		break;
 8000f9e:	bf00      	nop
 8000fa0:	e006      	b.n	8000fb0 <read_input_signals_and_set_device_state+0x280>
		break;
 8000fa2:	bf00      	nop
 8000fa4:	e004      	b.n	8000fb0 <read_input_signals_and_set_device_state+0x280>
		break;
 8000fa6:	bf00      	nop
 8000fa8:	e002      	b.n	8000fb0 <read_input_signals_and_set_device_state+0x280>
		break;
 8000faa:	bf00      	nop
 8000fac:	e000      	b.n	8000fb0 <read_input_signals_and_set_device_state+0x280>
		break;
 8000fae:	bf00      	nop
	}
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000008c 	.word	0x2000008c
 8000fb8:	200001ac 	.word	0x200001ac
 8000fbc:	200001c0 	.word	0x200001c0
 8000fc0:	200000cc 	.word	0x200000cc
 8000fc4:	20000078 	.word	0x20000078
 8000fc8:	20000090 	.word	0x20000090
 8000fcc:	200000d0 	.word	0x200000d0
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	20000148 	.word	0x20000148

08000fd8 <motor_timer_interrupts_start>:

/*
 * Запускаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_start(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(MOTOR_TIMER_POINTER);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <motor_timer_interrupts_start+0x10>)
 8000fde:	f001 fef1 	bl	8002dc4 <HAL_TIM_Base_Start_IT>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000160 	.word	0x20000160

08000fec <motor_timer_interrupts_stop>:

/*
 * Останавливаем прерывания, по которым шагает мотор
 */
void motor_timer_interrupts_stop(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(MOTOR_TIMER_POINTER);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <motor_timer_interrupts_stop+0x10>)
 8000ff2:	f001 ff51 	bl	8002e98 <HAL_TIM_Base_Stop_IT>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000160 	.word	0x20000160

08001000 <motor_movement_start>:

/*
 * Начинаем движение мотора
 */
void motor_movement_start(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	if (device_current_state == DEVICE_STANDBY)							// если устройство в режиме ожидания
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <motor_movement_start+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d102      	bne.n	8001012 <motor_movement_start+0x12>
	{
		error_code = STANDBY_MOVEMENT_ERROR;							// выставляем ошибку (нельзя двигаться в режиме ожидания)
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <motor_movement_start+0x24>)
 800100e:	2203      	movs	r2, #3
 8001010:	701a      	strb	r2, [r3, #0]
	}
	motor.motor_movement_status = MOTOR_MOVEMENT_IN_PROGRESS;			// выставляем флаг, что мотор находится в движении
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <motor_movement_start+0x28>)
 8001014:	2200      	movs	r2, #0
 8001016:	72da      	strb	r2, [r3, #11]
	motor_timer_interrupts_start();										// запускаем прерывания, по которым мотор будет шагать
 8001018:	f7ff ffde 	bl	8000fd8 <motor_timer_interrupts_start>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000008c 	.word	0x2000008c
 8001024:	200001bc 	.word	0x200001bc
 8001028:	200001ac 	.word	0x200001ac

0800102c <motor_movement_complete>:

/*
 * Прекращаем движение мотора
 */
void motor_movement_complete(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	motor_timer_interrupts_stop();										// останавливаем прерывания, по которым шагает мотор
 8001030:	f7ff ffdc 	bl	8000fec <motor_timer_interrupts_stop>
	motor.motor_movement_status = MOTOR_MOVEMENT_COMPLETED;				// выставляем флаг, что движение завершено
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <motor_movement_complete+0x14>)
 8001036:	2201      	movs	r2, #1
 8001038:	72da      	strb	r2, [r3, #11]
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001ac 	.word	0x200001ac

08001044 <motor_make_step_to_direction>:

/*
 * Делаем шаг в заданном направлении
 */
void motor_make_step_to_direction(MotorMoveDirection_EnumTypeDef move_direction)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	motor.motor_move_direction = move_direction;						// выставляем направление шага
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <motor_make_step_to_direction+0x20>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	7213      	strb	r3, [r2, #8]
	motor_direction_pin_set();											// выставляем нужное состояние на пине направления
 8001054:	f000 f924 	bl	80012a0 <motor_direction_pin_set>
	check_limit_switch_and_make_step();									// проверяем состояние концевика и совершаем шаг
 8001058:	f000 f940 	bl	80012dc <check_limit_switch_and_make_step>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001ac 	.word	0x200001ac

08001068 <bucky_ready_response_set>:

/*
 * Начинаем отсчёт шагов до выставления сигнала BUCKY_READY
 */
void bucky_ready_response_set(SignalLogicLevel_EnumTypeDef logic_level_to_set)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	switch (logic_level_to_set)											// если требуемый логический уровень сигнала BUCKY_READY
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d010      	beq.n	800109a <bucky_ready_response_set+0x32>
 8001078:	2b01      	cmp	r3, #1
 800107a:	d000      	beq.n	800107e <bucky_ready_response_set+0x16>
	{
		bucky_ready_delay_counter = 0;									// обнуляем счётчик шагов
		break;
	}
	}
}
 800107c:	e012      	b.n	80010a4 <bucky_ready_response_set+0x3c>
		bucky_ready_delay_counter++;									// инкрементируем счётчик шагов
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <bucky_ready_response_set+0x48>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <bucky_ready_response_set+0x48>)
 8001088:	701a      	strb	r2, [r3, #0]
		if (bucky_ready_delay_counter >= BUCKY_READY_DELAY_STEPS)		// если досчитали до нужного количества шагов
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <bucky_ready_response_set+0x48>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d907      	bls.n	80010a2 <bucky_ready_response_set+0x3a>
			bucky_ready_delay_counter = BUCKY_READY_DELAY_STEPS;		// удерживаем счётчик от дальнейшего увеличения
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <bucky_ready_response_set+0x48>)
 8001094:	2203      	movs	r2, #3
 8001096:	701a      	strb	r2, [r3, #0]
		break;
 8001098:	e003      	b.n	80010a2 <bucky_ready_response_set+0x3a>
		bucky_ready_delay_counter = 0;									// обнуляем счётчик шагов
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <bucky_ready_response_set+0x48>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
		break;
 80010a0:	e000      	b.n	80010a4 <bucky_ready_response_set+0x3c>
		break;
 80010a2:	bf00      	nop
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	20000028 	.word	0x20000028

080010b4 <bucky_ready_response_check>:

/*
 * Проверяем счётчик шагов до выставления сигнала BUCKY_READY (по таймеру)
 */
void bucky_ready_response_check(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	if (bucky_ready_delay_counter == BUCKY_READY_DELAY_STEPS)									// если прошли достаточное количество шагов
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <bucky_ready_response_check+0x2c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d106      	bne.n	80010ce <bucky_ready_response_check+0x1a>
	{
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_HIGH);	// выставляем сигнал BUCKY_READY в "1"
 80010c0:	2201      	movs	r2, #1
 80010c2:	2120      	movs	r1, #32
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f7ff fd1c 	bl	8000b04 <set_output_signal_state>
	}
	else
	{
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);	// иначе выставляем сигнал BUCKY_READY в "0"
	}
}
 80010cc:	e005      	b.n	80010da <bucky_ready_response_check+0x26>
		set_output_signal_state(BUCKY_READY_OUT_PORT, BUCKY_READY_OUT_PIN, LOGIC_LEVEL_LOW);	// иначе выставляем сигнал BUCKY_READY в "0"
 80010ce:	2200      	movs	r2, #0
 80010d0:	2120      	movs	r1, #32
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f7ff fd15 	bl	8000b04 <set_output_signal_state>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000028 	.word	0x20000028

080010e4 <motor_timer_interrupt_handler>:

/*
 * Обработчик прерываний таймера, отвечающего за шаги мотора
 */
void motor_timer_interrupt_handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	bucky_ready_response_check();														// проверяем, надо ли выставить сигнал BUCKY_READY в "1"
 80010e8:	f7ff ffe4 	bl	80010b4 <bucky_ready_response_check>
	switch (motor.motor_movement_purpose)												// если назначение движения мотора
 80010ec:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <motor_timer_interrupt_handler+0x140>)
 80010ee:	7a9b      	ldrb	r3, [r3, #10]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	f200 8095 	bhi.w	8001220 <motor_timer_interrupt_handler+0x13c>
 80010f6:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <motor_timer_interrupt_handler+0x18>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	080011f9 	.word	0x080011f9
 8001100:	0800111b 	.word	0x0800111b
 8001104:	08001141 	.word	0x08001141
 8001108:	08001161 	.word	0x08001161
 800110c:	08001183 	.word	0x08001183
 8001110:	08001115 	.word	0x08001115
	{
	case MOTOR_PURPOSE_INSTANT_STOP:													// если назначение движения мотора - мгновенная остановка
	{
		motor_movement_complete();														// завершаем движение
 8001114:	f7ff ff8a 	bl	800102c <motor_movement_complete>
		break;
 8001118:	e082      	b.n	8001220 <motor_timer_interrupt_handler+0x13c>
	}
	case MOTOR_PURPOSE_GRID_INSERTION:													// если назначение движения мотора - вставить растр
	{
		if (!(limit_switch_return_state()))												// если концевик не активен
 800111a:	f000 f933 	bl	8001384 <limit_switch_return_state>
 800111e:	4603      	mov	r3, r0
 8001120:	f083 0301 	eor.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <motor_timer_interrupt_handler+0x4e>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);							// двигаемся к начальной точке
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ff8a 	bl	8001044 <motor_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 8001130:	e071      	b.n	8001216 <motor_timer_interrupt_handler+0x132>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <motor_timer_interrupt_handler+0x144>)
 8001134:	7b5b      	ldrb	r3, [r3, #13]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d16d      	bne.n	8001216 <motor_timer_interrupt_handler+0x132>
				motor_movement_complete();												// завершаем движение
 800113a:	f7ff ff77 	bl	800102c <motor_movement_complete>
		break;
 800113e:	e06a      	b.n	8001216 <motor_timer_interrupt_handler+0x132>
	}
	case MOTOR_PURPOSE_GRID_EXTRACTION:													// если назначение движения мотора - извлечь растр
	{
		if (motor.steps_distance_from_limit_switch < RASTER_SUPPLY_DISTANCE_STEPS)		// если мы не дошли до крайнего положения
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <motor_timer_interrupt_handler+0x140>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001148:	da03      	bge.n	8001152 <motor_timer_interrupt_handler+0x6e>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_END);							// движемся от начальной точки (наружу)
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff ff7a 	bl	8001044 <motor_make_step_to_direction>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
			{
				motor_movement_complete();												// завершаем движение
			}
		}
		break;
 8001150:	e063      	b.n	800121a <motor_timer_interrupt_handler+0x136>
			if (grid_supply_button.button_current_state == BUTTON_RELEASED)				// иначе если кнопка подачи растра отпущена
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <motor_timer_interrupt_handler+0x144>)
 8001154:	7b5b      	ldrb	r3, [r3, #13]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d15f      	bne.n	800121a <motor_timer_interrupt_handler+0x136>
				motor_movement_complete();												// завершаем движение
 800115a:	f7ff ff67 	bl	800102c <motor_movement_complete>
		break;
 800115e:	e05c      	b.n	800121a <motor_timer_interrupt_handler+0x136>
	}
	case MOTOR_PURPOSE_EXPOSITION_TOMO_OFF:												// если назначение движения - экспозиция без сигнала ON_TOMO
	{
		if (BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)				// если сигнал BUCKY_CALL в "1"
 8001160:	4b32      	ldr	r3, [pc, #200]	; (800122c <motor_timer_interrupt_handler+0x148>)
 8001162:	7a1b      	ldrb	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <motor_timer_interrupt_handler+0x90>
		{
			cyclic_movement_step();														// делаем шаг
 8001168:	f000 f86a 	bl	8001240 <cyclic_movement_step>
			bucky_ready_response_set(LOGIC_LEVEL_HIGH);									// запускаем счётчик шагов до выставления сигнала BUCKY_READY
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff7b 	bl	8001068 <bucky_ready_response_set>
		else
		{
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// иначе выключаем сигнал BUCKY_READY
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
		}
		break;
 8001172:	e055      	b.n	8001220 <motor_timer_interrupt_handler+0x13c>
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// иначе выключаем сигнал BUCKY_READY
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff ff77 	bl	8001068 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <motor_timer_interrupt_handler+0x140>)
 800117c:	2200      	movs	r2, #0
 800117e:	729a      	strb	r2, [r3, #10]
		break;
 8001180:	e04e      	b.n	8001220 <motor_timer_interrupt_handler+0x13c>
	case MOTOR_PURPOSE_EXPOSITION_TOMO_ON:												// если назначение движения - экспозиция с сигналом ON_TOMO
	{
		/*
		 * если сигнал ON_OMO был включён, и сигнал BUCKY_CALL включён
		 */
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <motor_timer_interrupt_handler+0x14c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10f      	bne.n	80011aa <motor_timer_interrupt_handler+0xc6>
			(BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <motor_timer_interrupt_handler+0x148>)
 800118c:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED) && \
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10b      	bne.n	80011aa <motor_timer_interrupt_handler+0xc6>
		{
			if (ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH)				// если сигнал ON_TOMO в "0"
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <motor_timer_interrupt_handler+0x150>)
 8001194:	7a1b      	ldrb	r3, [r3, #8]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d105      	bne.n	80011a6 <motor_timer_interrupt_handler+0xc2>
			{
				ON_TOMO_IN_flag = ON_TOMO_WAS_ENABLED_AND_DISABLED;						// выставляем флаг, что ON_TOMO был в "1", а затем в "0"
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <motor_timer_interrupt_handler+0x14c>)
 800119c:	2202      	movs	r2, #2
 800119e:	701a      	strb	r2, [r3, #0]
				bucky_ready_response_set(LOGIC_LEVEL_HIGH);								// запускаем счётчик шагов до выставления сигнала BUCKY_READY
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff ff61 	bl	8001068 <bucky_ready_response_set>
			}
			cyclic_movement_step();														// делаем шаг
 80011a6:	f000 f84b 	bl	8001240 <cyclic_movement_step>
		}
		/*
		 * если сигнал ON_TOMO был включён и выключен, и сигнал ON_TOMO включён
		 */
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <motor_timer_interrupt_handler+0x14c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d109      	bne.n	80011c6 <motor_timer_interrupt_handler+0xe2>
			(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW))
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <motor_timer_interrupt_handler+0x150>)
 80011b4:	7a1b      	ldrb	r3, [r3, #8]
		if ((ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d105      	bne.n	80011c6 <motor_timer_interrupt_handler+0xe2>
		{
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// выключаем сигнал BUCKY_READY
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ff54 	bl	8001068 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <motor_timer_interrupt_handler+0x140>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	729a      	strb	r2, [r3, #10]
		}
		/*
		 * если сигнал BUCKY_CALL выключен, и сигнал ON_TOMO был включён и выключен, и сигнал ON_TOMO сейчас выключен
		 */
		if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <motor_timer_interrupt_handler+0x148>)
 80011c8:	7a1b      	ldrb	r3, [r3, #8]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d127      	bne.n	800121e <motor_timer_interrupt_handler+0x13a>
			(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <motor_timer_interrupt_handler+0x14c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
		if ((BUCKY_CALL_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH) && \
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d123      	bne.n	800121e <motor_timer_interrupt_handler+0x13a>
			(ON_TOMO_IN_signal.signal_logic_level == LOGIC_LEVEL_HIGH))
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <motor_timer_interrupt_handler+0x150>)
 80011d8:	7a1b      	ldrb	r3, [r3, #8]
			(ON_TOMO_IN_flag == ON_TOMO_WAS_ENABLED_AND_DISABLED) && \
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d11f      	bne.n	800121e <motor_timer_interrupt_handler+0x13a>
		{
			device_current_state = DEVICE_ERROR;										// переключаем устройство в состояние ошибки
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <motor_timer_interrupt_handler+0x154>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	701a      	strb	r2, [r3, #0]
			error_code = ON_TOMO_BUCKY_CALL_ERROR;										// выставляем ошибку (BUCKY_CALL выключился прежде, чем ON_TOMO включился повторно)
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <motor_timer_interrupt_handler+0x158>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	701a      	strb	r2, [r3, #0]
			bucky_ready_response_set(LOGIC_LEVEL_LOW);									// выключаем сигнал BUCKY_READY
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ff3c 	bl	8001068 <bucky_ready_response_set>
			motor.motor_movement_purpose = MOTOR_PURPOSE_TAKE_INITIAL_POSITION;			// выставляем назначение движения - двигаться в начальное положение
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <motor_timer_interrupt_handler+0x140>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	729a      	strb	r2, [r3, #10]
		}
		break;
 80011f6:	e012      	b.n	800121e <motor_timer_interrupt_handler+0x13a>
	}
	case MOTOR_PURPOSE_TAKE_INITIAL_POSITION:											// если назначение движения - вернуться в начальную позицию
	{
		if(!(limit_switch_return_state()))												// если концевик не активен
 80011f8:	f000 f8c4 	bl	8001384 <limit_switch_return_state>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f083 0301 	eor.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <motor_timer_interrupt_handler+0x12c>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);							// делаем шаг в направлении начального положения
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff ff1b 	bl	8001044 <motor_make_step_to_direction>
		}
		else
		{
			motor_movement_complete();													// иначе завершаем движение
		}
		break;
 800120e:	e007      	b.n	8001220 <motor_timer_interrupt_handler+0x13c>
			motor_movement_complete();													// иначе завершаем движение
 8001210:	f7ff ff0c 	bl	800102c <motor_movement_complete>
		break;
 8001214:	e004      	b.n	8001220 <motor_timer_interrupt_handler+0x13c>
		break;
 8001216:	bf00      	nop
 8001218:	e002      	b.n	8001220 <motor_timer_interrupt_handler+0x13c>
		break;
 800121a:	bf00      	nop
 800121c:	e000      	b.n	8001220 <motor_timer_interrupt_handler+0x13c>
		break;
 800121e:	bf00      	nop
	}
	}
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200001ac 	.word	0x200001ac
 8001228:	20000078 	.word	0x20000078
 800122c:	20000090 	.word	0x20000090
 8001230:	200000cc 	.word	0x200000cc
 8001234:	200001c0 	.word	0x200001c0
 8001238:	2000008c 	.word	0x2000008c
 800123c:	200001bc 	.word	0x200001bc

08001240 <cyclic_movement_step>:

/*
 * Циклическое движение мотора в режиме экспозиции
 */
void cyclic_movement_step(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	if (motor.steps_distance_from_limit_switch <= ON_TOMO_START_POSITITON_STEPS)					// если мы в крайней точке точке, ближайшей к начальному положению
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <cyclic_movement_step+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2bc8      	cmp	r3, #200	; 0xc8
 800124a:	dc05      	bgt.n	8001258 <cyclic_movement_step+0x18>
	{
		motor.exposition_movement_direction = EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION;			// выставляем флаг движения от начального положения
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <cyclic_movement_step+0x5c>)
 800124e:	2200      	movs	r2, #0
 8001250:	731a      	strb	r2, [r3, #12]
		motor_make_step_to_direction(MOVE_TO_COORD_END);											// делаем шаг в сторону от начального положения
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff fef6 	bl	8001044 <motor_make_step_to_direction>
	}
	/*
	 * если мы находимся в промежутке между крайними положениями растра (ближнее и дальнее)
	 */
	if ((motor.steps_distance_from_limit_switch > ON_TOMO_START_POSITITON_STEPS) && \
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <cyclic_movement_step+0x5c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2bc8      	cmp	r3, #200	; 0xc8
 800125e:	dd0f      	ble.n	8001280 <cyclic_movement_step+0x40>
			(motor.steps_distance_from_limit_switch < ON_TOMO_END_POSITITON_STEPS))
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <cyclic_movement_step+0x5c>)
 8001262:	681b      	ldr	r3, [r3, #0]
	if ((motor.steps_distance_from_limit_switch > ON_TOMO_START_POSITITON_STEPS) && \
 8001264:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001268:	da0a      	bge.n	8001280 <cyclic_movement_step+0x40>
	{
		if (motor.exposition_movement_direction == EXPOSITION_MOVEMENT_FROM_INITIAL_POSITION)		// если выставлен флаг движения от начального положения
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <cyclic_movement_step+0x5c>)
 800126c:	7b1b      	ldrb	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <cyclic_movement_step+0x3a>
		{
			motor_make_step_to_direction(MOVE_TO_COORD_END);										// делаем шаг от начального положения
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff fee6 	bl	8001044 <motor_make_step_to_direction>
 8001278:	e002      	b.n	8001280 <cyclic_movement_step+0x40>
		}
		else
		{
			motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);										// иначе делаем шаг в сторону начального положения
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fee2 	bl	8001044 <motor_make_step_to_direction>
		}
	}
	if (motor.steps_distance_from_limit_switch >= ON_TOMO_END_POSITITON_STEPS)						// если мы в крайней точке, дальней от начального положения
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <cyclic_movement_step+0x5c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001288:	db05      	blt.n	8001296 <cyclic_movement_step+0x56>
	{
		motor.exposition_movement_direction = ON_TOMO_MOVEMENT_TO_INITIAL_POSITION;					// выставляем флаг движения к начальному положению
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <cyclic_movement_step+0x5c>)
 800128c:	2201      	movs	r2, #1
 800128e:	731a      	strb	r2, [r3, #12]
		motor_make_step_to_direction(MOVE_TO_COORD_ORIGIN);											// делаем шаг в сторону начального положения
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fed7 	bl	8001044 <motor_make_step_to_direction>
	}
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001ac 	.word	0x200001ac

080012a0 <motor_direction_pin_set>:

/*
 * выставляем пин направления мотора
 */
void motor_direction_pin_set()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	switch (motor.motor_move_direction)																// если направление движения
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <motor_direction_pin_set+0x34>)
 80012a6:	7a1b      	ldrb	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <motor_direction_pin_set+0x12>
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d007      	beq.n	80012c0 <motor_direction_pin_set+0x20>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_RESET);				// иначе выставляем "0" на пине направления
		}
		break;
	}
	}
}
 80012b0:	e00d      	b.n	80012ce <motor_direction_pin_set+0x2e>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_RESET);				// выставляем "0" на пине направления
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <motor_direction_pin_set+0x38>)
 80012ba:	f000 fd73 	bl	8001da4 <HAL_GPIO_WritePin>
		break;
 80012be:	e006      	b.n	80012ce <motor_direction_pin_set+0x2e>
			HAL_GPIO_WritePin(MOTOR_DIR_OUT_PORT, MOTOR_DIR_OUT_PIN, GPIO_PIN_SET);					// выставляем "1" на пине направления
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c6:	4804      	ldr	r0, [pc, #16]	; (80012d8 <motor_direction_pin_set+0x38>)
 80012c8:	f000 fd6c 	bl	8001da4 <HAL_GPIO_WritePin>
		break;
 80012cc:	bf00      	nop
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001ac 	.word	0x200001ac
 80012d8:	48000400 	.word	0x48000400

080012dc <check_limit_switch_and_make_step>:

/*
 * проверяем состояние концевика и совершаем шаг
 */
void check_limit_switch_and_make_step()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	/*
	 * если направление движения к начальному положению, и концевик не активен, и не пройдено аварийное количество шагов к начальному положению
	 */
	if ((motor.motor_move_direction == MOVE_TO_COORD_ORIGIN) && \
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <check_limit_switch_and_make_step+0x60>)
 80012e2:	7a1b      	ldrb	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d119      	bne.n	800131c <check_limit_switch_and_make_step+0x40>
		(!(limit_switch_return_state())) && \
 80012e8:	f000 f84c 	bl	8001384 <limit_switch_return_state>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
	if ((motor.motor_move_direction == MOVE_TO_COORD_ORIGIN) && \
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d011      	beq.n	800131c <check_limit_switch_and_make_step+0x40>
		(motor.limit_emergency_counter < EMERGENCY_STEPS_TO_LIMIT))
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <check_limit_switch_and_make_step+0x60>)
 80012fa:	685b      	ldr	r3, [r3, #4]
		(!(limit_switch_return_state())) && \
 80012fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001300:	4293      	cmp	r3, r2
 8001302:	dc0b      	bgt.n	800131c <check_limit_switch_and_make_step+0x40>
	{
		step_toggle();																				// совершаем шаг
 8001304:	f000 f81c 	bl	8001340 <step_toggle>
		motor.steps_distance_from_limit_switch = motor.steps_distance_from_limit_switch - 1;		// декрементируем счётчик расстояния от начального положения
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <check_limit_switch_and_make_step+0x60>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <check_limit_switch_and_make_step+0x60>)
 8001310:	6013      	str	r3, [r2, #0]
		motor.limit_emergency_counter = motor.limit_emergency_counter + 1;							// инкрементируем аварийный счётчик шагов
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <check_limit_switch_and_make_step+0x60>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	3301      	adds	r3, #1
 8001318:	4a08      	ldr	r2, [pc, #32]	; (800133c <check_limit_switch_and_make_step+0x60>)
 800131a:	6053      	str	r3, [r2, #4]
	}
	if (motor.motor_move_direction == MOVE_TO_COORD_END)											// если направлениение движения от начального положения
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <check_limit_switch_and_make_step+0x60>)
 800131e:	7a1b      	ldrb	r3, [r3, #8]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d109      	bne.n	8001338 <check_limit_switch_and_make_step+0x5c>
	{
		step_toggle();																				// совершаем шаг
 8001324:	f000 f80c 	bl	8001340 <step_toggle>
		motor.steps_distance_from_limit_switch = motor.steps_distance_from_limit_switch + 1;		// инкрементируем счётчик расстояния от начального положения
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <check_limit_switch_and_make_step+0x60>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a03      	ldr	r2, [pc, #12]	; (800133c <check_limit_switch_and_make_step+0x60>)
 8001330:	6013      	str	r3, [r2, #0]
		motor.limit_emergency_counter = 0;															// обнуляем аварийный счётчик шагов
 8001332:	4b02      	ldr	r3, [pc, #8]	; (800133c <check_limit_switch_and_make_step+0x60>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
	}
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200001ac 	.word	0x200001ac

08001340 <step_toggle>:

/*
 * совершаем шаг
 */
void step_toggle()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	switch (motor.step_pin_current_phase)															// если текущее логическое состояние на пине шага
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <step_toggle+0x3c>)
 8001346:	7a5b      	ldrb	r3, [r3, #9]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <step_toggle+0x12>
 800134c:	2b01      	cmp	r3, #1
 800134e:	d009      	beq.n	8001364 <step_toggle+0x24>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_RESET);					// выставляем "0" на пине шага
		motor.step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
		break;
	}
	}
}
 8001350:	e011      	b.n	8001376 <step_toggle+0x36>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_SET);					// выставляем "1" на пине шага
 8001352:	2201      	movs	r2, #1
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <step_toggle+0x40>)
 8001358:	f000 fd24 	bl	8001da4 <HAL_GPIO_WritePin>
		motor.step_pin_current_phase = STEP_HIGH_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "1"
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <step_toggle+0x3c>)
 800135e:	2201      	movs	r2, #1
 8001360:	725a      	strb	r2, [r3, #9]
		break;
 8001362:	e008      	b.n	8001376 <step_toggle+0x36>
		HAL_GPIO_WritePin(MOTOR_STEP_OUT_PORT, MOTOR_STEP_OUT_PIN, GPIO_PIN_RESET);					// выставляем "0" на пине шага
 8001364:	2200      	movs	r2, #0
 8001366:	2180      	movs	r1, #128	; 0x80
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <step_toggle+0x40>)
 800136a:	f000 fd1b 	bl	8001da4 <HAL_GPIO_WritePin>
		motor.step_pin_current_phase = STEP_LOW_PHASE;												// выставляем флаг, что пин шага находится в логическом состоянии "0"
 800136e:	4b03      	ldr	r3, [pc, #12]	; (800137c <step_toggle+0x3c>)
 8001370:	2200      	movs	r2, #0
 8001372:	725a      	strb	r2, [r3, #9]
		break;
 8001374:	bf00      	nop
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001ac 	.word	0x200001ac
 8001380:	48000400 	.word	0x48000400

08001384 <limit_switch_return_state>:

/*
 * опрашиваем и возрващаем состояние концевика
 */
_Bool limit_switch_return_state()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	_Bool current_state;																			// флаг состояния концевика
	check_input_signal_state(&limit_switch.GRID_END_POINT_IN_signal);								// опрашиваем состояние пина концевика
 800138a:	480a      	ldr	r0, [pc, #40]	; (80013b4 <limit_switch_return_state+0x30>)
 800138c:	f7ff fb9a 	bl	8000ac4 <check_input_signal_state>
	if (LIMIT_SWITCH_LOGIC_LEVEL_INVERTED)															// если логический уровень концевика инвертирован аппаратно
	{
		if (limit_switch.GRID_END_POINT_IN_signal.signal_logic_level == LOGIC_LEVEL_LOW)			// если на пине концевика "0"
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <limit_switch_return_state+0x30>)
 8001392:	7a1b      	ldrb	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <limit_switch_return_state+0x20>
		{
			current_state = 1;																		// выставляем флаг концевика в "1"
 8001398:	2301      	movs	r3, #1
 800139a:	71fb      	strb	r3, [r7, #7]
			motor.steps_distance_from_limit_switch = 0;												// обнуляем счётчик расстояния до концевика
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <limit_switch_return_state+0x34>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e001      	b.n	80013a8 <limit_switch_return_state+0x24>
		}
		else
		{
			current_state = 0;																		// иначе выставляем флаг концевика в "0"
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
		{
			current_state = 1;																		// иначе выставляем флаг концевика в "1"
			motor.steps_distance_from_limit_switch = 0;												// обнуляем счётчик расстояния до концевика
		}
	}
	return current_state;																			// возвращаем флаг состояния концевика
 80013a8:	79fb      	ldrb	r3, [r7, #7]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000009c 	.word	0x2000009c
 80013b8:	200001ac 	.word	0x200001ac

080013bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopForever+0xe>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopForever+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e6:	f7ff f9e3 	bl	80007b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f002 f9fb 	bl	80037e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ee:	f7fe ff13 	bl	8000218 <main>

080013f2 <LoopForever>:

LoopForever:
    b LoopForever
 80013f2:	e7fe      	b.n	80013f2 <LoopForever>
  ldr   r0, =_estack
 80013f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001400:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 8001404:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001408:	200001d0 	.word	0x200001d0

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>

0800140e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f939 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f80e 	bl	8001440 <HAL_InitTick>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e001      	b.n	8001434 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001430:	f7ff f8d0 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001434:	79fb      	ldrb	r3, [r7, #7]

}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_InitTick+0x68>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d022      	beq.n	800149a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_InitTick+0x6c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_InitTick+0x68>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001460:	fbb1 f3f3 	udiv	r3, r1, r3
 8001464:	fbb2 f3f3 	udiv	r3, r2, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f944 	bl	80016f6 <HAL_SYSTICK_Config>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10f      	bne.n	8001494 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d809      	bhi.n	800148e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147a:	2200      	movs	r2, #0
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	f04f 30ff 	mov.w	r0, #4294967295
 8001482:	f000 f910 	bl	80016a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_InitTick+0x70>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e007      	b.n	800149e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e004      	b.n	800149e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x20>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <HAL_IncTick+0x1c>)
 80014c4:	6013      	str	r3, [r2, #0]
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	200001cc 	.word	0x200001cc
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200001cc 	.word	0x200001cc

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff40 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff90 	bl	80015e4 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5f 	bl	8001590 <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff33 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa4 	bl	800164c <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e147      	b.n	80019b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7fe ff70 	bl	800061c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0210 	bic.w	r2, r2, #16
 800174a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800174c:	f7ff fec4 	bl	80014d8 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001752:	e012      	b.n	800177a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001754:	f7ff fec0 	bl	80014d8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b0a      	cmp	r3, #10
 8001760:	d90b      	bls.n	800177a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e11b      	b.n	80019b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b08      	cmp	r3, #8
 8001786:	d0e5      	beq.n	8001754 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001798:	f7ff fe9e 	bl	80014d8 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800179e:	e012      	b.n	80017c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017a0:	f7ff fe9a 	bl	80014d8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d90b      	bls.n	80017c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0f5      	b.n	80019b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0e5      	beq.n	80017a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0202 	orr.w	r2, r2, #2
 80017e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a74      	ldr	r2, [pc, #464]	; (80019bc <HAL_FDCAN_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d103      	bne.n	80017f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80017ee:	4a74      	ldr	r2, [pc, #464]	; (80019c0 <HAL_FDCAN_Init+0x2b0>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7c1b      	ldrb	r3, [r3, #16]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699a      	ldr	r2, [r3, #24]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800180c:	619a      	str	r2, [r3, #24]
 800180e:	e007      	b.n	8001820 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800181e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7c5b      	ldrb	r3, [r3, #17]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d108      	bne.n	800183a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	e007      	b.n	800184a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001848:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7c9b      	ldrb	r3, [r3, #18]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d108      	bne.n	8001864 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001860:	619a      	str	r2, [r3, #24]
 8001862:	e007      	b.n	8001874 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001872:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001898:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0210 	bic.w	r2, r2, #16
 80018a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0204 	orr.w	r2, r2, #4
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	e02c      	b.n	800191e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d028      	beq.n	800191e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d01c      	beq.n	800190e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0210 	orr.w	r2, r2, #16
 80018f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d110      	bne.n	800191e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0220 	orr.w	r2, r2, #32
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	e007      	b.n	800191e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	3b01      	subs	r3, #1
 8001924:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	3b01      	subs	r3, #1
 800192c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800192e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001936:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	3b01      	subs	r3, #1
 8001940:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001946:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001948:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001952:	d115      	bne.n	8001980 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	3b01      	subs	r3, #1
 8001960:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001962:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	3b01      	subs	r3, #1
 800196a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800196c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	3b01      	subs	r3, #1
 8001976:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800197c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800197e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f814 	bl	80019c4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40006400 	.word	0x40006400
 80019c0:	40006500 	.word	0x40006500

080019c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80019ce:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019de:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a04:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e005      	b.n	8001a52 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3f3      	bcc.n	8001a46 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	4000a400 	.word	0x4000a400

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a7e:	e15a      	b.n	8001d36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 814c 	beq.w	8001d30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_GPIO_Init+0x48>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d007      	beq.n	8001ab8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aac:	2b11      	cmp	r3, #17
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b12      	cmp	r3, #18
 8001ab6:	d130      	bne.n	8001b1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aee:	2201      	movs	r2, #1
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 0201 	and.w	r2, r3, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0xea>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d123      	bne.n	8001ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	6939      	ldr	r1, [r7, #16]
 8001b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0203 	and.w	r2, r3, #3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80a6 	beq.w	8001d30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be4:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be8:	4a5a      	ldr	r2, [pc, #360]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf0:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfc:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c26:	d01f      	beq.n	8001c68 <HAL_GPIO_Init+0x1f8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a4c      	ldr	r2, [pc, #304]	; (8001d5c <HAL_GPIO_Init+0x2ec>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d019      	beq.n	8001c64 <HAL_GPIO_Init+0x1f4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a4b      	ldr	r2, [pc, #300]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_GPIO_Init+0x1f0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_GPIO_Init+0x2f4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00d      	beq.n	8001c5c <HAL_GPIO_Init+0x1ec>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a49      	ldr	r2, [pc, #292]	; (8001d68 <HAL_GPIO_Init+0x2f8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d007      	beq.n	8001c58 <HAL_GPIO_Init+0x1e8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a48      	ldr	r2, [pc, #288]	; (8001d6c <HAL_GPIO_Init+0x2fc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_GPIO_Init+0x1e4>
 8001c50:	2305      	movs	r3, #5
 8001c52:	e00a      	b.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c54:	2306      	movs	r3, #6
 8001c56:	e008      	b.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e004      	b.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	f002 0203 	and.w	r2, r2, #3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4093      	lsls	r3, r2
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c7a:	4937      	ldr	r1, [pc, #220]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c88:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cac:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cd6:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d00:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d2a:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f47f ae9d 	bne.w	8001a80 <HAL_GPIO_Init+0x10>
  }
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	48000800 	.word	0x48000800
 8001d64:	48000c00 	.word	0x48000c00
 8001d68:	48001000 	.word	0x48001000
 8001d6c:	48001400 	.word	0x48001400
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d141      	bne.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001de2:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dee:	d131      	bne.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001df0:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df6:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e00:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e08:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e10:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2232      	movs	r2, #50	; 0x32
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	4a3f      	ldr	r2, [pc, #252]	; (8001f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	0c9b      	lsrs	r3, r3, #18
 8001e22:	3301      	adds	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e26:	e002      	b.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3a:	d102      	bne.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f2      	bne.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e42:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4e:	d158      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e057      	b.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e54:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e5a:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e64:	e04d      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6c:	d141      	bne.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d131      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e82:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e94:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2232      	movs	r2, #50	; 0x32
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	0c9b      	lsrs	r3, r3, #18
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb2:	e002      	b.n	8001eba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec6:	d102      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f2      	bne.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eda:	d112      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e011      	b.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ef0:	e007      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40007000 	.word	0x40007000
 8001f14:	20000000 	.word	0x20000000
 8001f18:	431bde83 	.word	0x431bde83

08001f1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2a:	6093      	str	r3, [r2, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40007000 	.word	0x40007000

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e308      	b.n	8002560 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d075      	beq.n	8002046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5a:	4ba3      	ldr	r3, [pc, #652]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f64:	4ba0      	ldr	r3, [pc, #640]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d102      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3e>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_OscConfig+0x44>
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d10b      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	4b99      	ldr	r3, [pc, #612]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d05b      	beq.n	8002044 <HAL_RCC_OscConfig+0x108>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d157      	bne.n	8002044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e2e3      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d106      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x74>
 8001fa2:	4b91      	ldr	r3, [pc, #580]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a90      	ldr	r2, [pc, #576]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xb0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x98>
 8001fba:	4b8b      	ldr	r3, [pc, #556]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a8a      	ldr	r2, [pc, #552]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a87      	ldr	r2, [pc, #540]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xb0>
 8001fd4:	4b84      	ldr	r3, [pc, #528]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a83      	ldr	r2, [pc, #524]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b81      	ldr	r3, [pc, #516]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a80      	ldr	r2, [pc, #512]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fa70 	bl	80014d8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fa6c 	bl	80014d8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e2a8      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xc0>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fa5c 	bl	80014d8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fa58 	bl	80014d8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e294      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002036:	4b6c      	ldr	r3, [pc, #432]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0xe8>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d075      	beq.n	800213e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205c:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d102      	bne.n	8002072 <HAL_RCC_OscConfig+0x136>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d002      	beq.n	8002078 <HAL_RCC_OscConfig+0x13c>
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d11f      	bne.n	80020b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002078:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_OscConfig+0x154>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e267      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	4952      	ldr	r1, [pc, #328]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020a4:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_RCC_OscConfig+0x2b0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f9c9 	bl	8001440 <HAL_InitTick>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d043      	beq.n	800213c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e253      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d023      	beq.n	8002108 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff fa04 	bl	80014d8 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d4:	f7ff fa00 	bl	80014d8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e23c      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	4939      	ldr	r1, [pc, #228]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
 8002106:	e01a      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a36      	ldr	r2, [pc, #216]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 800210e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f9e0 	bl	80014d8 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211c:	f7ff f9dc 	bl	80014d8 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e218      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800212e:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x1e0>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d03c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01c      	beq.n	800218c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002158:	4a23      	ldr	r2, [pc, #140]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7ff f9b9 	bl	80014d8 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216a:	f7ff f9b5 	bl	80014d8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1f1      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0ef      	beq.n	800216a <HAL_RCC_OscConfig+0x22e>
 800218a:	e01b      	b.n	80021c4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff f99c 	bl	80014d8 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a4:	f7ff f998 	bl	80014d8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1d4      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ef      	bne.n	80021a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80ab 	beq.w	8002328 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2b4>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e005      	b.n	80021f2 <HAL_RCC_OscConfig+0x2b6>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	20000004 	.word	0x20000004
 80021f0:	2300      	movs	r3, #0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00d      	beq.n	8002212 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	4baf      	ldr	r3, [pc, #700]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	4aae      	ldr	r2, [pc, #696]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
 8002202:	4bac      	ldr	r3, [pc, #688]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002212:	4ba9      	ldr	r3, [pc, #676]	; (80024b8 <HAL_RCC_OscConfig+0x57c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221e:	4ba6      	ldr	r3, [pc, #664]	; (80024b8 <HAL_RCC_OscConfig+0x57c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4aa5      	ldr	r2, [pc, #660]	; (80024b8 <HAL_RCC_OscConfig+0x57c>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7ff f955 	bl	80014d8 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7ff f951 	bl	80014d8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e18d      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002244:	4b9c      	ldr	r3, [pc, #624]	; (80024b8 <HAL_RCC_OscConfig+0x57c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d108      	bne.n	800226a <HAL_RCC_OscConfig+0x32e>
 8002258:	4b96      	ldr	r3, [pc, #600]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a95      	ldr	r2, [pc, #596]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002268:	e024      	b.n	80022b4 <HAL_RCC_OscConfig+0x378>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b05      	cmp	r3, #5
 8002270:	d110      	bne.n	8002294 <HAL_RCC_OscConfig+0x358>
 8002272:	4b90      	ldr	r3, [pc, #576]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	4a8e      	ldr	r2, [pc, #568]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002282:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	4a8a      	ldr	r2, [pc, #552]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002292:	e00f      	b.n	80022b4 <HAL_RCC_OscConfig+0x378>
 8002294:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	4a86      	ldr	r2, [pc, #536]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a4:	4b83      	ldr	r3, [pc, #524]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	4a82      	ldr	r2, [pc, #520]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d016      	beq.n	80022ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff f90c 	bl	80014d8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7ff f908 	bl	80014d8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e142      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ed      	beq.n	80022c4 <HAL_RCC_OscConfig+0x388>
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff f8f5 	bl	80014d8 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff f8f1 	bl	80014d8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e12b      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ed      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	4a64      	ldr	r2, [pc, #400]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002326:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03c      	beq.n	80023ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01c      	beq.n	8002376 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800233c:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800233e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002342:	4a5c      	ldr	r2, [pc, #368]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff f8c4 	bl	80014d8 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002354:	f7ff f8c0 	bl	80014d8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0fc      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002366:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002368:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ef      	beq.n	8002354 <HAL_RCC_OscConfig+0x418>
 8002374:	e01b      	b.n	80023ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002376:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800237c:	4a4d      	ldr	r2, [pc, #308]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7ff f8a7 	bl	80014d8 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238e:	f7ff f8a3 	bl	80014d8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0df      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023a0:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80023a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ef      	bne.n	800238e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80d3 	beq.w	800255e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b8:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	f000 808d 	beq.w	80024e0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d15a      	bne.n	8002484 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7ff f87d 	bl	80014d8 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e2:	f7ff f879 	bl	80014d8 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0b5      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x580>)
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6a11      	ldr	r1, [r2, #32]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002410:	3a01      	subs	r2, #1
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	4311      	orrs	r1, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800241a:	0212      	lsls	r2, r2, #8
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002422:	0852      	lsrs	r2, r2, #1
 8002424:	3a01      	subs	r2, #1
 8002426:	0552      	lsls	r2, r2, #21
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800242e:	0852      	lsrs	r2, r2, #1
 8002430:	3a01      	subs	r2, #1
 8002432:	0652      	lsls	r2, r2, #25
 8002434:	4311      	orrs	r1, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800243a:	06d2      	lsls	r2, r2, #27
 800243c:	430a      	orrs	r2, r1
 800243e:	491d      	ldr	r1, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f83c 	bl	80014d8 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff f838 	bl	80014d8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e074      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x528>
 8002482:	e06c      	b.n	800255e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800248a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80024a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f814 	bl	80014d8 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b2:	e00e      	b.n	80024d2 <HAL_RCC_OscConfig+0x596>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
 80024bc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7ff f80a 	bl	80014d8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e046      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_RCC_OscConfig+0x62c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x584>
 80024de:	e03e      	b.n	800255e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e039      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCC_OscConfig+0x62c>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d12c      	bne.n	800255a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	3b01      	subs	r3, #1
 800250c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d123      	bne.n	800255a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d11b      	bne.n	800255a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d113      	bne.n	800255a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	3b01      	subs	r3, #1
 8002540:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d109      	bne.n	800255a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	3b01      	subs	r3, #1
 8002554:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e11e      	b.n	80027c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_ClockConfig+0x260>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d910      	bls.n	80025b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <HAL_RCC_ClockConfig+0x260>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 020f 	bic.w	r2, r3, #15
 800259a:	498c      	ldr	r1, [pc, #560]	; (80027cc <HAL_RCC_ClockConfig+0x260>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b8a      	ldr	r3, [pc, #552]	; (80027cc <HAL_RCC_ClockConfig+0x260>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e106      	b.n	80027c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d073      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d129      	bne.n	800261c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c8:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0f4      	b.n	80027c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025d8:	f000 f966 	bl	80028a8 <RCC_GetSysClockFreqFromPLLSource>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4a7c      	ldr	r2, [pc, #496]	; (80027d4 <HAL_RCC_ClockConfig+0x268>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d93f      	bls.n	8002666 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025e6:	4b7a      	ldr	r3, [pc, #488]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d033      	beq.n	8002666 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002602:	2b00      	cmp	r3, #0
 8002604:	d12f      	bne.n	8002666 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002606:	4b72      	ldr	r3, [pc, #456]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260e:	4a70      	ldr	r2, [pc, #448]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002614:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e024      	b.n	8002666 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d107      	bne.n	8002634 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002624:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0c6      	b.n	80027c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002634:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0be      	b.n	80027c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002644:	f000 f8ce 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8002648:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4a61      	ldr	r2, [pc, #388]	; (80027d4 <HAL_RCC_ClockConfig+0x268>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d909      	bls.n	8002666 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002652:	4b5f      	ldr	r3, [pc, #380]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800265a:	4a5d      	ldr	r2, [pc, #372]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 800265c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002660:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4957      	ldr	r1, [pc, #348]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002674:	4313      	orrs	r3, r2
 8002676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002678:	f7fe ff2e 	bl	80014d8 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe ff2a 	bl	80014d8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e095      	b.n	80027c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 020c 	and.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1eb      	bne.n	8002680 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a42      	ldr	r2, [pc, #264]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026e0:	4a3b      	ldr	r2, [pc, #236]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 80026e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4936      	ldr	r1, [pc, #216]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
 80026fa:	e008      	b.n	800270e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b80      	cmp	r3, #128	; 0x80
 8002700:	d105      	bne.n	800270e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4a32      	ldr	r2, [pc, #200]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <HAL_RCC_ClockConfig+0x260>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d21d      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_ClockConfig+0x260>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 020f 	bic.w	r2, r3, #15
 8002724:	4929      	ldr	r1, [pc, #164]	; (80027cc <HAL_RCC_ClockConfig+0x260>)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800272c:	f7fe fed4 	bl	80014d8 <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	e00a      	b.n	800274a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002734:	f7fe fed0 	bl	80014d8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e03b      	b.n	80027c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCC_ClockConfig+0x260>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d1ed      	bne.n	8002734 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4917      	ldr	r1, [pc, #92]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490f      	ldr	r1, [pc, #60]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002796:	f000 f825 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 800279a:	4601      	mov	r1, r0
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <HAL_RCC_ClockConfig+0x264>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <HAL_RCC_ClockConfig+0x26c>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	fa21 f303 	lsr.w	r3, r1, r3
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x270>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fe40 	bl	8001440 <HAL_InitTick>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	04c4b400 	.word	0x04c4b400
 80027d8:	08003854 	.word	0x08003854
 80027dc:	20000000 	.word	0x20000000
 80027e0:	20000004 	.word	0x20000004

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e047      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b08      	cmp	r3, #8
 8002806:	d102      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002808:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	e03e      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d136      	bne.n	8002888 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_GetSysClockFreq+0xb8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d10c      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002838:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002842:	68d2      	ldr	r2, [r2, #12]
 8002844:	0a12      	lsrs	r2, r2, #8
 8002846:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
      break;
 8002850:	e00c      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <HAL_RCC_GetSysClockFreq+0xb8>)
 800285c:	68d2      	ldr	r2, [r2, #12]
 800285e:	0a12      	lsrs	r2, r2, #8
 8002860:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
      break;
 800286a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_GetSysClockFreq+0xb8>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0e5b      	lsrs	r3, r3, #25
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	e001      	b.n	800288c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800288c:	693b      	ldr	r3, [r7, #16]
}
 800288e:	4618      	mov	r0, r3
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	01e84800 	.word	0x01e84800

080028a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3301      	adds	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d10c      	bne.n	80028e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028cc:	4a17      	ldr	r2, [pc, #92]	; (800292c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028d6:	68d2      	ldr	r2, [r2, #12]
 80028d8:	0a12      	lsrs	r2, r2, #8
 80028da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]
    break;
 80028e4:	e00c      	b.n	8002900 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028f0:	68d2      	ldr	r2, [r2, #12]
 80028f2:	0a12      	lsrs	r2, r2, #8
 80028f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
    break;
 80028fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0e5b      	lsrs	r3, r3, #25
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	3301      	adds	r3, #1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800291a:	687b      	ldr	r3, [r7, #4]
}
 800291c:	4618      	mov	r0, r3
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40021000 	.word	0x40021000
 800292c:	01e84800 	.word	0x01e84800
 8002930:	00f42400 	.word	0x00f42400

08002934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800293c:	2300      	movs	r3, #0
 800293e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002940:	2300      	movs	r3, #0
 8002942:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8098 	beq.w	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10d      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a3f      	ldr	r2, [pc, #252]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6593      	str	r3, [r2, #88]	; 0x58
 800296e:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a39      	ldr	r2, [pc, #228]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800298a:	f7fe fda5 	bl	80014d8 <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002990:	e009      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe fda1 	bl	80014d8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d902      	bls.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	74fb      	strb	r3, [r7, #19]
        break;
 80029a4:	e005      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ef      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d159      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029b8:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01e      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d019      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029d4:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a00:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe fd61 	bl	80014d8 <HAL_GetTick>
 8002a16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a18:	e00b      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fd5d 	bl	80014d8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d902      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a30:	e006      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ec      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a5c:	e008      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	74bb      	strb	r3, [r7, #18]
 8002a62:	e005      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a70:	7c7b      	ldrb	r3, [r7, #17]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d105      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a76:	4ba6      	ldr	r3, [pc, #664]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	4aa5      	ldr	r2, [pc, #660]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a8e:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f023 0203 	bic.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	499c      	ldr	r1, [pc, #624]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ab0:	4b97      	ldr	r3, [pc, #604]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 020c 	bic.w	r2, r3, #12
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	4994      	ldr	r1, [pc, #592]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ad2:	4b8f      	ldr	r3, [pc, #572]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	498b      	ldr	r1, [pc, #556]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002af4:	4b86      	ldr	r3, [pc, #536]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	4983      	ldr	r1, [pc, #524]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b16:	4b7e      	ldr	r3, [pc, #504]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	497a      	ldr	r1, [pc, #488]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b38:	4b75      	ldr	r3, [pc, #468]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4972      	ldr	r1, [pc, #456]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	4969      	ldr	r1, [pc, #420]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b7c:	4b64      	ldr	r3, [pc, #400]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4961      	ldr	r1, [pc, #388]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9e:	4b5c      	ldr	r3, [pc, #368]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	4958      	ldr	r1, [pc, #352]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	4950      	ldr	r1, [pc, #320]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bde:	d105      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a4a      	ldr	r2, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bf8:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	4942      	ldr	r1, [pc, #264]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c16:	d105      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c18:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a3c      	ldr	r2, [pc, #240]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c22:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4934      	ldr	r1, [pc, #208]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c50:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a2e      	ldr	r2, [pc, #184]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	4926      	ldr	r1, [pc, #152]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c86:	d105      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	4918      	ldr	r1, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d04:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000

08002d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e049      	b.n	8002dba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fcb2 	bl	80006a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f000 fb52 	bl	80033fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d001      	beq.n	8002ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e04a      	b.n	8002e72 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d018      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x6c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e06:	d013      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x6c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00e      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x6c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x6c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <HAL_TIM_Base_Start_IT+0xc8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x6c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d115      	bne.n	8002e5c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d015      	beq.n	8002e6e <HAL_TIM_Base_Start_IT+0xaa>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d011      	beq.n	8002e6e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	e008      	b.n	8002e6e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e000      	b.n	8002e70 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800
 8002e8c:	40013400 	.word	0x40013400
 8002e90:	40014000 	.word	0x40014000
 8002e94:	00010007 	.word	0x00010007

08002e98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10f      	bne.n	8002ee0 <HAL_TIM_Base_Stop_IT+0x48>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	f244 4344 	movw	r3, #17476	; 0x4444
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <HAL_TIM_Base_Stop_IT+0x48>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d122      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d11b      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 0202 	mvn.w	r2, #2
 8002f22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fa41 	bl	80033c0 <HAL_TIM_IC_CaptureCallback>
 8002f3e:	e005      	b.n	8002f4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fa33 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa44 	bl	80033d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d122      	bne.n	8002fa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d11b      	bne.n	8002fa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f06f 0204 	mvn.w	r2, #4
 8002f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fa17 	bl	80033c0 <HAL_TIM_IC_CaptureCallback>
 8002f92:	e005      	b.n	8002fa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa09 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa1a 	bl	80033d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d122      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11b      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f06f 0208 	mvn.w	r2, #8
 8002fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f9ed 	bl	80033c0 <HAL_TIM_IC_CaptureCallback>
 8002fe6:	e005      	b.n	8002ff4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f9df 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9f0 	bl	80033d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b10      	cmp	r3, #16
 8003006:	d122      	bne.n	800304e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d11b      	bne.n	800304e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0210 	mvn.w	r2, #16
 800301e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2208      	movs	r2, #8
 8003024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f9c3 	bl	80033c0 <HAL_TIM_IC_CaptureCallback>
 800303a:	e005      	b.n	8003048 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f9b5 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f9c6 	bl	80033d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d10e      	bne.n	800307a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0201 	mvn.w	r2, #1
 8003072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f98f 	bl	8003398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d10e      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d107      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800309e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fb63 	bl	800376c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d10e      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fb56 	bl	8003780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d107      	bne.n	8003100 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f974 	bl	80033e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b20      	cmp	r3, #32
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0220 	mvn.w	r2, #32
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fb16 	bl	8003758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313a:	d10f      	bne.n	800315c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800314a:	d107      	bne.n	800315c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fb1c 	bl	8003794 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800316a:	d10f      	bne.n	800318c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fb0e 	bl	80037a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319a:	d10f      	bne.n	80031bc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fb00 	bl	80037bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ca:	d10f      	bne.n	80031ec <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 faf2 	bl	80037d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIM_ConfigClockSource+0x18>
 8003208:	2302      	movs	r3, #2
 800320a:	e0b9      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x18c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800322a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800322e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003236:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b70      	cmp	r3, #112	; 0x70
 8003246:	d02e      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0xb2>
 8003248:	2b70      	cmp	r3, #112	; 0x70
 800324a:	d812      	bhi.n	8003272 <HAL_TIM_ConfigClockSource+0x7e>
 800324c:	2b30      	cmp	r3, #48	; 0x30
 800324e:	f000 8084 	beq.w	800335a <HAL_TIM_ConfigClockSource+0x166>
 8003252:	2b30      	cmp	r3, #48	; 0x30
 8003254:	d806      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x70>
 8003256:	2b10      	cmp	r3, #16
 8003258:	d07f      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x166>
 800325a:	2b20      	cmp	r3, #32
 800325c:	d07d      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x166>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d07b      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003262:	e084      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8003264:	2b50      	cmp	r3, #80	; 0x50
 8003266:	d048      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x106>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d056      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x126>
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d064      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x146>
      break;
 8003270:	e07d      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8003272:	4a45      	ldr	r2, [pc, #276]	; (8003388 <HAL_TIM_ConfigClockSource+0x194>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d070      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x166>
 8003278:	4a43      	ldr	r2, [pc, #268]	; (8003388 <HAL_TIM_ConfigClockSource+0x194>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d809      	bhi.n	8003292 <HAL_TIM_ConfigClockSource+0x9e>
 800327e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003282:	d027      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0xe0>
 8003284:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003288:	d067      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x166>
 800328a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328e:	d06d      	beq.n	800336c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003290:	e06d      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8003292:	4a3e      	ldr	r2, [pc, #248]	; (800338c <HAL_TIM_ConfigClockSource+0x198>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d060      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x166>
 8003298:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <HAL_TIM_ConfigClockSource+0x19c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d05d      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x166>
 800329e:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <HAL_TIM_ConfigClockSource+0x1a0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d05a      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x166>
      break;
 80032a4:	e063      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f000 f9ad 	bl	8003614 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	609a      	str	r2, [r3, #8]
      break;
 80032d2:	e04c      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6899      	ldr	r1, [r3, #8]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f000 f996 	bl	8003614 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f6:	609a      	str	r2, [r3, #8]
      break;
 80032f8:	e039      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	461a      	mov	r2, r3
 8003308:	f000 f908 	bl	800351c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2150      	movs	r1, #80	; 0x50
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f961 	bl	80035da <TIM_ITRx_SetConfig>
      break;
 8003318:	e029      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	461a      	mov	r2, r3
 8003328:	f000 f927 	bl	800357a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2160      	movs	r1, #96	; 0x60
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f951 	bl	80035da <TIM_ITRx_SetConfig>
      break;
 8003338:	e019      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	461a      	mov	r2, r3
 8003348:	f000 f8e8 	bl	800351c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f941 	bl	80035da <TIM_ITRx_SetConfig>
      break;
 8003358:	e009      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4619      	mov	r1, r3
 8003364:	4610      	mov	r0, r2
 8003366:	f000 f938 	bl	80035da <TIM_ITRx_SetConfig>
        break;
 800336a:	e000      	b.n	800336e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800336c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00100020 	.word	0x00100020
 800338c:	00100040 	.word	0x00100040
 8003390:	00100070 	.word	0x00100070
 8003394:	00100030 	.word	0x00100030

08003398 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <TIM_Base_SetConfig+0x104>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00f      	beq.n	8003434 <TIM_Base_SetConfig+0x38>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341a:	d00b      	beq.n	8003434 <TIM_Base_SetConfig+0x38>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a39      	ldr	r2, [pc, #228]	; (8003504 <TIM_Base_SetConfig+0x108>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_Base_SetConfig+0x38>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a38      	ldr	r2, [pc, #224]	; (8003508 <TIM_Base_SetConfig+0x10c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_Base_SetConfig+0x38>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a37      	ldr	r2, [pc, #220]	; (800350c <TIM_Base_SetConfig+0x110>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d108      	bne.n	8003446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2d      	ldr	r2, [pc, #180]	; (8003500 <TIM_Base_SetConfig+0x104>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01b      	beq.n	8003486 <TIM_Base_SetConfig+0x8a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d017      	beq.n	8003486 <TIM_Base_SetConfig+0x8a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <TIM_Base_SetConfig+0x108>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <TIM_Base_SetConfig+0x8a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <TIM_Base_SetConfig+0x10c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00f      	beq.n	8003486 <TIM_Base_SetConfig+0x8a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a28      	ldr	r2, [pc, #160]	; (800350c <TIM_Base_SetConfig+0x110>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00b      	beq.n	8003486 <TIM_Base_SetConfig+0x8a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <TIM_Base_SetConfig+0x114>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d007      	beq.n	8003486 <TIM_Base_SetConfig+0x8a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a26      	ldr	r2, [pc, #152]	; (8003514 <TIM_Base_SetConfig+0x118>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d003      	beq.n	8003486 <TIM_Base_SetConfig+0x8a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a25      	ldr	r2, [pc, #148]	; (8003518 <TIM_Base_SetConfig+0x11c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d108      	bne.n	8003498 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a10      	ldr	r2, [pc, #64]	; (8003500 <TIM_Base_SetConfig+0x104>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0xe8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a11      	ldr	r2, [pc, #68]	; (800350c <TIM_Base_SetConfig+0x110>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0xe8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a10      	ldr	r2, [pc, #64]	; (8003510 <TIM_Base_SetConfig+0x114>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0xe8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <TIM_Base_SetConfig+0x118>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0xe8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <TIM_Base_SetConfig+0x11c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	615a      	str	r2, [r3, #20]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40013400 	.word	0x40013400
 8003510:	40014000 	.word	0x40014000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800

0800351c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 030a 	bic.w	r3, r3, #10
 8003558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357a:	b480      	push	{r7}
 800357c:	b087      	sub	sp, #28
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0210 	bic.w	r2, r3, #16
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	031b      	lsls	r3, r3, #12
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f043 0307 	orr.w	r3, r3, #7
 8003600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800362e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	021a      	lsls	r2, r3, #8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	431a      	orrs	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	609a      	str	r2, [r3, #8]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003668:	2302      	movs	r3, #2
 800366a:	e065      	b.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2c      	ldr	r2, [pc, #176]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e2:	d013      	beq.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a17      	ldr	r2, [pc, #92]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10c      	bne.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003712:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	4313      	orrs	r3, r2
 800371c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40013400 	.word	0x40013400
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40014000 	.word	0x40014000

08003758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <__libc_init_array>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	4e0d      	ldr	r6, [pc, #52]	; (800381c <__libc_init_array+0x38>)
 80037e8:	4c0d      	ldr	r4, [pc, #52]	; (8003820 <__libc_init_array+0x3c>)
 80037ea:	1ba4      	subs	r4, r4, r6
 80037ec:	10a4      	asrs	r4, r4, #2
 80037ee:	2500      	movs	r5, #0
 80037f0:	42a5      	cmp	r5, r4
 80037f2:	d109      	bne.n	8003808 <__libc_init_array+0x24>
 80037f4:	4e0b      	ldr	r6, [pc, #44]	; (8003824 <__libc_init_array+0x40>)
 80037f6:	4c0c      	ldr	r4, [pc, #48]	; (8003828 <__libc_init_array+0x44>)
 80037f8:	f000 f820 	bl	800383c <_init>
 80037fc:	1ba4      	subs	r4, r4, r6
 80037fe:	10a4      	asrs	r4, r4, #2
 8003800:	2500      	movs	r5, #0
 8003802:	42a5      	cmp	r5, r4
 8003804:	d105      	bne.n	8003812 <__libc_init_array+0x2e>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800380c:	4798      	blx	r3
 800380e:	3501      	adds	r5, #1
 8003810:	e7ee      	b.n	80037f0 <__libc_init_array+0xc>
 8003812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003816:	4798      	blx	r3
 8003818:	3501      	adds	r5, #1
 800381a:	e7f2      	b.n	8003802 <__libc_init_array+0x1e>
 800381c:	08003864 	.word	0x08003864
 8003820:	08003864 	.word	0x08003864
 8003824:	08003864 	.word	0x08003864
 8003828:	08003868 	.word	0x08003868

0800382c <memset>:
 800382c:	4402      	add	r2, r0
 800382e:	4603      	mov	r3, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <_init>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	bf00      	nop
 8003840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003842:	bc08      	pop	{r3}
 8003844:	469e      	mov	lr, r3
 8003846:	4770      	bx	lr

08003848 <_fini>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	bf00      	nop
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr
